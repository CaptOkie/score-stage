/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 43);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*!\n * Vue.js v2.1.8\n * (c) 2014-2016 Evan You\n * Released under the MIT License.\n */\n'use strict';\n\n/*  */\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction _toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val, 10);\n  return (n || n === 0) ? n : val\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Remove an item from an array\n */\nfunction remove$1 (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return typeof value === 'string' || typeof value === 'number'\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delmited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /([^-])([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str\n    .replace(hyphenateRE, '$1-$2')\n    .replace(hyphenateRE, '$1-$2')\n    .toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind$1 (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nvar toString = Object.prototype.toString;\nvar OBJECT_STRING = '[object Object]';\nfunction isPlainObject (obj) {\n  return toString.call(obj) === OBJECT_STRING\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n */\nfunction noop () {}\n\n/**\n * Always return false.\n */\nvar no = function () { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    return JSON.stringify(a) === JSON.stringify(b)\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/*  */\n\nvar config = {\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * List of asset types that a component can own.\n   */\n  _assetTypes: [\n    'component',\n    'directive',\n    'filter'\n  ],\n\n  /**\n   * List of lifecycle hooks.\n   */\n  _lifecycleHooks: [\n    'beforeCreate',\n    'created',\n    'beforeMount',\n    'mounted',\n    'beforeUpdate',\n    'updated',\n    'beforeDestroy',\n    'destroyed',\n    'activated',\n    'deactivated'\n  ],\n\n  /**\n   * Max circular updates allowed in a scheduler flush cycle.\n   */\n  _maxUpdateCount: 100\n};\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  } else {\n    var segments = path.split('.');\n    return function (obj) {\n      for (var i = 0; i < segments.length; i++) {\n        if (!obj) { return }\n        obj = obj[segments[i]];\n      }\n      return obj\n    }\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return /native code/.test(Ctor.toString())\n}\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler () {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) { cb.call(ctx); }\n      if (_resolve) { _resolve(ctx); }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\nvar warn = noop;\nvar formatComponentName;\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n\n  warn = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.error(\"[Vue warn]: \" + msg + \" \" + (\n        vm ? formatLocation(formatComponentName(vm)) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm) {\n    if (vm.$root === vm) {\n      return 'root instance'\n    }\n    var name = vm._isVue\n      ? vm.$options.name || vm.$options._componentTag\n      : vm.name;\n    return (\n      (name ? (\"component <\" + name + \">\") : \"anonymous component\") +\n      (vm._isVue && vm.$options.__file ? (\" at \" + (vm.$options.__file)) : '')\n    )\n  };\n\n  var formatLocation = function (str) {\n    if (str === 'anonymous component') {\n      str += \" - use the \\\"name\\\" option for better debugging messages.\";\n    }\n    return (\"\\n(found in \" + str + \")\")\n  };\n}\n\n/*  */\n\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid$1++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove$1(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stablize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var arguments$1 = arguments;\n\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments$1[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true,\n  isSettingProps: false\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value)) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (Array.isArray(value)) {\n          dependArray(value);\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set$1 (obj, key, val) {\n  if (Array.isArray(obj)) {\n    obj.length = Math.max(obj.length, key);\n    obj.splice(key, 1, val);\n    return val\n  }\n  if (hasOwn(obj, key)) {\n    obj[key] = val;\n    return\n  }\n  var ob = obj.__ob__;\n  if (obj._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return\n  }\n  if (!ob) {\n    obj[key] = val;\n    return\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (obj, key) {\n  var ob = obj.__ob__;\n  if (obj._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(obj, key)) {\n    return\n  }\n  delete obj[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set$1(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        childVal.call(this),\n        parentVal.call(this)\n      )\n    }\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm)\n        : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n};\n\n/**\n * Hooks and param attributes are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nconfig._lifecycleHooks.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal\n    ? extend(res, childVal)\n    : res\n}\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  /* istanbul ignore if */\n  if (!childVal) { return parentVal }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent\n      ? parent.concat(child)\n      : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.computed = function (parentVal, childVal) {\n  if (!childVal) { return parentVal }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret\n};\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn(\n        'Do not use built-in or reserved HTML elements as component ' +\n        'id: ' + key\n      );\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n  normalizeProps(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = typeof extendsFrom === 'function'\n      ? mergeOptions(parent, extendsFrom.options, vm)\n      : mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      var mixin = child.mixins[i];\n      if (mixin.prototype instanceof Vue$3) {\n        mixin = mixin.options;\n      }\n      parent = mergeOptions(parent, mixin, vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (isObject(def)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm[key] !== undefined) {\n    return vm[key]\n  }\n  // call factory function for non-Function types\n  return typeof def === 'function' && prop.type !== Function\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\n/**\n * Assert the type of a value\n */\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (expectedType === 'String') {\n    valid = typeof value === (expectedType = 'string');\n  } else if (expectedType === 'Number') {\n    valid = typeof value === (expectedType = 'number');\n  } else if (expectedType === 'Boolean') {\n    valid = typeof value === (expectedType = 'boolean');\n  } else if (expectedType === 'Function') {\n    valid = typeof value === (expectedType = 'function');\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match && match[1]\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n\n\nvar util = Object.freeze({\n\tdefineReactive: defineReactive$$1,\n\t_toString: _toString,\n\ttoNumber: toNumber,\n\tmakeMap: makeMap,\n\tisBuiltInTag: isBuiltInTag,\n\tremove: remove$1,\n\thasOwn: hasOwn,\n\tisPrimitive: isPrimitive,\n\tcached: cached,\n\tcamelize: camelize,\n\tcapitalize: capitalize,\n\thyphenate: hyphenate,\n\tbind: bind$1,\n\ttoArray: toArray,\n\textend: extend,\n\tisObject: isObject,\n\tisPlainObject: isPlainObject,\n\ttoObject: toObject,\n\tnoop: noop,\n\tno: no,\n\tidentity: identity,\n\tgenStaticKeys: genStaticKeys,\n\tlooseEqual: looseEqual,\n\tlooseIndexOf: looseIndexOf,\n\tisReserved: isReserved,\n\tdef: def,\n\tparsePath: parsePath,\n\thasProto: hasProto,\n\tinBrowser: inBrowser,\n\tUA: UA,\n\tisIE: isIE,\n\tisIE9: isIE9,\n\tisEdge: isEdge,\n\tisAndroid: isAndroid,\n\tisIOS: isIOS,\n\tisServerRendering: isServerRendering,\n\tdevtools: devtools,\n\tnextTick: nextTick,\n\tget _Set () { return _Set; },\n\tmergeOptions: mergeOptions,\n\tresolveAsset: resolveAsset,\n\tget warn () { return warn; },\n\tget formatComponentName () { return formatComponentName; },\n\tvalidateProp: validateProp\n});\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      \"referenced during render. Make sure to declare reactive data \" +\n      \"properties in the data option.\",\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\n\nvar queue = [];\nvar has$1 = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  queue.length = 0;\n  has$1 = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    var watcher = queue[index];\n    var id = watcher.id;\n    has$1[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has$1[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > config._maxUpdateCount) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n\n  resetSchedulerState();\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has$1[id] == null) {\n    has$1[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i >= 0 && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(Math.max(i, index) + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options\n) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value = this.getter.call(this.vm, this.vm);\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  popTarget();\n  this.cleanupDeps();\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          /* istanbul ignore else */\n          if (config.errorHandler) {\n            config.errorHandler.call(null, e, this.vm);\n          } else {\n            process.env.NODE_ENV !== 'production' && warn(\n              (\"Error in watcher \\\"\" + (this.expression) + \"\\\"\"),\n              this.vm\n            );\n            throw e\n          }\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove$1(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse (val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch) { initWatch(vm, opts.watch); }\n}\n\nvar isReservedProp = { key: 1, ref: 1, slot: 1 };\n\nfunction initProps (vm, props) {\n  var propsData = vm.$options.propsData || {};\n  var keys = vm.$options._propKeys = Object.keys(props);\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( i ) {\n    var key = keys[i];\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      if (isReservedProp[key]) {\n        warn(\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(vm, key, validateProp(key, props, propsData, vm), function () {\n        if (vm.$parent && !observerState.isSettingProps) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(vm, key, validateProp(key, props, propsData, vm));\n    }\n  };\n\n  for (var i = 0; i < keys.length; i++) loop( i );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? data.call(vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var i = keys.length;\n  while (i--) {\n    if (props && hasOwn(props, keys[i])) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + (keys[i]) + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else {\n      proxy(vm, keys[i]);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nvar computedSharedDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction initComputed (vm, computed) {\n  for (var key in computed) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && key in vm) {\n      warn(\n        \"existing instance property \\\"\" + key + \"\\\" will be \" +\n        \"overwritten by a computed property with the same name.\",\n        vm\n      );\n    }\n    var userDef = computed[key];\n    if (typeof userDef === 'function') {\n      computedSharedDefinition.get = makeComputedGetter(userDef, vm);\n      computedSharedDefinition.set = noop;\n    } else {\n      computedSharedDefinition.get = userDef.get\n        ? userDef.cache !== false\n          ? makeComputedGetter(userDef.get, vm)\n          : bind$1(userDef.get, vm)\n        : noop;\n      computedSharedDefinition.set = userDef.set\n        ? bind$1(userDef.set, vm)\n        : noop;\n    }\n    Object.defineProperty(vm, key, computedSharedDefinition);\n  }\n}\n\nfunction makeComputedGetter (getter, owner) {\n  var watcher = new Watcher(owner, getter, noop, {\n    lazy: true\n  });\n  return function computedGetter () {\n    if (watcher.dirty) {\n      watcher.evaluate();\n    }\n    if (Dep.target) {\n      watcher.depend();\n    }\n    return watcher.value\n  }\n}\n\nfunction initMethods (vm, methods) {\n  for (var key in methods) {\n    vm[key] = methods[key] == null ? noop : bind$1(methods[key], vm);\n    if (process.env.NODE_ENV !== 'production' && methods[key] == null) {\n      warn(\n        \"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n        \"Did you reference the function correctly?\",\n        vm\n      );\n    }\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (vm, key, handler) {\n  var options;\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  vm.$watch(key, handler, options);\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () {\n    return this._data\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n\n  Vue.prototype.$set = set$1;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\nfunction proxy (vm, key) {\n  if (!isReserved(key)) {\n    Object.defineProperty(vm, key, {\n      configurable: true,\n      enumerable: true,\n      get: function proxyGetter () {\n        return vm._data[key]\n      },\n      set: function proxySetter (val) {\n        vm._data[key] = val;\n      }\n    });\n  }\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.child = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n};\n\nvar createEmptyVNode = function () {\n  var node = new VNode();\n  node.text = '';\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isCloned = true;\n  return cloned\n}\n\nfunction cloneVNodes (vnodes) {\n  var res = new Array(vnodes.length);\n  for (var i = 0; i < vnodes.length; i++) {\n    res[i] = cloneVNode(vnodes[i]);\n  }\n  return res\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook, key) {\n  key = key + hookKey;\n  var injectedHash = def.__injected || (def.__injected = {});\n  if (!injectedHash[key]) {\n    injectedHash[key] = true;\n    var oldHook = def[hookKey];\n    if (oldHook) {\n      def[hookKey] = function () {\n        oldHook.apply(this, arguments);\n        hook.apply(this, arguments);\n      };\n    } else {\n      def[hookKey] = hook;\n    }\n  }\n}\n\n/*  */\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, cur, old, fn, event, capture, once;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    if (!cur) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + name + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (!old) {\n      once = name.charAt(0) === '~'; // Prefixed last, checked first\n      event = once ? name.slice(1) : name;\n      capture = event.charAt(0) === '!';\n      event = capture ? event.slice(1) : event;\n      if (Array.isArray(cur)) {\n        add(event, (cur.invoker = arrInvoker(cur)), once, capture);\n      } else {\n        if (!cur.invoker) {\n          fn = cur;\n          cur = on[name] = {};\n          cur.fn = fn;\n          cur.invoker = fnInvoker(cur);\n        }\n        add(event, cur.invoker, once, capture);\n      }\n    } else if (cur !== old) {\n      if (Array.isArray(old)) {\n        old.length = cur.length;\n        for (var i = 0; i < old.length; i++) { old[i] = cur[i]; }\n        on[name] = old;\n      } else {\n        old.fn = cur;\n        on[name] = old;\n      }\n    }\n  }\n  for (name in oldOn) {\n    if (!on[name]) {\n      once = name.charAt(0) === '~'; // Prefixed last, checked first\n      event = once ? name.slice(1) : name;\n      capture = event.charAt(0) === '!';\n      event = capture ? event.slice(1) : event;\n      remove$$1(event, oldOn[name].invoker, capture);\n    }\n  }\n}\n\nfunction arrInvoker (arr) {\n  return function (ev) {\n    var arguments$1 = arguments;\n\n    var single = arguments.length === 1;\n    for (var i = 0; i < arr.length; i++) {\n      single ? arr[i](ev) : arr[i].apply(null, arguments$1);\n    }\n  }\n}\n\nfunction fnInvoker (o) {\n  return function (ev) {\n    var single = arguments.length === 1;\n    single ? o.fn(ev) : o.fn.apply(null, arguments);\n  }\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// nomralization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constrcuts that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (c == null || typeof c === 'boolean') { continue }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\n    } else if (isPrimitive(c)) {\n      if (last && last.text) {\n        last.text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (c.text && last && last.text) {\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (c.tag && c.key == null && nestedIndex != null) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  return children && children.filter(function (c) { return c && c.componentOptions; })[0]\n}\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add$1 (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$2 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add$1, remove$2, vm);\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;(vm._events[event] || (vm._events[event] = [])).push(fn);\n    // optimize hook:event cost by using a boolean flag marked at registration\n    // instead of a hash lookup\n    if (hookRE.test(event)) {\n      vm._hasHookEvent = true;\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        cbs[i].apply(vm, args);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._mount = function (\n    el,\n    hydrating\n  ) {\n    var vm = this;\n    vm.$el = el;\n    if (!vm.$options.render) {\n      vm.$options.render = createEmptyVNode;\n      if (process.env.NODE_ENV !== 'production') {\n        /* istanbul ignore if */\n        if (vm.$options.template && vm.$options.template.charAt(0) !== '#') {\n          warn(\n            'You are using the runtime-only build of Vue where the template ' +\n            'option is not available. Either pre-compile the templates into ' +\n            'render functions, or use the compiler-included build.',\n            vm\n          );\n        } else {\n          warn(\n            'Failed to mount component: template or render function not defined.',\n            vm\n          );\n        }\n      }\n    }\n    callHook(vm, 'beforeMount');\n    vm._watcher = new Watcher(vm, function () {\n      vm._update(vm._render(), hydrating);\n    }, noop);\n    hydrating = false;\n    // manually mounted instance, call mounted on self\n    // mounted is called for render-created child components in its inserted hook\n    if (vm.$vnode == null) {\n      vm._isMounted = true;\n      callHook(vm, 'mounted');\n    }\n    return vm\n  };\n\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    if (vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  };\n\n  Vue.prototype._updateFromParent = function (\n    propsData,\n    listeners,\n    parentVnode,\n    renderChildren\n  ) {\n    var vm = this;\n    var hasChildren = !!(vm.$options._renderChildren || renderChildren);\n    vm.$options._parentVnode = parentVnode;\n    vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n    if (vm._vnode) { // update child tree's parent\n      vm._vnode.parent = parentVnode;\n    }\n    vm.$options._renderChildren = renderChildren;\n    // update props\n    if (propsData && vm.$options.props) {\n      observerState.shouldConvert = false;\n      if (process.env.NODE_ENV !== 'production') {\n        observerState.isSettingProps = true;\n      }\n      var propKeys = vm.$options._propKeys || [];\n      for (var i = 0; i < propKeys.length; i++) {\n        var key = propKeys[i];\n        vm[key] = validateProp(key, vm.$options.props, propsData, vm);\n      }\n      observerState.shouldConvert = true;\n      if (process.env.NODE_ENV !== 'production') {\n        observerState.isSettingProps = false;\n      }\n      vm.$options.propsData = propsData;\n    }\n    // update listeners\n    if (listeners) {\n      var oldListeners = vm.$options._parentListeners;\n      vm.$options._parentListeners = listeners;\n      updateComponentListeners(vm, listeners, oldListeners);\n    }\n    // resolve slots + force update if has children\n    if (hasChildren) {\n      vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n      vm.$forceUpdate();\n    }\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove$1(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n  };\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      handlers[i].call(vm);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\nvar hooks = { init: init, prepatch: prepatch, insert: insert, destroy: destroy$1 };\nvar hooksToMerge = Object.keys(hooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (!Ctor) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  if (!Ctor.cid) {\n    if (Ctor.resolved) {\n      Ctor = Ctor.resolved;\n    } else {\n      Ctor = resolveAsyncComponent(Ctor, baseCtor, function () {\n        // it's ok to queue this on every render because\n        // $forceUpdate is buffered by the scheduler.\n        context.$forceUpdate();\n      });\n      if (!Ctor) {\n        // return nothing if this is indeed an async component\n        // wait for the callback to trigger parent update.\n        return\n      }\n    }\n  }\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  data = data || {};\n\n  // extract props\n  var propsData = extractProps(data, Ctor);\n\n  // functional component\n  if (Ctor.options.functional) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  data.on = data.nativeOn;\n\n  if (Ctor.options.abstract) {\n    // abstract components do not keep anything\n    // other than props & listeners\n    data = {};\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }\n  );\n  return vnode\n}\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  context,\n  children\n) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (propOptions) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData);\n    }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\n  var vnode = Ctor.options.render.call(null, h, {\n    props: props,\n    data: data,\n    parent: context,\n    children: children,\n    slots: function () { return resolveSlots(children, context); }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (inlineTemplate) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options)\n}\n\nfunction init (\n  vnode,\n  hydrating,\n  parentElm,\n  refElm\n) {\n  if (!vnode.child || vnode.child._isDestroyed) {\n    var child = vnode.child = createComponentInstanceForVnode(\n      vnode,\n      activeInstance,\n      parentElm,\n      refElm\n    );\n    child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n  } else if (vnode.data.keepAlive) {\n    // kept-alive components, treat as a patch\n    var mountedNode = vnode; // work around flow\n    prepatch(mountedNode, mountedNode);\n  }\n}\n\nfunction prepatch (\n  oldVnode,\n  vnode\n) {\n  var options = vnode.componentOptions;\n  var child = vnode.child = oldVnode.child;\n  child._updateFromParent(\n    options.propsData, // updated props\n    options.listeners, // updated listeners\n    vnode, // new parent vnode\n    options.children // new children\n  );\n}\n\nfunction insert (vnode) {\n  if (!vnode.child._isMounted) {\n    vnode.child._isMounted = true;\n    callHook(vnode.child, 'mounted');\n  }\n  if (vnode.data.keepAlive) {\n    vnode.child._inactive = false;\n    callHook(vnode.child, 'activated');\n  }\n}\n\nfunction destroy$1 (vnode) {\n  if (!vnode.child._isDestroyed) {\n    if (!vnode.data.keepAlive) {\n      vnode.child.$destroy();\n    } else {\n      vnode.child._inactive = true;\n      callHook(vnode.child, 'deactivated');\n    }\n  }\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  cb\n) {\n  if (factory.requested) {\n    // pool callbacks\n    factory.pendingCallbacks.push(cb);\n  } else {\n    factory.requested = true;\n    var cbs = factory.pendingCallbacks = [cb];\n    var sync = true;\n\n    var resolve = function (res) {\n      if (isObject(res)) {\n        res = baseCtor.extend(res);\n      }\n      // cache resolved\n      factory.resolved = res;\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        for (var i = 0, l = cbs.length; i < l; i++) {\n          cbs[i](res);\n        }\n      }\n    };\n\n    var reject = function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n    };\n\n    var res = factory(resolve, reject);\n\n    // handle promise\n    if (res && typeof res.then === 'function' && !factory.resolved) {\n      res.then(resolve, reject);\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.resolved\n  }\n}\n\nfunction extractProps (data, Ctor) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (!propOptions) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  var domProps = data.domProps;\n  if (attrs || props || domProps) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey) ||\n      checkProp(res, domProps, key, altKey);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (hash) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = hooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (alwaysNormalize) { normalizationType = ALWAYS_NORMALIZE; }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (data && data.__ob__) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n      typeof children[0] === 'function') {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (vnode) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return\n  }\n  if (vnode.children) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (child.tag && !child.ns) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm.$vnode = null; // the placeholder node in parent tree\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$options._parentVnode;\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = {};\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n  if (vm.$options.el) {\n    vm.$mount(vm.$options.el);\n  }\n}\n\nfunction renderMixin (Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // clone slot nodes on re-renders\n      for (var key in vm.$slots) {\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\n      }\n    }\n\n    if (_parentVnode && _parentVnode.data.scopedSlots) {\n      vm.$scopedSlots = _parentVnode.data.scopedSlots;\n    }\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      /* istanbul ignore else */\n      if (config.errorHandler) {\n        config.errorHandler.call(null, e, vm);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn((\"Error when rendering \" + (formatComponentName(vm)) + \":\"));\n        }\n        throw e\n      }\n      // return previous vnode to prevent render error causing blank component\n      vnode = vm._vnode;\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n\n  // toString for mustaches\n  Vue.prototype._s = _toString;\n  // convert text to vnode\n  Vue.prototype._v = createTextVNode;\n  // number conversion\n  Vue.prototype._n = toNumber;\n  // empty vnode\n  Vue.prototype._e = createEmptyVNode;\n  // loose equal\n  Vue.prototype._q = looseEqual;\n  // loose indexOf\n  Vue.prototype._i = looseIndexOf;\n\n  // render static tree by index\n  Vue.prototype._m = function renderStatic (\n    index,\n    isInFor\n  ) {\n    var tree = this._staticTrees[index];\n    // if has already-rendered static tree and not inside v-for,\n    // we can reuse the same tree by doing a shallow clone.\n    if (tree && !isInFor) {\n      return Array.isArray(tree)\n        ? cloneVNodes(tree)\n        : cloneVNode(tree)\n    }\n    // otherwise, render a fresh tree.\n    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy);\n    markStatic(tree, (\"__static__\" + index), false);\n    return tree\n  };\n\n  // mark node as static (v-once)\n  Vue.prototype._o = function markOnce (\n    tree,\n    index,\n    key\n  ) {\n    markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n    return tree\n  };\n\n  function markStatic (tree, key, isOnce) {\n    if (Array.isArray(tree)) {\n      for (var i = 0; i < tree.length; i++) {\n        if (tree[i] && typeof tree[i] !== 'string') {\n          markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n        }\n      }\n    } else {\n      markStaticNode(tree, key, isOnce);\n    }\n  }\n\n  function markStaticNode (node, key, isOnce) {\n    node.isStatic = true;\n    node.key = key;\n    node.isOnce = isOnce;\n  }\n\n  // filter resolution helper\n  Vue.prototype._f = function resolveFilter (id) {\n    return resolveAsset(this.$options, 'filters', id, true) || identity\n  };\n\n  // render v-for\n  Vue.prototype._l = function renderList (\n    val,\n    render\n  ) {\n    var ret, i, l, keys, key;\n    if (Array.isArray(val) || typeof val === 'string') {\n      ret = new Array(val.length);\n      for (i = 0, l = val.length; i < l; i++) {\n        ret[i] = render(val[i], i);\n      }\n    } else if (typeof val === 'number') {\n      ret = new Array(val);\n      for (i = 0; i < val; i++) {\n        ret[i] = render(i + 1, i);\n      }\n    } else if (isObject(val)) {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n    return ret\n  };\n\n  // renderSlot\n  Vue.prototype._t = function (\n    name,\n    fallback,\n    props,\n    bindObject\n  ) {\n    var scopedSlotFn = this.$scopedSlots[name];\n    if (scopedSlotFn) { // scoped slot\n      props = props || {};\n      if (bindObject) {\n        extend(props, bindObject);\n      }\n      return scopedSlotFn(props) || fallback\n    } else {\n      var slotNodes = this.$slots[name];\n      // warn duplicate slot usage\n      if (slotNodes && process.env.NODE_ENV !== 'production') {\n        slotNodes._rendered && warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n        slotNodes._rendered = true;\n      }\n      return slotNodes || fallback\n    }\n  };\n\n  // apply v-bind object\n  Vue.prototype._b = function bindProps (\n    data,\n    tag,\n    value,\n    asProp\n  ) {\n    if (value) {\n      if (!isObject(value)) {\n        process.env.NODE_ENV !== 'production' && warn(\n          'v-bind without argument expects an Object or Array value',\n          this\n        );\n      } else {\n        if (Array.isArray(value)) {\n          value = toObject(value);\n        }\n        for (var key in value) {\n          if (key === 'class' || key === 'style') {\n            data[key] = value[key];\n          } else {\n            var hash = asProp || config.mustUseProp(tag, key)\n              ? data.domProps || (data.domProps = {})\n              : data.attrs || (data.attrs = {});\n            hash[key] = value[key];\n          }\n        }\n      }\n    }\n    return data\n  };\n\n  // check v-on keyCodes\n  Vue.prototype._k = function checkKeyCodes (\n    eventKeyCode,\n    key,\n    builtInAlias\n  ) {\n    var keyCodes = config.keyCodes[key] || builtInAlias;\n    if (Array.isArray(keyCodes)) {\n      return keyCodes.indexOf(eventKeyCode) === -1\n    } else {\n      return keyCodes !== eventKeyCode\n    }\n  };\n}\n\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  var defaultSlot = [];\n  var name, child;\n  for (var i = 0, l = children.length; i < l; i++) {\n    child = children[i];\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) &&\n        child.data && (name = child.data.slot)) {\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore single whitespace\n  if (defaultSlot.length && !(\n    defaultSlot.length === 1 &&\n    (defaultSlot[0].text === ' ' || defaultSlot[0].isComment)\n  )) {\n    slots.default = defaultSlot;\n  }\n  return slots\n}\n\n/*  */\n\nvar uid = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid++;\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    callHook(vm, 'beforeCreate');\n    initState(vm);\n    callHook(vm, 'created');\n    initRender(vm);\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = Ctor.super.options;\n    var cachedSuperOptions = Ctor.superOptions;\n    var extendOptions = Ctor.extendOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed\n      Ctor.superOptions = superOptions;\n      extendOptions.render = options.render;\n      extendOptions.staticRenderFns = options.staticRenderFns;\n      extendOptions._scopeId = options._scopeId;\n      options = Ctor.options = mergeOptions(superOptions, extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction Vue$3 (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue$3)) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn(\n          'Invalid component name: \"' + name + '\". Component names ' +\n          'can only contain alphanumeric characters and the hyphen, ' +\n          'and must start with a letter.'\n        );\n      }\n    }\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    config._assetTypes.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  config._assetTypes.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn(\n              'Do not use built-in or reserved HTML elements as component ' +\n              'id: ' + id\n            );\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp];\n\nfunction matches (pattern, name) {\n  if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else {\n    return pattern.test(name)\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n  created: function created () {\n    this.cache = Object.create(null);\n  },\n  render: function render () {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    if (vnode && vnode.componentOptions) {\n      var opts = vnode.componentOptions;\n      // check pattern\n      var name = opts.Ctor.options.name || opts.tag;\n      if (name && (\n        (this.include && !matches(this.include, name)) ||\n        (this.exclude && matches(this.exclude, name))\n      )) {\n        return vnode\n      }\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? opts.Ctor.cid + (opts.tag ? (\"::\" + (opts.tag)) : '')\n        : vnode.key;\n      if (this.cache[key]) {\n        vnode.child = this.cache[key].child;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode\n  },\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this.cache) {\n      var vnode = this$1.cache[key];\n      callHook(vnode.child, 'deactivated');\n      vnode.child.$destroy();\n    }\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n  Vue.util = util;\n  Vue.set = set$1;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  config._assetTypes.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nVue$3.version = '2.1.8';\n\n/*  */\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select');\nvar mustUseProp = function (tag, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (childNode.child) {\n    childNode = childNode.child._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return genClassFromData(data)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: child.class\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction genClassFromData (data) {\n  var dynamicClass = data.class;\n  var staticClass = data.staticClass;\n  if (staticClass || dynamicClass) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  var res = '';\n  if (!value) {\n    return res\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  if (Array.isArray(value)) {\n    var stringified;\n    for (var i = 0, l = value.length; i < l; i++) {\n      if (value[i]) {\n        if ((stringified = stringifyClass(value[i]))) {\n          res += stringified + ' ';\n        }\n      }\n    }\n    return res.slice(0, -1)\n  }\n  if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) { res += key + ' '; }\n    }\n    return res.slice(0, -1)\n  }\n  /* istanbul ignore next */\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,' +\n  'font-face,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selector = el;\n    el = document.querySelector(el);\n    if (!el) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + selector\n      );\n      return document.createElement('div')\n    }\n  }\n  return el\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  if (vnode.data && vnode.data.attrs && 'multiple' in vnode.data.attrs) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.child || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove$1(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\n        refs[key].push(ref);\n      } else {\n        refs[key] = [ref];\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n\n/*\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks$1 = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction isUndef (s) {\n  return s == null\n}\n\nfunction isDef (s) {\n  return s != null\n}\n\nfunction sameVnode (vnode1, vnode2) {\n  return (\n    vnode1.key === vnode2.key &&\n    vnode1.tag === vnode2.tag &&\n    vnode1.isComment === vnode2.isComment &&\n    !vnode1.data === !vnode2.data\n  )\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks$1.length; ++i) {\n    cbs[hooks$1[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (modules[j][hooks$1[i]] !== undefined) { cbs[hooks$1[i]].push(modules[j][hooks$1[i]]); }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (parent) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (\n          !inPre &&\n          !vnode.ns &&\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\n          config.isUnknownElement(tag)\n        ) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        inPre--;\n      }\n    } else if (vnode.isComment) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.child) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.child)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isReactivated) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.child) {\n      innerNode = innerNode.child._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref) {\n    if (parent) {\n      if (ref) {\n        nodeOps.insertBefore(parent, elm, ref);\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.child) {\n      vnode = vnode.child._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (i.create) { i.create(emptyNode, vnode); }\n      if (i.insert) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (vnode.data.pendingInsert) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n    }\n    vnode.elm = vnode.child.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.context) && isDef(i = i.$options._scopeId)) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n    if (isDef(i = activeInstance) &&\n        i !== vnode.context &&\n        isDef(i = i.$options._scopeId)) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (rm || isDef(vnode.data)) {\n      var listeners = cbs.remove.length + 1;\n      if (!rm) {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      } else {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.child) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          newStartVnode = newCh[++newStartIdx];\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !elmToMove) {\n            warn(\n              'It seems there are duplicate keys that is causing an update error. ' +\n              'Make sure each v-for item has a unique key.'\n            );\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n            newStartVnode = newCh[++newStartIdx];\n          }\n        }\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (vnode.isStatic &&\n        oldVnode.isStatic &&\n        vnode.key === oldVnode.key &&\n        (vnode.isCloned || vnode.isOnce)) {\n      vnode.elm = oldVnode.elm;\n      vnode.child = oldVnode.child;\n      return\n    }\n    var i;\n    var data = vnode.data;\n    var hasData = isDef(data);\n    if (hasData && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n    var elm = vnode.elm = oldVnode.elm;\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (hasData && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (hasData) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (initial && vnode.parent) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.child)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          var childrenMatch = true;\n          var childNode = elm.firstChild;\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n              childrenMatch = false;\n              break\n            }\n            childNode = childNode.nextSibling;\n          }\n          // if childNode is not null, it means the actual childNodes list is\n          // longer than the virtual children list.\n          if (!childrenMatch || childNode) {\n            if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !bailed) {\n              bailed = true;\n              console.warn('Parent: ', elm);\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n            }\n            return false\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode) {\n    if (vnode.tag) {\n      return (\n        vnode.tag.indexOf('vue-component') === 0 ||\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (!vnode) {\n      if (oldVnode) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var elm, parent;\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (!oldVnode) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute('server-rendered')) {\n            oldVnode.removeAttribute('server-rendered');\n            hydrating = true;\n          }\n          if (hydrating) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        elm = oldVnode.elm;\n        parent = nodeOps.parentNode(elm);\n        createElm(vnode, insertedVnodeQueue, parent, nodeOps.nextSibling(elm));\n\n        if (vnode.parent) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          while (ancestor) {\n            ancestor.elm = vnode.elm;\n            ancestor = ancestor.parent;\n          }\n          if (isPatchable(vnode)) {\n            for (var i = 0; i < cbs.create.length; ++i) {\n              cbs.create[i](emptyNode, vnode.parent);\n            }\n          }\n        }\n\n        if (parent !== null) {\n          removeVnodes(parent, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert, 'dir-insert');\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    }, 'dir-postpatch');\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  if (!oldVnode.data.attrs && !vnode.data.attrs) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (attrs.__ob__) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (attrs[key] == null) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, key);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (!data.staticClass && !data.class &&\n      (!oldData || (!oldData.staticClass && !oldData.class))) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (transitionClass) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar target$1;\n\nfunction add$2 (event, handler, once, capture) {\n  if (once) {\n    var oldHandler = handler;\n    handler = function (ev) {\n      remove$3(event, handler, capture);\n      arguments.length === 1\n        ? oldHandler(ev)\n        : oldHandler.apply(null, arguments);\n    };\n  }\n  target$1.addEventListener(event, handler, capture);\n}\n\nfunction remove$3 (event, handler, capture) {\n  target$1.removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (!oldVnode.data.on && !vnode.data.on) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  updateListeners(on, oldOn, add$2, remove$3, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (!oldVnode.data.domProps && !vnode.data.domProps) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (props.__ob__) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (props[key] == null) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n    }\n    // #4521: if a click event triggers update before the change event is\n    // dispatched on a checkbox/radio input, the input's checked state will\n    // be reset and fail to trigger another update.\n    /* istanbul ignore next */\n    if (key === 'checked' && !isDirty(elm, cur)) {\n      continue\n    }\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = cur == null ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (\n  elm,\n  vnode,\n  checkVal\n) {\n  if (!elm.composing && (\n    vnode.tag === 'option' ||\n    isDirty(elm, checkVal) ||\n    isInputChanged(vnode, checkVal)\n  )) {\n    return true\n  }\n  return false\n}\n\nfunction isDirty (elm, checkVal) {\n  return document.activeElement !== elm && elm.value !== checkVal\n}\n\nfunction isInputChanged (vnode, newVal) {\n  var value = vnode.elm.value;\n  var modifiers = vnode.elm._vModifiers; // injected by v-model runtime\n  if ((modifiers && modifiers.number) || vnode.elm.type === 'number') {\n    return toNumber(value) !== toNumber(newVal)\n  }\n  if (modifiers && modifiers.trim) {\n    return value.trim() !== newVal.trim()\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.child) {\n      childNode = childNode.child._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    el.style[normalize(name)] = val;\n  }\n};\n\nvar prefixes = ['Webkit', 'Moz', 'ms'];\n\nvar testEl;\nvar normalize = cached(function (prop) {\n  testEl = testEl || document.createElement('div');\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in testEl.style)) {\n    return prop\n  }\n  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefixed = prefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return prefixed\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (!data.staticStyle && !data.style &&\n      !oldData.staticStyle && !oldData.style) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldVnode.data.staticStyle;\n  var oldStyleBinding = oldVnode.data.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  vnode.data.style = style.__ob__ ? extend({}, style) : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (newStyle[name] == null) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !cls.trim()) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = ' ' + el.getAttribute('class') + ' ';\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !cls.trim()) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n  } else {\n    var cur = ' ' + el.getAttribute('class') + ' ';\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    el.setAttribute('class', cur.trim());\n  }\n}\n\n/*  */\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\nvar raf = (inBrowser && window.requestAnimationFrame) || setTimeout;\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  (el._transitionClasses || (el._transitionClasses = [])).push(cls);\n  addClass(el, cls);\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove$1(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitioneDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitioneDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (el._leaveCb) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (!data) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (el._enterCb || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear ? appearClass : enterClass;\n  var activeClass = isAppear ? appearActiveClass : enterActiveClass;\n  var toClass = isAppear ? appearToClass : enterToClass;\n  var beforeEnterHook = isAppear ? (beforeAppear || beforeEnter) : beforeEnter;\n  var enterHook = isAppear ? (typeof appear === 'function' ? appear : enter) : enter;\n  var afterEnterHook = isAppear ? (afterAppear || afterEnter) : afterEnter;\n  var enterCancelledHook = isAppear ? (appearCancelled || enterCancelled) : enterCancelled;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl =\n    enterHook &&\n    // enterHook may be a bound method which exposes\n    // the length of original fn as _length\n    (enterHook._length || enterHook.length) > 1;\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n          pendingNode.context === vnode.context &&\n          pendingNode.tag === vnode.tag &&\n          pendingNode.elm._leaveCb) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    }, 'transition-insert');\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        whenTransitionEnds(el, type, cb);\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (el._enterCb) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (!data) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (el._leaveCb || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl =\n    leave &&\n    // leave hook may be a bound method which exposes\n    // the length of original fn as _length\n    (leave._length || leave.length) > 1;\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          whenTransitionEnds(el, type, cb);\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    leaveClass: (name + \"-leave\"),\n    appearClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    leaveToClass: (name + \"-leave-to\"),\n    appearToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveActiveClass: (name + \"-leave-active\"),\n    appearActiveClass: (name + \"-enter-active\")\n  }\n});\n\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn();\n    }\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (!vnode.data.show) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove (vnode, rm) {\n    /* istanbul ignore else */\n    if (!vnode.data.show) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch$1 = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\nvar modelableTagRE = /^input|select|textarea|vue-component-[0-9]+(-[0-9a-zA-Z_-]*)?$/;\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model = {\n  inserted: function inserted (el, binding, vnode) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!modelableTagRE.test(vnode.tag)) {\n        warn(\n          \"v-model is not supported on element type: <\" + (vnode.tag) + \">. \" +\n          'If you are working with contenteditable, it\\'s recommended to ' +\n          'wrap a library dedicated for that purpose inside a custom component.',\n          vnode.context\n        );\n      }\n    }\n    if (vnode.tag === 'select') {\n      var cb = function () {\n        setSelected(el, binding, vnode.context);\n      };\n      cb();\n      /* istanbul ignore if */\n      if (isIE || isEdge) {\n        setTimeout(cb, 0);\n      }\n    } else if (vnode.tag === 'textarea' || el.type === 'text') {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var needReset = el.multiple\n        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })\n        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\n      if (needReset) {\n        trigger(el, 'change');\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  for (var i = 0, l = options.length; i < l; i++) {\n    if (looseEqual(getValue(options[i]), value)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.child && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.child._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition && !isIE9) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition = vnode.data && vnode.data.transition;\n    if (transition && !isIE9) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1].fn;\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  return /\\d-keep-alive$/.test(rawChild.tag)\n    ? h('keep-alive')\n    : null\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag; });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n        mode && mode !== 'in-out' && mode !== 'out-in') {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    var key = child.key = child.key == null || child.isStatic\n      ? (\"__v\" + (child.tag + this._uid) + \"__\")\n      : child.key;\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        }, key);\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave, key);\n        mergeVNodeHook(data, 'enterCancelled', performLeave, key);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) {\n          delayedLeave = leave;\n        }, key);\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final disired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts\n            ? (opts.Ctor.options.name || opts.tag)\n            : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var f = document.body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      if (this._hasMove != null) {\n        return this._hasMove\n      }\n      addTransitionClass(el, moveClass);\n      var info = getTransitionInfo(el);\n      removeTransitionClass(el, moveClass);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.isUnknownElement = isUnknownElement;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.mustUseProp = mustUseProp;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch$1 : noop;\n\n// wrap mount\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return this._mount(el, hydrating)\n};\n\nif (process.env.NODE_ENV !== 'production' &&\n    inBrowser && typeof console !== 'undefined') {\n  console[console.info ? 'info' : 'log'](\n    \"You are running Vue in development mode.\\n\" +\n    \"Make sure to turn on production mode when deploying for production.\\n\" +\n    \"See more tips at https://vuejs.org/guide/deployment.html\"\n  );\n}\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (\n      process.env.NODE_ENV !== 'production' &&\n      inBrowser && !isEdge && /Chrome\\/\\d+/.test(window.navigator.userAgent)\n    ) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n}, 0);\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nfunction shouldDecode (content, encoded) {\n  var div = document.createElement('div');\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\">\";\n  return div.innerHTML.indexOf(encoded) > 0\n}\n\n// #3663\n// IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\n\n/*  */\n\nvar decoder;\n\nfunction decode (html) {\n  decoder = decoder || document.createElement('div');\n  decoder.innerHTML = html;\n  return decoder.textContent\n}\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr',\n  true\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source',\n  true\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track',\n  true\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar singleAttrIdentifier = /([^\\s\"'<>/=]+)/;\nvar singleAttrAssign = /(?:=)/;\nvar singleAttrValues = [\n  // attr value double quotes\n  /\"([^\"]*)\"+/.source,\n  // attr value, single quotes\n  /'([^']*)'+/.source,\n  // attr value, no quotes\n  /([^\\s\"'=<>`]+)/.source\n];\nvar attribute = new RegExp(\n  '^\\\\s*' + singleAttrIdentifier.source +\n  '(?:\\\\s*(' + singleAttrAssign.source + ')' +\n  '\\\\s*(?:' + singleAttrValues.join('|') + '))?'\n);\n\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')';\nvar startTagOpen = new RegExp('^<' + qnameCapture);\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>');\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isScriptOrStyle = makeMap('script,style', true);\nvar hasLang = function (attr) { return attr.name === 'lang' && attr.value !== 'html'; };\nvar isSpecialTag = function (tag, isSFC, stack) {\n  if (isScriptOrStyle(tag)) {\n    return true\n  }\n  if (isSFC && stack.length === 1) {\n    // top-level template that has no pre-processor\n    if (tag === 'template' && !stack[0].attrs.some(hasLang)) {\n      return false\n    } else {\n      return true\n    }\n  }\n  return false\n};\n\nvar reCache = {};\n\nvar ltRE = /&lt;/g;\nvar gtRE = /&gt;/g;\nvar nlRE = /&#10;/g;\nvar ampRE = /&amp;/g;\nvar quoteRE = /&quot;/g;\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  if (shouldDecodeNewlines) {\n    value = value.replace(nlRE, '\\n');\n  }\n  return value\n    .replace(ltRE, '<')\n    .replace(gtRE, '>')\n    .replace(ampRE, '&')\n    .replace(quoteRE, '\"')\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a script or style element\n    if (!lastTag || !isSpecialTag(lastTag, options.sfc, stack)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[0], endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          continue\n        }\n      }\n\n      var text = (void 0), rest$1 = (void 0), next = (void 0);\n      if (textEnd > 0) {\n        rest$1 = html.slice(textEnd);\n        while (\n          !endTag.test(rest$1) &&\n          !startTagOpen.test(rest$1) &&\n          !comment.test(rest$1) &&\n          !conditionalComment.test(rest$1)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest$1.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest$1 = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var endTagLength = 0;\n      var rest = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (stackedTag !== 'script' && stackedTag !== 'style' && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest.length;\n      html = rest;\n      parseEndTag('</' + stackedTag + '>', stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last && options.chars) {\n      options.chars(html);\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag('', lastTag);\n      }\n      if (canBeLeftOpenTag(tagName) && lastTag === tagName) {\n        parseEndTag('', tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(\n          value,\n          options.shouldDecodeNewlines\n        )\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, attrs: attrs });\n      lastTag = tagName;\n      unarySlash = '';\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tag, tagName, start, end) {\n    var pos;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      var needle = tagName.toLowerCase();\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].tag.toLowerCase() === needle) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (tagName.toLowerCase() === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (tagName.toLowerCase() === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !/[\\w$]/.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\n  }\n  return tokens.join('+')\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue parser]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important\n) {\n  // check capture modifier\n  if (modifiers && modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers && modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  var events;\n  if (modifiers && modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n  var newHandler = { value: value, modifiers: modifiers };\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\nfunction getAndRemoveAttr (el, name) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  return val\n}\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nfunction parseModel (val) {\n  str = val;\n  len = str.length;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    return {\n      exp: val,\n      idx: null\n    }\n  }\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.substring(0, expressionPos),\n    idx: val.substring(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\nvar bindRE = /^:|^v-bind:/;\nvar onRE = /^@|^v-on:/;\nvar argRE = /:(.*)$/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(decode);\n\n// configurable state\nvar warn$1;\nvar platformGetTagNamespace;\nvar platformMustUseProp;\nvar platformIsPreTag;\nvar preTransforms;\nvar transforms;\nvar postTransforms;\nvar delimiters;\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$1 = options.warn || baseWarn;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformIsPreTag = options.isPreTag || no;\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n  delimiters = options.delimiters;\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n  parseHTML(template, {\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = {\n        type: 1,\n        tag: tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent: currentParent,\n        children: []\n      };\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        process.env.NODE_ENV !== 'production' && warn$1(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        preTransforms[i](element, options);\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else {\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        processKey(element);\n\n        // determine whether this is a plain element after\n        // removing structural attributes\n        element.plain = !element.key && !attrs.length;\n\n        processRef(element);\n        processSlot(element);\n        processComponent(element);\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\n          transforms[i$1](element, options);\n        }\n        processAttrs(element);\n      }\n\n      function checkRootConstraints (el) {\n        if (process.env.NODE_ENV !== 'production' && !warned) {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warned = true;\n            warn$1(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes:\\n' + template\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warned = true;\n            warn$1(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements:\\n' + template\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (process.env.NODE_ENV !== 'production' && !warned) {\n          warned = true;\n          warn$1(\n            \"Component template should contain exactly one root element:\" +\n            \"\\n\\n\" + template + \"\\n\\n\" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || 'default';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      }\n      // apply post-transforms\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\n        postTransforms[i$2](element, options);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ') {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      // check pre state\n      if (element.pre) {\n        inVPre = false;\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = false;\n      }\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (process.env.NODE_ENV !== 'production' && !warned && text === template) {\n          warned = true;\n          warn$1(\n            'Component template requires a root element, rather than just text:\\n\\n' + template\n          );\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n          currentParent.tag === 'textarea' &&\n          currentParent.attrsMap.placeholder === text) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var expression;\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: expression,\n            text: text\n          });\n        } else if (text !== ' ' || children[children.length - 1].text !== ' ') {\n          currentParent.children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\n      warn$1(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var inMatch = exp.match(forAliasRE);\n    if (!inMatch) {\n      process.env.NODE_ENV !== 'production' && warn$1(\n        (\"Invalid v-for expression: \" + exp)\n      );\n      return\n    }\n    el.for = inMatch[2].trim();\n    var alias = inMatch[1].trim();\n    var iteratorMatch = alias.match(forIteratorRE);\n    if (iteratorMatch) {\n      el.alias = iteratorMatch[1].trim();\n      el.iterator1 = iteratorMatch[2].trim();\n      if (iteratorMatch[3]) {\n        el.iterator2 = iteratorMatch[3].trim();\n      }\n    } else {\n      el.alias = alias;\n    }\n  }\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$1(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\n        warn$1(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once = getAndRemoveAttr(el, 'v-once');\n  if (once != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (process.env.NODE_ENV !== 'production' && el.key) {\n      warn$1(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    }\n    if (el.tag === 'template') {\n      el.slotScope = getAndRemoveAttr(el, 'scope');\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, arg, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n        }\n        if (isProp || platformMustUseProp(el.tag, name)) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        if (argMatch && (arg = argMatch[1])) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (process.env.NODE_ENV !== 'production') {\n        var expression = parseText(value, delimiters);\n        if (expression) {\n          warn$1(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n      // #4530 also bind special attributes as props even if they are static\n      // so that patches between dynamic/static are consistent\n      if (platformMustUseProp(el.tag, name)) {\n        if (name === 'value') {\n          addProp(el, name, JSON.stringify(value));\n        } else {\n          addProp(el, name, 'true');\n        }\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (process.env.NODE_ENV !== 'production' && map[attrs[i].name] && !isIE) {\n      warn$1('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      walkThroughConditionsBlocks(node.ifConditions, isInFor);\n    }\n  }\n}\n\nfunction walkThroughConditionsBlocks (conditionBlocks, isInFor) {\n  for (var i = 1, len = conditionBlocks.length; i < len; i++) {\n    markStaticRoots(conditionBlocks[i].block, isInFor);\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: 'if($event.target !== $event.currentTarget)return;',\n  ctrl: 'if(!$event.ctrlKey)return;',\n  shift: 'if(!$event.shiftKey)return;',\n  alt: 'if(!$event.altKey)return;',\n  meta: 'if(!$event.metaKey)return;'\n};\n\nfunction genHandlers (events, native) {\n  var res = native ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, events[name])) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  } else if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  } else if (!handler.modifiers) {\n    return fnExpRE.test(handler.value) || simplePathRE.test(handler.value)\n      ? handler.value\n      : (\"function($event){\" + (handler.value) + \"}\")\n  } else {\n    var code = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        code += modifierCode[key];\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code = genKeyFilter(keys) + code;\n    }\n    var handlerCode = simplePathRE.test(handler.value)\n      ? handler.value + '($event)'\n      : handler.value;\n    return 'function($event){' + code + handlerCode + '}'\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(\" + (keys.map(genFilterCode).join('&&')) + \")return;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var alias = keyCodes[key];\n  return (\"_k($event.keyCode,\" + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + \")\")\n}\n\n/*  */\n\nfunction bind$2 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  bind: bind$2,\n  cloak: noop\n};\n\n/*  */\n\n// configurable state\nvar warn$2;\nvar transforms$1;\nvar dataGenFns;\nvar platformDirectives$1;\nvar isPlatformReservedTag$1;\nvar staticRenderFns;\nvar onceCount;\nvar currentOptions;\n\nfunction generate (\n  ast,\n  options\n) {\n  // save previous staticRenderFns so generate calls can be nested\n  var prevStaticRenderFns = staticRenderFns;\n  var currentStaticRenderFns = staticRenderFns = [];\n  var prevOnceCount = onceCount;\n  onceCount = 0;\n  currentOptions = options;\n  warn$2 = options.warn || baseWarn;\n  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');\n  dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  platformDirectives$1 = options.directives || {};\n  isPlatformReservedTag$1 = options.isReservedTag || no;\n  var code = ast ? genElement(ast) : '_c(\"div\")';\n  staticRenderFns = prevStaticRenderFns;\n  onceCount = prevOnceCount;\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: currentStaticRenderFns\n  }\n}\n\nfunction genElement (el) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el);\n    } else {\n      var data = el.plain ? undefined : genData(el);\n\n      var children = el.inlineTemplate ? null : genChildren(el, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < transforms$1.length; i++) {\n      code = transforms$1[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el) {\n  el.staticProcessed = true;\n  staticRenderFns.push((\"with(this){return \" + (genElement(el)) + \"}\"));\n  return (\"_m(\" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      process.env.NODE_ENV !== 'production' && warn$2(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el)\n    }\n    return (\"_o(\" + (genElement(el)) + \",\" + (onceCount++) + (key ? (\",\" + key) : \"\") + \")\")\n  } else {\n    return genStatic(el)\n  }\n}\n\nfunction genIf (el) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice())\n}\n\nfunction genIfConditions (conditions) {\n  if (!conditions.length) {\n    return '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return el.once ? genOnce(el) : genElement(el)\n  }\n}\n\nfunction genFor (el) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genElement(el)) +\n    '})'\n}\n\nfunction genData (el) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < dataGenFns.length; i++) {\n    data += dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true)) + \",\";\n  }\n  // slot target\n  if (el.slotTarget) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots)) + \",\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  return data\n}\n\nfunction genDirectives (el) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, warn$2);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el) {\n  var ast = el.children[0];\n  if (process.env.NODE_ENV !== 'production' && (\n    el.children.length > 1 || ast.type !== 1\n  )) {\n    warn$2('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, currentOptions);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (slots) {\n  return (\"scopedSlots:{\" + (Object.keys(slots).map(function (key) { return genScopedSlot(key, slots[key]); }).join(',')) + \"}\")\n}\n\nfunction genScopedSlot (key, el) {\n  return key + \":function(\" + (String(el.attrsMap.scope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? genChildren(el) || 'void 0'\n      : genElement(el)) + \"}\"\n}\n\nfunction genChildren (el, checkSkip) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n        el$1.for &&\n        el$1.tag !== 'template' &&\n        el$1.tag !== 'slot') {\n      return genElement(el$1)\n    }\n    var normalizationType = getNormalizationType(children);\n    return (\"[\" + (children.map(genNode).join(',')) + \"]\" + (checkSkip\n        ? normalizationType ? (\",\" + normalizationType) : ''\n        : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (children) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (needsNormalization(el) ||\n        (el.if && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.if && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction maybeComponent (el) {\n  return el.type === 1 && !isPlatformReservedTag$1(el.tag)\n}\n\nfunction genNode (node) {\n  if (node.type === 1) {\n    return genElement(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genSlot (el) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (componentName, el) {\n  var children = el.inlineTemplate ? null : genChildren(el, true);\n  return (\"_c(\" + componentName + \",\" + (genData(el)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n/**\n * Compile a template.\n */\nfunction compile$1 (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  optimize(ast, options);\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n}\n\n/*  */\n\n// operators like typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n// check valid identifier for v-for\nvar identRE = /[A-Za-z_$][\\w$]*/;\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (ident, type, text, errors) {\n  if (typeof ident === 'string' && !identRE.test(ident)) {\n    errors.push((\"- invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + text));\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"- avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + text\n      );\n    } else {\n      errors.push((\"- invalid expression: \" + text));\n    }\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\n    var expression = parseText(staticClass, options.delimiters);\n    if (expression) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData$1\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      var expression = parseText(staticStyle, options.delimiters);\n      if (expression) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$2 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$2\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1\n];\n\n/*  */\n\nvar warn$3;\n\nfunction model$1 (\n  el,\n  dir,\n  _warn\n) {\n  warn$3 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n  if (process.env.NODE_ENV !== 'production') {\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (tag === 'input' && dynamicType) {\n      warn$3(\n        \"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" +\n        \"v-model does not support dynamic input types. Use v-if branches instead.\"\n      );\n    }\n  }\n  if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else {\n    genDefaultModel(el, value, modifiers);\n  }\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  if (process.env.NODE_ENV !== 'production' &&\n    el.attrsMap.checked != null) {\n    warn$3(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" checked>:\\n\" +\n      \"inline checked attributes will be ignored when using v-model. \" +\n      'Declare initial values in the component\\'s data option instead.'\n    );\n  }\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n      \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n        trueValueBinding === 'true'\n          ? (\":(\" + value + \")\")\n          : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n      )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$c){$$i<0&&(\" + value + \"=$$a.concat($$v))}\" +\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\n    \"}else{\" + value + \"=$$c}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n    el,\n    value,\n    modifiers\n) {\n  if (process.env.NODE_ENV !== 'production' &&\n    el.attrsMap.checked != null) {\n    warn$3(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" checked>:\\n\" +\n      \"inline checked attributes will be ignored when using v-model. \" +\n      'Declare initial values in the component\\'s data option instead.'\n    );\n  }\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (el.tag === 'input' && el.attrsMap.value) {\n      warn$3(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" value=\\\"\" + (el.attrsMap.value) + \"\\\">:\\n\" +\n        'inline value attributes will be ignored when using v-model. ' +\n        'Declare initial values in the component\\'s data option instead.'\n      );\n    }\n    if (el.tag === 'textarea' && el.children.length) {\n      warn$3(\n        \"<textarea v-model=\\\"\" + value + \"\\\">:\\n\" +\n        'inline content inside <textarea> will be ignored when using v-model. ' +\n        'Declare initial values in the component\\'s data option instead.'\n      );\n    }\n  }\n\n  var type = el.attrsMap.type;\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var event = lazy || (isIE && type === 'range') ? 'change' : 'input';\n  var needCompositionGuard = !lazy && type !== 'range';\n  var isNative = el.tag === 'input' || el.tag === 'textarea';\n\n  var valueExpression = isNative\n    ? (\"$event.target.value\" + (trim ? '.trim()' : ''))\n    : trim ? \"(typeof $event === 'string' ? $event.trim() : $event)\" : \"$event\";\n  valueExpression = number || type === 'number'\n    ? (\"_n(\" + valueExpression + \")\")\n    : valueExpression;\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (isNative && needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  // inputs with type=\"file\" are read only and setting the input's\n  // value will throw an error.\n  if (process.env.NODE_ENV !== 'production' &&\n      type === 'file') {\n    warn$3(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n      \"File inputs are read only. Use a v-on:change listener instead.\"\n    );\n  }\n\n  addProp(el, 'value', isNative ? (\"_s(\" + value + \")\") : (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number || type === 'number') {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\nfunction genSelect (\n    el,\n    value,\n    modifiers\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    el.children.some(checkOptionWarning);\n  }\n\n  var number = modifiers && modifiers.number;\n  var assignment = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\" +\n    (el.attrsMap.multiple == null ? '[0]' : '');\n\n  var code = genAssignmentCode(value, assignment);\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction checkOptionWarning (option) {\n  if (option.type === 1 &&\n    option.tag === 'option' &&\n    option.attrsMap.selected != null) {\n    warn$3(\n      \"<select v-model=\\\"\" + (option.parent.attrsMap['v-model']) + \"\\\">:\\n\" +\n      'inline selected attributes on <option> will be ignored when using v-model. ' +\n      'Declare initial values in the component\\'s data option instead.'\n    );\n    return true\n  }\n  return false\n}\n\nfunction genAssignmentCode (value, assignment) {\n  var modelRs = parseModel(value);\n  if (modelRs.idx === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return \"var $$exp = \" + (modelRs.exp) + \", $$idx = \" + (modelRs.idx) + \";\" +\n      \"if (!Array.isArray($$exp)){\" +\n        value + \"=\" + assignment + \"}\" +\n      \"else{$$exp.splice($$idx, 1, \" + assignment + \")}\"\n  }\n}\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model$1,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar cache = Object.create(null);\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  staticKeys: genStaticKeys(modules$1),\n  directives: directives$1,\n  isReservedTag: isReservedTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  getTagNamespace: getTagNamespace,\n  isPreTag: isPreTag\n};\n\nfunction compile$$1 (\n  template,\n  options\n) {\n  options = options\n    ? extend(extend({}, baseOptions), options)\n    : baseOptions;\n  return compile$1(template, options)\n}\n\nfunction compileToFunctions (\n  template,\n  options,\n  vm\n) {\n  var _warn = (options && options.warn) || warn;\n  // detect possible CSP restriction\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      new Function('return 1');\n    } catch (e) {\n      if (e.toString().match(/unsafe-eval|CSP/)) {\n        _warn(\n          'It seems you are using the standalone build of Vue.js in an ' +\n          'environment with Content Security Policy that prohibits unsafe-eval. ' +\n          'The template compiler cannot work in this environment. Consider ' +\n          'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n          'templates into render functions.'\n        );\n      }\n    }\n  }\n  var key = options && options.delimiters\n    ? String(options.delimiters) + template\n    : template;\n  if (cache[key]) {\n    return cache[key]\n  }\n  var res = {};\n  var compiled = compile$$1(template, options);\n  res.render = makeFunction(compiled.render);\n  var l = compiled.staticRenderFns.length;\n  res.staticRenderFns = new Array(l);\n  for (var i = 0; i < l; i++) {\n    res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i]);\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (res.render === noop || res.staticRenderFns.some(function (fn) { return fn === noop; })) {\n      _warn(\n        \"failed to compile template:\\n\\n\" + template + \"\\n\\n\" +\n        detectErrors(compiled.ast).join('\\n') +\n        '\\n\\n',\n        vm\n      );\n    }\n  }\n  return (cache[key] = res)\n}\n\nfunction makeFunction (code) {\n  try {\n    return new Function(code)\n  } catch (e) {\n    return noop\n  }\n}\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      var ref = compileToFunctions(template, {\n        warn: warn,\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        delimiters: options.delimiters\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\nmodule.exports = Vue$3;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(13)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_material_dist_components_mdCore__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_material_dist_components_mdCore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vue_material_dist_components_mdCore__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdCore_index_css__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdCore_index_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdCore_index_css__);\n\n\n\n\nif (!__WEBPACK_IMPORTED_MODULE_1_vue_material_dist_components_mdCore___default.a.installed) {\n    __WEBPACK_IMPORTED_MODULE_0_vue___default.a.use(__WEBPACK_IMPORTED_MODULE_1_vue_material_dist_components_mdCore___default.a);\n}\n\n/* unused harmony default export */ var _unused_webpack_default_export = __WEBPACK_IMPORTED_MODULE_1_vue_material_dist_components_mdCore___default.a;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcHJveGllcy9tZENvcmUuanM/Y2Y1YyJdLCJuYW1lcyI6WyJtZENvcmUiLCJpbnN0YWxsZWQiLCJWdWUiLCJ1c2UiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLENBQUMsMkVBQUFBLENBQU9DLFNBQVosRUFBdUI7QUFDbkJDLElBQUEsMkNBQUFBLENBQUlDLEdBQUosQ0FBUSwyRUFBUjtBQUNIOztBQUVELHlFQUFlLDJFQUFmIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgbWRDb3JlIGZyb20gJ3Z1ZS1tYXRlcmlhbC9kaXN0L2NvbXBvbmVudHMvbWRDb3JlJztcbmltcG9ydCAndnVlLW1hdGVyaWFsL2Rpc3QvY29tcG9uZW50cy9tZENvcmUvaW5kZXguY3NzJztcblxuaWYgKCFtZENvcmUuaW5zdGFsbGVkKSB7XG4gICAgVnVlLnVzZShtZENvcmUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZENvcmVcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcHJveGllcy9tZENvcmUuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mdCore__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdLayout__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdLayout___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdLayout__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_material_dist_components_mdLayout_index_css__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_material_dist_components_mdLayout_index_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_vue_material_dist_components_mdLayout_index_css__);\n\n\n\n\n\nif (!__WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdLayout___default.a.installed) {\n    __WEBPACK_IMPORTED_MODULE_0_vue___default.a.use(__WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdLayout___default.a);\n}\n\n/* unused harmony default export */ var _unused_webpack_default_export = __WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdLayout___default.a;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcHJveGllcy9tZExheW91dC5qcz9kNjc4Il0sIm5hbWVzIjpbIm1kTGF5b3V0IiwiaW5zdGFsbGVkIiwiVnVlIiwidXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxDQUFDLDZFQUFBQSxDQUFTQyxTQUFkLEVBQXlCO0FBQ3JCQyxJQUFBLDJDQUFBQSxDQUFJQyxHQUFKLENBQVEsNkVBQVI7QUFDSDs7QUFFRCx5RUFBZSw2RUFBZiIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuL21kQ29yZSc7XG5pbXBvcnQgbWRMYXlvdXQgZnJvbSAndnVlLW1hdGVyaWFsL2Rpc3QvY29tcG9uZW50cy9tZExheW91dCc7XG5pbXBvcnQgJ3Z1ZS1tYXRlcmlhbC9kaXN0L2NvbXBvbmVudHMvbWRMYXlvdXQvaW5kZXguY3NzJztcblxuaWYgKCFtZExheW91dC5pbnN0YWxsZWQpIHtcbiAgICBWdWUudXNlKG1kTGF5b3V0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWRMYXlvdXRcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcHJveGllcy9tZExheW91dC5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 3 */
/***/ function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uLmNzcz8xNDEyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbW1vbi5jc3Ncbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mdCore__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdCard__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdCard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdCard__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_material_dist_components_mdCard_index_css__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_material_dist_components_mdCard_index_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_vue_material_dist_components_mdCard_index_css__);\n\n\n\n\n\nif (!__WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdCard___default.a.installed) {\n    __WEBPACK_IMPORTED_MODULE_0_vue___default.a.use(__WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdCard___default.a);\n}\n\n/* unused harmony default export */ var _unused_webpack_default_export = __WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdCard___default.a;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcHJveGllcy9tZENhcmQuanM/MmIzOCJdLCJuYW1lcyI6WyJtZENhcmQiLCJpbnN0YWxsZWQiLCJWdWUiLCJ1c2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLENBQUMsMkVBQUFBLENBQU9DLFNBQVosRUFBdUI7QUFDbkJDLElBQUEsMkNBQUFBLENBQUlDLEdBQUosQ0FBUSwyRUFBUjtBQUNIOztBQUVELHlFQUFlLDJFQUFmIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgJy4vbWRDb3JlJztcbmltcG9ydCBtZENhcmQgZnJvbSAndnVlLW1hdGVyaWFsL2Rpc3QvY29tcG9uZW50cy9tZENhcmQnO1xuaW1wb3J0ICd2dWUtbWF0ZXJpYWwvZGlzdC9jb21wb25lbnRzL21kQ2FyZC9pbmRleC5jc3MnO1xuXG5pZiAoIW1kQ2FyZC5pbnN0YWxsZWQpIHtcbiAgICBWdWUudXNlKG1kQ2FyZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1kQ2FyZFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9wcm94aWVzL21kQ2FyZC5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 5 */
/***/ function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1tYXRlcmlhbC9kaXN0L2NvbXBvbmVudHMvbWRDYXJkL2luZGV4LmNzcz9lZTlhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbWF0ZXJpYWwvZGlzdC9jb21wb25lbnRzL21kQ2FyZC9pbmRleC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 6 */
/***/ function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1tYXRlcmlhbC9kaXN0L2NvbXBvbmVudHMvbWRDb3JlL2luZGV4LmNzcz82Yzg3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbWF0ZXJpYWwvZGlzdC9jb21wb25lbnRzL21kQ29yZS9pbmRleC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 7 */
/***/ function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1tYXRlcmlhbC9kaXN0L2NvbXBvbmVudHMvbWRMYXlvdXQvaW5kZXguY3NzP2U5Y2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1tYXRlcmlhbC9kaXN0L2NvbXBvbmVudHMvbWRMYXlvdXQvaW5kZXguY3NzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 8 */
/***/ function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vex\"] = factory();\n\telse\n\t\troot[\"Vex\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _fraction = __webpack_require__(3);\n\t\n\tvar _renderer = __webpack_require__(10);\n\t\n\tvar _formatter = __webpack_require__(14);\n\t\n\tvar _music = __webpack_require__(30);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tvar _stave = __webpack_require__(43);\n\t\n\tvar _stavenote = __webpack_require__(20);\n\t\n\tvar _stavemodifier = __webpack_require__(45);\n\t\n\tvar _voice = __webpack_require__(18);\n\t\n\tvar _accidental = __webpack_require__(29);\n\t\n\tvar _beam = __webpack_require__(15);\n\t\n\tvar _stavetie = __webpack_require__(33);\n\t\n\tvar _tabstave = __webpack_require__(55);\n\t\n\tvar _tabnote = __webpack_require__(56);\n\t\n\tvar _bend = __webpack_require__(41);\n\t\n\tvar _vibrato = __webpack_require__(42);\n\t\n\tvar _vibratobracket = __webpack_require__(57);\n\t\n\tvar _note = __webpack_require__(22);\n\t\n\tvar _modifiercontext = __webpack_require__(27);\n\t\n\tvar _tickcontext = __webpack_require__(39);\n\t\n\tvar _articulation = __webpack_require__(37);\n\t\n\tvar _annotation = __webpack_require__(40);\n\t\n\tvar _stavebarline = __webpack_require__(44);\n\t\n\tvar _notehead = __webpack_require__(21);\n\t\n\tvar _staveconnector = __webpack_require__(19);\n\t\n\tvar _clefnote = __webpack_require__(58);\n\t\n\tvar _keysignature = __webpack_require__(52);\n\t\n\tvar _timesignature = __webpack_require__(53);\n\t\n\tvar _timesignote = __webpack_require__(59);\n\t\n\tvar _stem = __webpack_require__(17);\n\t\n\tvar _tabtie = __webpack_require__(34);\n\t\n\tvar _clef = __webpack_require__(51);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _tabslide = __webpack_require__(60);\n\t\n\tvar _tuplet = __webpack_require__(16);\n\t\n\tvar _gracenote = __webpack_require__(61);\n\t\n\tvar _gracetabnote = __webpack_require__(62);\n\t\n\tvar _tuning = __webpack_require__(63);\n\t\n\tvar _keymanager = __webpack_require__(64);\n\t\n\tvar _stavehairpin = __webpack_require__(65);\n\t\n\tvar _boundingbox = __webpack_require__(8);\n\t\n\tvar _strokes = __webpack_require__(35);\n\t\n\tvar _textnote = __webpack_require__(50);\n\t\n\tvar _curve = __webpack_require__(66);\n\t\n\tvar _textdynamics = __webpack_require__(67);\n\t\n\tvar _staveline = __webpack_require__(68);\n\t\n\tvar _ornament = __webpack_require__(38);\n\t\n\tvar _pedalmarking = __webpack_require__(69);\n\t\n\tvar _textbracket = __webpack_require__(70);\n\t\n\tvar _frethandfinger = __webpack_require__(28);\n\t\n\tvar _staverepetition = __webpack_require__(46);\n\t\n\tvar _barnote = __webpack_require__(71);\n\t\n\tvar _ghostnote = __webpack_require__(72);\n\t\n\tvar _notesubgroup = __webpack_require__(31);\n\t\n\tvar _gracenotegroup = __webpack_require__(32);\n\t\n\tvar _tremolo = __webpack_require__(73);\n\t\n\tvar _stringnumber = __webpack_require__(36);\n\t\n\tvar _crescendo = __webpack_require__(74);\n\t\n\tvar _stavevolta = __webpack_require__(54);\n\t\n\tvar _vexflow_font = __webpack_require__(9);\n\t\n\tvar _system = __webpack_require__(75);\n\t\n\tvar _factory = __webpack_require__(76);\n\t\n\tvar _parser = __webpack_require__(78);\n\t\n\tvar _easyscore = __webpack_require__(77);\n\t\n\tvar _registry = __webpack_require__(6);\n\t\n\t// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t\n\t_vex.Vex.Flow = _tables.Flow;\n\t_vex.Vex.Flow.Element = _element.Element;\n\t_vex.Vex.Flow.Fraction = _fraction.Fraction;\n\t_vex.Vex.Flow.Renderer = _renderer.Renderer;\n\t_vex.Vex.Flow.Formatter = _formatter.Formatter;\n\t_vex.Vex.Flow.Music = _music.Music;\n\t_vex.Vex.Flow.Glyph = _glyph.Glyph;\n\t_vex.Vex.Flow.Stave = _stave.Stave;\n\t_vex.Vex.Flow.StaveNote = _stavenote.StaveNote;\n\t_vex.Vex.Flow.StaveModifier = _stavemodifier.StaveModifier;\n\t_vex.Vex.Flow.Voice = _voice.Voice;\n\t_vex.Vex.Flow.Accidental = _accidental.Accidental;\n\t_vex.Vex.Flow.Beam = _beam.Beam;\n\t_vex.Vex.Flow.StaveTie = _stavetie.StaveTie;\n\t_vex.Vex.Flow.TabStave = _tabstave.TabStave;\n\t_vex.Vex.Flow.TabNote = _tabnote.TabNote;\n\t_vex.Vex.Flow.Bend = _bend.Bend;\n\t_vex.Vex.Flow.Vibrato = _vibrato.Vibrato;\n\t_vex.Vex.Flow.VibratoBracket = _vibratobracket.VibratoBracket;\n\t_vex.Vex.Flow.Note = _note.Note;\n\t_vex.Vex.Flow.ModifierContext = _modifiercontext.ModifierContext;\n\t_vex.Vex.Flow.TickContext = _tickcontext.TickContext;\n\t_vex.Vex.Flow.Articulation = _articulation.Articulation;\n\t_vex.Vex.Flow.Annotation = _annotation.Annotation;\n\t_vex.Vex.Flow.Barline = _stavebarline.Barline;\n\t_vex.Vex.Flow.NoteHead = _notehead.NoteHead;\n\t_vex.Vex.Flow.StaveConnector = _staveconnector.StaveConnector;\n\t_vex.Vex.Flow.ClefNote = _clefnote.ClefNote;\n\t_vex.Vex.Flow.KeySignature = _keysignature.KeySignature;\n\t_vex.Vex.Flow.TimeSignature = _timesignature.TimeSignature;\n\t_vex.Vex.Flow.TimeSigNote = _timesignote.TimeSigNote;\n\t_vex.Vex.Flow.Stem = _stem.Stem;\n\t_vex.Vex.Flow.TabTie = _tabtie.TabTie;\n\t_vex.Vex.Flow.Clef = _clef.Clef;\n\t_vex.Vex.Flow.Modifier = _modifier.Modifier;\n\t_vex.Vex.Flow.TabSlide = _tabslide.TabSlide;\n\t_vex.Vex.Flow.Tuplet = _tuplet.Tuplet;\n\t_vex.Vex.Flow.GraceNote = _gracenote.GraceNote;\n\t_vex.Vex.Flow.GraceTabNote = _gracetabnote.GraceTabNote;\n\t_vex.Vex.Flow.Tuning = _tuning.Tuning;\n\t_vex.Vex.Flow.KeyManager = _keymanager.KeyManager;\n\t_vex.Vex.Flow.StaveHairpin = _stavehairpin.StaveHairpin;\n\t_vex.Vex.Flow.BoundingBox = _boundingbox.BoundingBox;\n\t_vex.Vex.Flow.Stroke = _strokes.Stroke;\n\t_vex.Vex.Flow.TextNote = _textnote.TextNote;\n\t_vex.Vex.Flow.Curve = _curve.Curve;\n\t_vex.Vex.Flow.TextDynamics = _textdynamics.TextDynamics;\n\t_vex.Vex.Flow.StaveLine = _staveline.StaveLine;\n\t_vex.Vex.Flow.Ornament = _ornament.Ornament;\n\t_vex.Vex.Flow.PedalMarking = _pedalmarking.PedalMarking;\n\t_vex.Vex.Flow.TextBracket = _textbracket.TextBracket;\n\t_vex.Vex.Flow.FretHandFinger = _frethandfinger.FretHandFinger;\n\t_vex.Vex.Flow.Repetition = _staverepetition.Repetition;\n\t_vex.Vex.Flow.BarNote = _barnote.BarNote;\n\t_vex.Vex.Flow.GhostNote = _ghostnote.GhostNote;\n\t_vex.Vex.Flow.NoteSubGroup = _notesubgroup.NoteSubGroup;\n\t_vex.Vex.Flow.GraceNoteGroup = _gracenotegroup.GraceNoteGroup;\n\t_vex.Vex.Flow.Tremolo = _tremolo.Tremolo;\n\t_vex.Vex.Flow.StringNumber = _stringnumber.StringNumber;\n\t_vex.Vex.Flow.Crescendo = _crescendo.Crescendo;\n\t_vex.Vex.Flow.Volta = _stavevolta.Volta;\n\t_vex.Vex.Flow.Font = _vexflow_font.Font;\n\t_vex.Vex.Flow.System = _system.System;\n\t_vex.Vex.Flow.Factory = _factory.Factory;\n\t_vex.Vex.Flow.Parser = _parser.Parser;\n\t_vex.Vex.Flow.EasyScore = _easyscore.EasyScore;\n\t_vex.Vex.Flow.Registry = _registry.Registry;\n\t\n\texports.default = _vex.Vex;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// This file implements utility methods used by the rest of the VexFlow\n\t// codebase.\n\t//\n\t\n\tvar Vex = function Vex() {};\n\t\n\t// Default log function sends all arguments to console.\n\tVex.L = function (block, args) {\n\t  if (!args) return;\n\t  var line = Array.prototype.slice.call(args).join(' ');\n\t  window.console.log(block + ': ' + line);\n\t};\n\t\n\tVex.MakeException = function (name) {\n\t  var exception = function (_Error) {\n\t    _inherits(exception, _Error);\n\t\n\t    function exception(message, data) {\n\t      _classCallCheck(this, exception);\n\t\n\t      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(exception).call(this, message));\n\t\n\t      _this.name = name;\n\t      _this.message = message;\n\t      _this.data = data;\n\t      return _this;\n\t    }\n\t\n\t    return exception;\n\t  }(Error);\n\t\n\t  return exception;\n\t};\n\t\n\t// Default runtime exception.\n\t\n\tvar RuntimeError = function () {\n\t  function RuntimeError(code, message) {\n\t    _classCallCheck(this, RuntimeError);\n\t\n\t    this.code = code;\n\t    this.message = message;\n\t  }\n\t\n\t  _createClass(RuntimeError, [{\n\t    key: 'toString',\n\t    value: function toString() {\n\t      return '[RuntimeError] ' + this.code + ':' + this.message;\n\t    }\n\t  }]);\n\t\n\t  return RuntimeError;\n\t}();\n\t\n\t// Shortcut method for `RuntimeError`.\n\t\n\t\n\tVex.RuntimeError = RuntimeError;\n\tVex.RERR = Vex.RuntimeError;\n\t\n\t// Merge `destination` hash with `source` hash, overwriting like keys\n\t// in `source` if necessary.\n\tVex.Merge = function (destination, source) {\n\t  for (var property in source) {\n\t    // eslint-disable-line guard-for-in\n\t    destination[property] = source[property];\n\t  }\n\t  return destination;\n\t};\n\t\n\t// DEPRECATED. Use `Math.*`.\n\tVex.Min = Math.min;\n\tVex.Max = Math.max;\n\tVex.forEach = function (a, fn) {\n\t  for (var i = 0; i < a.length; i++) {\n\t    fn(a[i], i);\n\t  }\n\t};\n\t\n\t// Round number to nearest fractional value (`.5`, `.25`, etc.)\n\tVex.RoundN = function (x, n) {\n\t  return x % n >= n / 2 ? parseInt(x / n, 10) * n + n : parseInt(x / n, 10) * n;\n\t};\n\t\n\t// Locate the mid point between stave lines. Returns a fractional line if a space.\n\tVex.MidLine = function (a, b) {\n\t  var mid_line = b + (a - b) / 2;\n\t  if (mid_line % 2 > 0) {\n\t    mid_line = Vex.RoundN(mid_line * 10, 5) / 10;\n\t  }\n\t  return mid_line;\n\t};\n\t\n\t// Take `arr` and return a new list consisting of the sorted, unique,\n\t// contents of arr. Does not modify `arr`.\n\tVex.SortAndUnique = function (arr, cmp, eq) {\n\t  if (arr.length > 1) {\n\t    var newArr = [];\n\t    var last = void 0;\n\t    arr.sort(cmp);\n\t\n\t    for (var i = 0; i < arr.length; ++i) {\n\t      if (i === 0 || !eq(arr[i], last)) {\n\t        newArr.push(arr[i]);\n\t      }\n\t      last = arr[i];\n\t    }\n\t\n\t    return newArr;\n\t  } else {\n\t    return arr;\n\t  }\n\t};\n\t\n\t// Check if array `a` contains `obj`.\n\tVex.Contains = function (a, obj) {\n\t  var i = a.length;\n\t  while (i--) {\n\t    if (a[i] === obj) {\n\t      return true;\n\t    }\n\t  }\n\t  return false;\n\t};\n\t\n\t// Get the 2D Canvas context from DOM element `canvas_sel`.\n\tVex.getCanvasContext = function (canvas_sel) {\n\t  if (!canvas_sel) {\n\t    throw new Vex.RERR('BadArgument', 'Invalid canvas selector: ' + canvas_sel);\n\t  }\n\t\n\t  var canvas = document.getElementById(canvas_sel);\n\t  if (!(canvas && canvas.getContext)) {\n\t    throw new Vex.RERR('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n\t  }\n\t\n\t  return canvas.getContext('2d');\n\t};\n\t\n\t// Draw a tiny dot marker on the specified canvas. A great debugging aid.\n\t//\n\t// `ctx`: Canvas context.\n\t// `x`, `y`: Dot coordinates.\n\tVex.drawDot = function (ctx, x, y) {\n\t  var color = arguments.length <= 3 || arguments[3] === undefined ? '#55' : arguments[3];\n\t\n\t  ctx.save();\n\t  ctx.setFillStyle(color);\n\t\n\t  // draw a circle\n\t  ctx.beginPath();\n\t  ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n\t  ctx.closePath();\n\t  ctx.fill();\n\t  ctx.restore();\n\t};\n\t\n\t// Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.\n\tVex.BM = function (s, f) {\n\t  var start_time = new Date().getTime();\n\t  f();\n\t  var elapsed = new Date().getTime() - start_time;\n\t  Vex.L(s + elapsed + 'ms');\n\t};\n\t\n\t// Get stack trace.\n\tVex.StackTrace = function () {\n\t  var err = new Error();\n\t  return err.stack;\n\t};\n\t\n\t// Dump warning to console.\n\tVex.W = function () {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  var line = Array.prototype.slice.call(args).join(' ');\n\t  window.console.log('Warning: ', line, Vex.StackTrace());\n\t};\n\t\n\t// Used by various classes (e.g., SVGContext) to provide a\n\t// unique prefix to element names (or other keys in shared namespaces).\n\tVex.Prefix = function (text) {\n\t  return Vex.Prefix.prefix + text;\n\t};\n\tVex.Prefix.prefix = 'vf-';\n\t\n\texports.Vex = Vex;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Flow = undefined;\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }; // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t\n\t/* eslint-disable key-spacing */\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _fraction = __webpack_require__(3);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tvar Flow = {\n\t  STEM_WIDTH: 1.5,\n\t  STEM_HEIGHT: 35,\n\t  STAVE_LINE_THICKNESS: 1,\n\t  RESOLUTION: 16384,\n\t  DEFAULT_NOTATION_FONT_SCALE: 39,\n\t  DEFAULT_TABLATURE_FONT_SCALE: 39,\n\t  SLASH_NOTEHEAD_WIDTH: 15,\n\t\n\t  // HACK:\n\t  // Since text origins are positioned at the baseline, we must\n\t  // compensate for the ascender of the text. Of course, 1 staff space is\n\t  // a very poor approximation.\n\t  //\n\t  // This will be deprecated in the future. This is a temporary solution until\n\t  // we have more robust text metrics.\n\t  TEXT_HEIGHT_OFFSET_HACK: 1,\n\t\n\t  /* Kerning (DEPRECATED) */\n\t  IsKerned: true\n\t};\n\t\n\tFlow.clefProperties = function (clef) {\n\t  if (!clef) throw new _vex.Vex.RERR('BadArgument', 'Invalid clef: ' + clef);\n\t\n\t  var props = Flow.clefProperties.values[clef];\n\t  if (!props) throw new _vex.Vex.RERR('BadArgument', 'Invalid clef: ' + clef);\n\t\n\t  return props;\n\t};\n\t\n\tFlow.clefProperties.values = {\n\t  'treble': { line_shift: 0 },\n\t  'bass': { line_shift: 6 },\n\t  'tenor': { line_shift: 4 },\n\t  'alto': { line_shift: 3 },\n\t  'soprano': { line_shift: 1 },\n\t  'percussion': { line_shift: 0 },\n\t  'mezzo-soprano': { line_shift: 2 },\n\t  'baritone-c': { line_shift: 5 },\n\t  'baritone-f': { line_shift: 5 },\n\t  'subbass': { line_shift: 7 },\n\t  'french': { line_shift: -1 }\n\t};\n\t\n\t/*\n\t  Take a note in the format \"Key/Octave\" (e.g., \"C/5\") and return properties.\n\t\n\t  The last argument, params, is a struct the currently can contain one option,\n\t  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n\t*/\n\tFlow.keyProperties = function (key, clef, params) {\n\t  if (clef === undefined) {\n\t    clef = 'treble';\n\t  }\n\t\n\t  var options = { octave_shift: 0 };\n\t\n\t  if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {\n\t    _vex.Vex.Merge(options, params);\n\t  }\n\t\n\t  var pieces = key.split('/');\n\t\n\t  if (pieces.length < 2) {\n\t    throw new _vex.Vex.RERR('BadArguments', 'Key must have note + octave and an optional glyph: ' + key);\n\t  }\n\t\n\t  var k = pieces[0].toUpperCase();\n\t  var value = Flow.keyProperties.note_values[k];\n\t  if (!value) throw new _vex.Vex.RERR('BadArguments', 'Invalid key name: ' + k);\n\t  if (value.octave) pieces[1] = value.octave;\n\t\n\t  var octave = parseInt(pieces[1], 10);\n\t\n\t  // Octave_shift is the shift to compensate for clef 8va/8vb.\n\t  octave += -1 * options.octave_shift;\n\t\n\t  var base_index = octave * 7 - 4 * 7;\n\t  var line = (base_index + value.index) / 2;\n\t  line += Flow.clefProperties(clef).line_shift;\n\t\n\t  var stroke = 0;\n\t\n\t  if (line <= 0 && line * 2 % 2 === 0) stroke = 1; // stroke up\n\t  if (line >= 6 && line * 2 % 2 === 0) stroke = -1; // stroke down\n\t\n\t  // Integer value for note arithmetic.\n\t  var int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : null;\n\t\n\t  /* Check if the user specified a glyph. */\n\t  var code = value.code;\n\t  var shift_right = value.shift_right;\n\t  if (pieces.length > 2 && pieces[2]) {\n\t    var glyph_name = pieces[2].toUpperCase();\n\t    var note_glyph = Flow.keyProperties.note_glyph[glyph_name];\n\t    if (note_glyph) {\n\t      code = note_glyph.code;\n\t      shift_right = note_glyph.shift_right;\n\t    }\n\t  }\n\t\n\t  return {\n\t    key: k,\n\t    octave: octave,\n\t    line: line,\n\t    int_value: int_value,\n\t    accidental: value.accidental,\n\t    code: code,\n\t    stroke: stroke,\n\t    shift_right: shift_right,\n\t    displaced: false\n\t  };\n\t};\n\t\n\tFlow.keyProperties.note_values = {\n\t  'C': { index: 0, int_val: 0, accidental: null },\n\t  'CN': { index: 0, int_val: 0, accidental: 'n' },\n\t  'C#': { index: 0, int_val: 1, accidental: '#' },\n\t  'C##': { index: 0, int_val: 2, accidental: '##' },\n\t  'CB': { index: 0, int_val: -1, accidental: 'b' },\n\t  'CBB': { index: 0, int_val: -2, accidental: 'bb' },\n\t  'D': { index: 1, int_val: 2, accidental: null },\n\t  'DN': { index: 1, int_val: 2, accidental: 'n' },\n\t  'D#': { index: 1, int_val: 3, accidental: '#' },\n\t  'D##': { index: 1, int_val: 4, accidental: '##' },\n\t  'DB': { index: 1, int_val: 1, accidental: 'b' },\n\t  'DBB': { index: 1, int_val: 0, accidental: 'bb' },\n\t  'E': { index: 2, int_val: 4, accidental: null },\n\t  'EN': { index: 2, int_val: 4, accidental: 'n' },\n\t  'E#': { index: 2, int_val: 5, accidental: '#' },\n\t  'E##': { index: 2, int_val: 6, accidental: '##' },\n\t  'EB': { index: 2, int_val: 3, accidental: 'b' },\n\t  'EBB': { index: 2, int_val: 2, accidental: 'bb' },\n\t  'F': { index: 3, int_val: 5, accidental: null },\n\t  'FN': { index: 3, int_val: 5, accidental: 'n' },\n\t  'F#': { index: 3, int_val: 6, accidental: '#' },\n\t  'F##': { index: 3, int_val: 7, accidental: '##' },\n\t  'FB': { index: 3, int_val: 4, accidental: 'b' },\n\t  'FBB': { index: 3, int_val: 3, accidental: 'bb' },\n\t  'G': { index: 4, int_val: 7, accidental: null },\n\t  'GN': { index: 4, int_val: 7, accidental: 'n' },\n\t  'G#': { index: 4, int_val: 8, accidental: '#' },\n\t  'G##': { index: 4, int_val: 9, accidental: '##' },\n\t  'GB': { index: 4, int_val: 6, accidental: 'b' },\n\t  'GBB': { index: 4, int_val: 5, accidental: 'bb' },\n\t  'A': { index: 5, int_val: 9, accidental: null },\n\t  'AN': { index: 5, int_val: 9, accidental: 'n' },\n\t  'A#': { index: 5, int_val: 10, accidental: '#' },\n\t  'A##': { index: 5, int_val: 11, accidental: '##' },\n\t  'AB': { index: 5, int_val: 8, accidental: 'b' },\n\t  'ABB': { index: 5, int_val: 7, accidental: 'bb' },\n\t  'B': { index: 6, int_val: 11, accidental: null },\n\t  'BN': { index: 6, int_val: 11, accidental: 'n' },\n\t  'B#': { index: 6, int_val: 12, accidental: '#' },\n\t  'B##': { index: 6, int_val: 13, accidental: '##' },\n\t  'BB': { index: 6, int_val: 10, accidental: 'b' },\n\t  'BBB': { index: 6, int_val: 9, accidental: 'bb' },\n\t  'R': { index: 6, int_val: 9, rest: true }, // Rest\n\t  'X': {\n\t    index: 6,\n\t    accidental: '',\n\t    octave: 4,\n\t    code: 'v3e',\n\t    shift_right: 5.5\n\t  }\n\t};\n\t\n\tFlow.keyProperties.note_glyph = {\n\t  /* Diamond */\n\t  'D0': { code: 'v27', shift_right: -0.5 },\n\t  'D1': { code: 'v2d', shift_right: -0.5 },\n\t  'D2': { code: 'v22', shift_right: -0.5 },\n\t  'D3': { code: 'v70', shift_right: -0.5 },\n\t\n\t  /* Triangle */\n\t  'T0': { code: 'v49', shift_right: -2 },\n\t  'T1': { code: 'v93', shift_right: 0.5 },\n\t  'T2': { code: 'v40', shift_right: 0.5 },\n\t  'T3': { code: 'v7d', shift_right: 0.5 },\n\t\n\t  /* Cross */\n\t  'X0': { code: 'v92', shift_right: -2 },\n\t  'X1': { code: 'v95', shift_right: -0.5 },\n\t  'X2': { code: 'v7f', shift_right: 0.5 },\n\t  'X3': { code: 'v3b', shift_right: -2 }\n\t};\n\t\n\tFlow.integerToNote = function (integer) {\n\t  if (typeof integer === 'undefined') {\n\t    throw new _vex.Vex.RERR('BadArguments', 'Undefined integer for integerToNote');\n\t  }\n\t\n\t  if (integer < -2) {\n\t    throw new _vex.Vex.RERR('BadArguments', 'integerToNote requires integer > -2: ' + integer);\n\t  }\n\t\n\t  var noteValue = Flow.integerToNote.table[integer];\n\t  if (!noteValue) {\n\t    throw new _vex.Vex.RERR('BadArguments', 'Unknown note value for integer: ' + integer);\n\t  }\n\t\n\t  return noteValue;\n\t};\n\t\n\tFlow.integerToNote.table = {\n\t  0: 'C',\n\t  1: 'C#',\n\t  2: 'D',\n\t  3: 'D#',\n\t  4: 'E',\n\t  5: 'F',\n\t  6: 'F#',\n\t  7: 'G',\n\t  8: 'G#',\n\t  9: 'A',\n\t  10: 'A#',\n\t  11: 'B'\n\t};\n\t\n\tFlow.tabToGlyph = function (fret) {\n\t  var scale = arguments.length <= 1 || arguments[1] === undefined ? 1.0 : arguments[1];\n\t\n\t  var glyph = null;\n\t  var width = 0;\n\t  var shift_y = 0;\n\t\n\t  if (fret.toString().toUpperCase() === 'X') {\n\t    var glyphMetrics = new _glyph.Glyph('v7f', Flow.DEFAULT_TABLATURE_FONT_SCALE).getMetrics();\n\t    glyph = 'v7f';\n\t    width = glyphMetrics.width;\n\t    shift_y = -glyphMetrics.height / 2;\n\t  } else {\n\t    width = Flow.textWidth(fret.toString());\n\t  }\n\t\n\t  return {\n\t    text: fret,\n\t    code: glyph,\n\t    getWidth: function getWidth() {\n\t      return width * scale;\n\t    },\n\t    shift_y: shift_y\n\t  };\n\t};\n\t\n\tFlow.textWidth = function (text) {\n\t  return 7 * text.toString().length;\n\t};\n\t\n\tFlow.articulationCodes = function (artic) {\n\t  return Flow.articulationCodes.articulations[artic];\n\t};\n\t\n\tFlow.articulationCodes.articulations = {\n\t  'a.': { code: 'v23', between_lines: true }, // Staccato\n\t  'av': { code: 'v28', between_lines: true }, // Staccatissimo\n\t  'a>': { code: 'v42', between_lines: true }, // Accent\n\t  'a-': { code: 'v25', between_lines: true }, // Tenuto\n\t  'a^': { code: 'va', between_lines: false }, // Marcato\n\t  'a+': { code: 'v8b', between_lines: false }, // Left hand pizzicato\n\t  'ao': { code: 'v94', between_lines: false }, // Snap pizzicato\n\t  'ah': { code: 'vb9', between_lines: false }, // Natural harmonic or open note\n\t  'a@a': { code: 'v43', between_lines: false }, // Fermata above staff\n\t  'a@u': { code: 'v5b', between_lines: false }, // Fermata below staff\n\t  'a|': { code: 'v75', between_lines: false }, // Bow up - up stroke\n\t  'am': { code: 'v97', between_lines: false }, // Bow down - down stroke\n\t  'a,': { code: 'vb3', between_lines: false } };\n\t\n\tFlow.accidentalCodes = function (acc) {\n\t  return Flow.accidentalCodes.accidentals[acc];\n\t};\n\t\n\tFlow.accidentalCodes.accidentals = {\n\t  '#': { code: 'v18', parenRightPaddingAdjustment: -1 },\n\t  '##': { code: 'v7f', parenRightPaddingAdjustment: -1 },\n\t  'b': { code: 'v44', parenRightPaddingAdjustment: -2 },\n\t  'bb': { code: 'v26', parenRightPaddingAdjustment: -2 },\n\t  'n': { code: 'v4e', parenRightPaddingAdjustment: -1 },\n\t  '{': { code: 'v9c', parenRightPaddingAdjustment: -1 },\n\t  '}': { code: 'v84', parenRightPaddingAdjustment: -1 },\n\t  'db': { code: 'v9e', parenRightPaddingAdjustment: -1 },\n\t  'd': { code: 'vab', parenRightPaddingAdjustment: 0 },\n\t  'bbs': { code: 'v90', parenRightPaddingAdjustment: -1 },\n\t  '++': { code: 'v51', parenRightPaddingAdjustment: -1 },\n\t  '+': { code: 'v78', parenRightPaddingAdjustment: -1 },\n\t  '+-': { code: 'v8d', parenRightPaddingAdjustment: -1 },\n\t  '++-': { code: 'v7a', parenRightPaddingAdjustment: -1 },\n\t  'bs': { code: 'vb7', parenRightPaddingAdjustment: -1 },\n\t  'bss': { code: 'v39', parenRightPaddingAdjustment: -1 }\n\t};\n\t\n\tFlow.accidentalColumnsTable = {\n\t  1: { a: [1], b: [1] },\n\t  2: { a: [1, 2] },\n\t  3: { a: [1, 3, 2], b: [1, 2, 1], second_on_bottom: [1, 2, 3] },\n\t  4: { a: [1, 3, 4, 2], b: [1, 2, 3, 1], spaced_out_tetrachord: [1, 2, 1, 2] },\n\t  5: { a: [1, 3, 5, 4, 2], b: [1, 2, 4, 3, 1],\n\t    spaced_out_pentachord: [1, 2, 3, 2, 1],\n\t    very_spaced_out_pentachord: [1, 2, 1, 2, 1] },\n\t  6: { a: [1, 3, 5, 6, 4, 2], b: [1, 2, 4, 5, 3, 1],\n\t    spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n\t    very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2] }\n\t};\n\t\n\tFlow.ornamentCodes = function (acc) {\n\t  return Flow.ornamentCodes.ornaments[acc];\n\t};\n\t\n\tFlow.ornamentCodes.ornaments = {\n\t  'mordent': { code: 'v1e' },\n\t  'mordent_inverted': { code: 'v45' },\n\t  'turn': { code: 'v72' },\n\t  'turn_inverted': { code: 'v33' },\n\t  'tr': { code: 'v1f' },\n\t  'upprall': { code: 'v60' },\n\t  'downprall': { code: 'vb4' },\n\t  'prallup': { code: 'v6d' },\n\t  'pralldown': { code: 'v2c' },\n\t  'upmordent': { code: 'v29' },\n\t  'downmordent': { code: 'v68' },\n\t  'lineprall': { code: 'v20' },\n\t  'prallprall': { code: 'v86' }\n\t};\n\t\n\tFlow.keySignature = function (spec) {\n\t  var keySpec = Flow.keySignature.keySpecs[spec];\n\t\n\t  if (!keySpec) {\n\t    throw new _vex.Vex.RERR('BadKeySignature', 'Bad key signature spec: \\'' + spec + '\\'');\n\t  }\n\t\n\t  if (!keySpec.acc) {\n\t    return [];\n\t  }\n\t\n\t  var notes = Flow.keySignature.accidentalList(keySpec.acc);\n\t\n\t  var acc_list = [];\n\t  for (var i = 0; i < keySpec.num; ++i) {\n\t    var line = notes[i];\n\t    acc_list.push({ type: keySpec.acc, line: line });\n\t  }\n\t\n\t  return acc_list;\n\t};\n\t\n\tFlow.keySignature.keySpecs = {\n\t  'C': { acc: null, num: 0 },\n\t  'Am': { acc: null, num: 0 },\n\t  'F': { acc: 'b', num: 1 },\n\t  'Dm': { acc: 'b', num: 1 },\n\t  'Bb': { acc: 'b', num: 2 },\n\t  'Gm': { acc: 'b', num: 2 },\n\t  'Eb': { acc: 'b', num: 3 },\n\t  'Cm': { acc: 'b', num: 3 },\n\t  'Ab': { acc: 'b', num: 4 },\n\t  'Fm': { acc: 'b', num: 4 },\n\t  'Db': { acc: 'b', num: 5 },\n\t  'Bbm': { acc: 'b', num: 5 },\n\t  'Gb': { acc: 'b', num: 6 },\n\t  'Ebm': { acc: 'b', num: 6 },\n\t  'Cb': { acc: 'b', num: 7 },\n\t  'Abm': { acc: 'b', num: 7 },\n\t  'G': { acc: '#', num: 1 },\n\t  'Em': { acc: '#', num: 1 },\n\t  'D': { acc: '#', num: 2 },\n\t  'Bm': { acc: '#', num: 2 },\n\t  'A': { acc: '#', num: 3 },\n\t  'F#m': { acc: '#', num: 3 },\n\t  'E': { acc: '#', num: 4 },\n\t  'C#m': { acc: '#', num: 4 },\n\t  'B': { acc: '#', num: 5 },\n\t  'G#m': { acc: '#', num: 5 },\n\t  'F#': { acc: '#', num: 6 },\n\t  'D#m': { acc: '#', num: 6 },\n\t  'C#': { acc: '#', num: 7 },\n\t  'A#m': { acc: '#', num: 7 }\n\t};\n\t\n\tFlow.unicode = {\n\t  // Unicode accidentals\n\t  'sharp': String.fromCharCode(parseInt('266F', 16)),\n\t  'flat': String.fromCharCode(parseInt('266D', 16)),\n\t  'natural': String.fromCharCode(parseInt('266E', 16)),\n\t  // Major Chord\n\t  'triangle': String.fromCharCode(parseInt('25B3', 16)),\n\t  // half-diminished\n\t  'o-with-slash': String.fromCharCode(parseInt('00F8', 16)),\n\t  // Diminished\n\t  'degrees': String.fromCharCode(parseInt('00B0', 16)),\n\t  'circle': String.fromCharCode(parseInt('25CB', 16))\n\t};\n\t\n\tFlow.keySignature.accidentalList = function (acc) {\n\t  var patterns = {\n\t    'b': [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n\t    '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2]\n\t  };\n\t\n\t  return patterns[acc];\n\t};\n\t\n\tFlow.parseNoteDurationString = function (durationString) {\n\t  if (typeof durationString !== 'string') {\n\t    return null;\n\t  }\n\t\n\t  var regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n\t\n\t  var result = regexp.exec(durationString);\n\t  if (!result) {\n\t    return null;\n\t  }\n\t\n\t  var duration = result[1];\n\t  var dots = result[2].length;\n\t  var type = result[3];\n\t\n\t  if (type.length === 0) {\n\t    type = 'n';\n\t  }\n\t\n\t  return {\n\t    duration: duration,\n\t    dots: dots,\n\t    type: type\n\t  };\n\t};\n\t\n\tFlow.parseNoteData = function (noteData) {\n\t  var duration = noteData.duration;\n\t\n\t  // Preserve backwards-compatibility\n\t  var durationStringData = Flow.parseNoteDurationString(duration);\n\t  if (!durationStringData) {\n\t    return null;\n\t  }\n\t\n\t  var ticks = Flow.durationToTicks(durationStringData.duration);\n\t  if (ticks == null) {\n\t    return null;\n\t  }\n\t\n\t  var type = noteData.type;\n\t\n\t  if (type) {\n\t    if (!(type === 'n' || type === 'r' || type === 'h' || type === 'm' || type === 's')) {\n\t      return null;\n\t    }\n\t  } else {\n\t    type = durationStringData.type;\n\t    if (!type) {\n\t      type = 'n';\n\t    }\n\t  }\n\t\n\t  var dots = noteData.dots ? noteData.dots : durationStringData.dots;\n\t\n\t  if (typeof dots !== 'number') {\n\t    return null;\n\t  }\n\t\n\t  var currentTicks = ticks;\n\t\n\t  for (var i = 0; i < dots; i++) {\n\t    if (currentTicks <= 1) return null;\n\t\n\t    currentTicks = currentTicks / 2;\n\t    ticks += currentTicks;\n\t  }\n\t\n\t  return {\n\t    duration: durationStringData.duration,\n\t    type: type,\n\t    dots: dots,\n\t    ticks: ticks\n\t  };\n\t};\n\t\n\t// Used to convert duration aliases to the number based duration.\n\t// If the input isn't an alias, simply return the input.\n\t//\n\t// example: 'q' -> '4', '8' -> '8'\n\tFlow.sanitizeDuration = function (duration) {\n\t  var alias = Flow.durationAliases[duration];\n\t  if (alias !== undefined) {\n\t    duration = alias;\n\t  }\n\t\n\t  if (Flow.durationToTicks.durations[duration] === undefined) {\n\t    throw new _vex.Vex.RERR('BadArguments', 'The provided duration is not valid: ' + duration);\n\t  }\n\t\n\t  return duration;\n\t};\n\t\n\t// Convert the `duration` to an fraction\n\tFlow.durationToFraction = function (duration) {\n\t  return new _fraction.Fraction().parse(Flow.sanitizeDuration(duration));\n\t};\n\t\n\t// Convert the `duration` to an number\n\tFlow.durationToNumber = function (duration) {\n\t  return Flow.durationToFraction(duration).value();\n\t};\n\t\n\t// Convert the `duration` to total ticks\n\tFlow.durationToTicks = function (duration) {\n\t  duration = Flow.sanitizeDuration(duration);\n\t\n\t  var ticks = Flow.durationToTicks.durations[duration];\n\t  if (ticks === undefined) {\n\t    return null;\n\t  }\n\t\n\t  return ticks;\n\t};\n\t\n\tFlow.durationToTicks.durations = {\n\t  '1/2': Flow.RESOLUTION * 2,\n\t  '1': Flow.RESOLUTION / 1,\n\t  '2': Flow.RESOLUTION / 2,\n\t  '4': Flow.RESOLUTION / 4,\n\t  '8': Flow.RESOLUTION / 8,\n\t  '16': Flow.RESOLUTION / 16,\n\t  '32': Flow.RESOLUTION / 32,\n\t  '64': Flow.RESOLUTION / 64,\n\t  '128': Flow.RESOLUTION / 128,\n\t  '256': Flow.RESOLUTION / 256\n\t};\n\t\n\tFlow.durationAliases = {\n\t  'w': '1',\n\t  'h': '2',\n\t  'q': '4',\n\t\n\t  // This is the default duration used to render bars (BarNote). Bars no longer\n\t  // consume ticks, so this should be a no-op.\n\t  //\n\t  // TODO(0xfe): This needs to be cleaned up.\n\t  'b': '256'\n\t};\n\t\n\tFlow.durationToGlyph = function (duration, type) {\n\t  duration = Flow.sanitizeDuration(duration);\n\t\n\t  var code = Flow.durationToGlyph.duration_codes[duration];\n\t  if (code === undefined) {\n\t    return null;\n\t  }\n\t\n\t  if (!type) {\n\t    type = 'n';\n\t  }\n\t\n\t  var glyphTypeProperties = code.type[type];\n\t  if (glyphTypeProperties === undefined) {\n\t    return null;\n\t  }\n\t\n\t  return _vex.Vex.Merge(_vex.Vex.Merge({}, code.common), glyphTypeProperties);\n\t};\n\t\n\tFlow.durationToGlyph.duration_codes = {\n\t  '1/2': {\n\t    common: {\n\t      getWidth: function getWidth() {\n\t        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];\n\t\n\t        return new _glyph.Glyph(this.code_head || 'v53', scale).getMetrics().width;\n\t      },\n\t\n\t      stem: false,\n\t      stem_offset: 0,\n\t      flag: false,\n\t      stem_up_extension: -Flow.STEM_HEIGHT,\n\t      stem_down_extension: -Flow.STEM_HEIGHT,\n\t      gracenote_stem_up_extension: -Flow.STEM_HEIGHT,\n\t      gracenote_stem_down_extension: -Flow.STEM_HEIGHT,\n\t      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,\n\t      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,\n\t      dot_shiftY: 0,\n\t      line_above: 0,\n\t      line_below: 0\n\t    },\n\t    type: {\n\t      'n': { // Breve note\n\t        code_head: 'v53'\n\t      },\n\t      'h': { // Breve note harmonic\n\t        code_head: 'v59'\n\t      },\n\t      'm': { // Breve note muted -\n\t        code_head: 'vf',\n\t        stem_offset: 0\n\t      },\n\t      'r': { // Breve rest\n\t        code_head: 'v31',\n\t        rest: true,\n\t        position: 'B/5',\n\t        dot_shiftY: 0.5\n\t      },\n\t      's': { // Breve note slash -\n\t        // Drawn with canvas primitives\n\t        getWidth: function getWidth() {\n\t          return Flow.SLASH_NOTEHEAD_WIDTH;\n\t        },\n\t        position: 'B/4'\n\t      }\n\t    }\n\t  },\n\t  '1': {\n\t    common: {\n\t      getWidth: function getWidth() {\n\t        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];\n\t\n\t        return new _glyph.Glyph(this.code_head || 'v1d', scale).getMetrics().width;\n\t      },\n\t\n\t      stem: false,\n\t      stem_offset: 0,\n\t      flag: false,\n\t      stem_up_extension: -Flow.STEM_HEIGHT,\n\t      stem_down_extension: -Flow.STEM_HEIGHT,\n\t      gracenote_stem_up_extension: -Flow.STEM_HEIGHT,\n\t      gracenote_stem_down_extension: -Flow.STEM_HEIGHT,\n\t      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,\n\t      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,\n\t      dot_shiftY: 0,\n\t      line_above: 0,\n\t      line_below: 0\n\t    },\n\t    type: {\n\t      'n': { // Whole note\n\t        code_head: 'v1d'\n\t      },\n\t      'h': { // Whole note harmonic\n\t        code_head: 'v46'\n\t      },\n\t      'm': { // Whole note muted\n\t        code_head: 'v92',\n\t        stem_offset: -3\n\t      },\n\t      'r': { // Whole rest\n\t        code_head: 'v5c',\n\t        rest: true,\n\t        position: 'D/5',\n\t        dot_shiftY: 0.5\n\t      },\n\t      's': { // Whole note slash\n\t        // Drawn with canvas primitives\n\t        getWidth: function getWidth() {\n\t          return Flow.SLASH_NOTEHEAD_WIDTH;\n\t        },\n\t        position: 'B/4'\n\t      }\n\t    }\n\t  },\n\t  '2': {\n\t    common: {\n\t      getWidth: function getWidth() {\n\t        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];\n\t\n\t        return new _glyph.Glyph(this.code_head || 'v81', scale).getMetrics().width;\n\t      },\n\t\n\t      stem: true,\n\t      stem_offset: 0,\n\t      flag: false,\n\t      stem_up_extension: 0,\n\t      stem_down_extension: 0,\n\t      gracenote_stem_up_extension: -14,\n\t      gracenote_stem_down_extension: -14,\n\t      tabnote_stem_up_extension: 0,\n\t      tabnote_stem_down_extension: 0,\n\t      dot_shiftY: 0,\n\t      line_above: 0,\n\t      line_below: 0\n\t    },\n\t    type: {\n\t      'n': { // Half note\n\t        code_head: 'v81'\n\t      },\n\t      'h': { // Half note harmonic\n\t        code_head: 'v2d'\n\t      },\n\t      'm': { // Half note muted\n\t        code_head: 'v95',\n\t        stem_offset: -3\n\t      },\n\t      'r': { // Half rest\n\t        code_head: 'vc',\n\t        stem: false,\n\t        rest: true,\n\t        position: 'B/4',\n\t        dot_shiftY: -0.5\n\t      },\n\t      's': { // Half note slash\n\t        // Drawn with canvas primitives\n\t        getWidth: function getWidth() {\n\t          return Flow.SLASH_NOTEHEAD_WIDTH;\n\t        },\n\t        position: 'B/4'\n\t      }\n\t    }\n\t  },\n\t  '4': {\n\t    common: {\n\t      getWidth: function getWidth() {\n\t        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];\n\t\n\t        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;\n\t      },\n\t\n\t      stem: true,\n\t      stem_offset: 0,\n\t      flag: false,\n\t      stem_up_extension: 0,\n\t      stem_down_extension: 0,\n\t      gracenote_stem_up_extension: -14,\n\t      gracenote_stem_down_extension: -14,\n\t      tabnote_stem_up_extension: 0,\n\t      tabnote_stem_down_extension: 0,\n\t      dot_shiftY: 0,\n\t      line_above: 0,\n\t      line_below: 0\n\t    },\n\t    type: {\n\t      'n': { // Quarter note\n\t        code_head: 'vb'\n\t      },\n\t      'h': { // Quarter harmonic\n\t        code_head: 'v22'\n\t      },\n\t      'm': { // Quarter muted\n\t        code_head: 'v3e',\n\t        stem_offset: -3\n\t      },\n\t      'r': { // Quarter rest\n\t        code_head: 'v7c',\n\t        stem: false,\n\t        rest: true,\n\t        position: 'B/4',\n\t        dot_shiftY: -0.5,\n\t        line_above: 1.5,\n\t        line_below: 1.5\n\t      },\n\t      's': { // Quarter slash\n\t        // Drawn with canvas primitives\n\t        getWidth: function getWidth() {\n\t          return Flow.SLASH_NOTEHEAD_WIDTH;\n\t        },\n\t        position: 'B/4'\n\t      }\n\t    }\n\t  },\n\t  '8': {\n\t    common: {\n\t      getWidth: function getWidth() {\n\t        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];\n\t\n\t        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;\n\t      },\n\t\n\t      stem: true,\n\t      stem_offset: 0,\n\t      flag: true,\n\t      beam_count: 1,\n\t      code_flag_upstem: 'v54',\n\t      code_flag_downstem: 'v9a',\n\t      stem_up_extension: 0,\n\t      stem_down_extension: 0,\n\t      gracenote_stem_up_extension: -14,\n\t      gracenote_stem_down_extension: -14,\n\t      tabnote_stem_up_extension: 0,\n\t      tabnote_stem_down_extension: 0,\n\t      dot_shiftY: 0,\n\t      line_above: 0,\n\t      line_below: 0\n\t    },\n\t    type: {\n\t      'n': { // Eighth note\n\t        code_head: 'vb'\n\t      },\n\t      'h': { // Eighth note harmonic\n\t        code_head: 'v22'\n\t      },\n\t      'm': { // Eighth note muted\n\t        code_head: 'v3e'\n\t      },\n\t      'r': { // Eighth rest\n\t        code_head: 'va5',\n\t        stem: false,\n\t        flag: false,\n\t        rest: true,\n\t        position: 'B/4',\n\t        dot_shiftY: -0.5,\n\t        line_above: 1.0,\n\t        line_below: 1.0\n\t      },\n\t      's': { // Eight slash\n\t        // Drawn with canvas primitives\n\t        getWidth: function getWidth() {\n\t          return Flow.SLASH_NOTEHEAD_WIDTH;\n\t        },\n\t        position: 'B/4'\n\t      }\n\t    }\n\t  },\n\t  '16': {\n\t    common: {\n\t      beam_count: 2,\n\t      getWidth: function getWidth() {\n\t        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];\n\t\n\t        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;\n\t      },\n\t\n\t      stem: true,\n\t      stem_offset: 0,\n\t      flag: true,\n\t      code_flag_upstem: 'v3f',\n\t      code_flag_downstem: 'v8f',\n\t      stem_up_extension: 0,\n\t      stem_down_extension: 0,\n\t      gracenote_stem_up_extension: -14,\n\t      gracenote_stem_down_extension: -14,\n\t      tabnote_stem_up_extension: 0,\n\t      tabnote_stem_down_extension: 0,\n\t      dot_shiftY: 0,\n\t      line_above: 0,\n\t      line_below: 0\n\t    },\n\t    type: {\n\t      'n': { // Sixteenth note\n\t        code_head: 'vb'\n\t      },\n\t      'h': { // Sixteenth note harmonic\n\t        code_head: 'v22'\n\t      },\n\t      'm': { // Sixteenth note muted\n\t        code_head: 'v3e'\n\t      },\n\t      'r': { // Sixteenth rest\n\t        code_head: 'v3c',\n\t        stem: false,\n\t        flag: false,\n\t        rest: true,\n\t        position: 'B/4',\n\t        dot_shiftY: -0.5,\n\t        line_above: 1.0,\n\t        line_below: 2.0\n\t      },\n\t      's': { // Sixteenth slash\n\t        // Drawn with canvas primitives\n\t        getWidth: function getWidth() {\n\t          return Flow.SLASH_NOTEHEAD_WIDTH;\n\t        },\n\t        position: 'B/4'\n\t      }\n\t    }\n\t  },\n\t  '32': {\n\t    common: {\n\t      beam_count: 3,\n\t      getWidth: function getWidth() {\n\t        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];\n\t\n\t        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;\n\t      },\n\t\n\t      stem: true,\n\t      stem_offset: 0,\n\t      flag: true,\n\t      code_flag_upstem: 'v47',\n\t      code_flag_downstem: 'v2a',\n\t      stem_up_extension: 9,\n\t      stem_down_extension: 9,\n\t      gracenote_stem_up_extension: -12,\n\t      gracenote_stem_down_extension: -12,\n\t      tabnote_stem_up_extension: 8,\n\t      tabnote_stem_down_extension: 5,\n\t      dot_shiftY: 0,\n\t      line_above: 0,\n\t      line_below: 0\n\t    },\n\t    type: {\n\t      'n': { // Thirty-second note\n\t        code_head: 'vb'\n\t      },\n\t      'h': { // Thirty-second harmonic\n\t        code_head: 'v22'\n\t      },\n\t      'm': { // Thirty-second muted\n\t        code_head: 'v3e'\n\t      },\n\t      'r': { // Thirty-second rest\n\t        code_head: 'v55',\n\t        stem: false,\n\t        flag: false,\n\t        rest: true,\n\t        position: 'B/4',\n\t        dot_shiftY: -1.5,\n\t        line_above: 2.0,\n\t        line_below: 2.0\n\t      },\n\t      's': { // Thirty-second slash\n\t        // Drawn with canvas primitives\n\t        getWidth: function getWidth() {\n\t          return Flow.SLASH_NOTEHEAD_WIDTH;\n\t        },\n\t        position: 'B/4'\n\t      }\n\t    }\n\t  },\n\t  '64': {\n\t    common: {\n\t      beam_count: 4,\n\t      getWidth: function getWidth() {\n\t        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];\n\t\n\t        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;\n\t      },\n\t\n\t      stem: true,\n\t      stem_offset: 0,\n\t      flag: true,\n\t      code_flag_upstem: 'va9',\n\t      code_flag_downstem: 'v58',\n\t      stem_up_extension: 13,\n\t      stem_down_extension: 13,\n\t      gracenote_stem_up_extension: -10,\n\t      gracenote_stem_down_extension: -10,\n\t      tabnote_stem_up_extension: 12,\n\t      tabnote_stem_down_extension: 9,\n\t      dot_shiftY: 0,\n\t      line_above: 0,\n\t      line_below: 0\n\t    },\n\t    type: {\n\t      'n': { // Sixty-fourth note\n\t        code_head: 'vb'\n\t      },\n\t      'h': { // Sixty-fourth harmonic\n\t        code_head: 'v22'\n\t      },\n\t      'm': { // Sixty-fourth muted\n\t        code_head: 'v3e'\n\t      },\n\t      'r': { // Sixty-fourth rest\n\t        code_head: 'v38',\n\t        stem: false,\n\t        flag: false,\n\t        rest: true,\n\t        position: 'B/4',\n\t        dot_shiftY: -1.5,\n\t        line_above: 2.0,\n\t        line_below: 3.0\n\t      },\n\t      's': { // Sixty-fourth slash\n\t        // Drawn with canvas primitives\n\t        getWidth: function getWidth() {\n\t          return Flow.SLASH_NOTEHEAD_WIDTH;\n\t        },\n\t        position: 'B/4'\n\t      }\n\t    }\n\t  },\n\t  '128': {\n\t    common: {\n\t      beam_count: 5,\n\t      getWidth: function getWidth() {\n\t        var scale = arguments.length <= 0 || arguments[0] === undefined ? Flow.DEFAULT_NOTATION_FONT_SCALE : arguments[0];\n\t\n\t        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;\n\t      },\n\t\n\t      stem: true,\n\t      stem_offset: 0,\n\t      flag: true,\n\t      code_flag_upstem: 'v9b',\n\t      code_flag_downstem: 'v30',\n\t      stem_up_extension: 22,\n\t      stem_down_extension: 22,\n\t      gracenote_stem_up_extension: -8,\n\t      gracenote_stem_down_extension: -8,\n\t      tabnote_stem_up_extension: 21,\n\t      tabnote_stem_down_extension: 18,\n\t      dot_shiftY: 0,\n\t      line_above: 0,\n\t      line_below: 0\n\t    },\n\t    type: {\n\t      'n': { // Hundred-twenty-eight note\n\t        code_head: 'vb'\n\t      },\n\t      'h': { // Hundred-twenty-eight harmonic\n\t        code_head: 'v22'\n\t      },\n\t      'm': { // Hundred-twenty-eight muted\n\t        code_head: 'v3e'\n\t      },\n\t      'r': { // Hundred-twenty-eight rest\n\t        code_head: 'vaa',\n\t        stem: false,\n\t        flag: false,\n\t        rest: true,\n\t        position: 'B/4',\n\t        dot_shiftY: 1.5,\n\t        line_above: 3.0,\n\t        line_below: 3.0\n\t      },\n\t      's': { // Hundred-twenty-eight rest\n\t        // Drawn with canvas primitives\n\t        getWidth: function getWidth() {\n\t          return Flow.SLASH_NOTEHEAD_WIDTH;\n\t        },\n\t        position: 'B/4'\n\t      }\n\t    }\n\t  }\n\t};\n\t\n\t// Some defaults\n\tFlow.TIME4_4 = {\n\t  num_beats: 4,\n\t  beat_value: 4,\n\t  resolution: Flow.RESOLUTION\n\t};\n\texports.Flow = Flow;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Fraction = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// Fraction class that represents a rational number\n\t//\n\t// @author zz85\n\t// @author incompleteopus (modifications)\n\t\n\t/* eslint-disable no-underscore-dangle */\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Fraction = function () {\n\t  _createClass(Fraction, null, [{\n\t    key: 'GCD',\n\t\n\t\n\t    /**\n\t     * GCD: Find greatest common divisor using Euclidean algorithm\n\t     */\n\t    value: function GCD(a, b) {\n\t      if (typeof a !== 'number' || typeof b !== 'number') {\n\t        throw new _vex.Vex.RERR('BadArgument', 'Invalid numbers: ' + a + ', ' + b);\n\t      }\n\t\n\t      var t = void 0;\n\t\n\t      while (b !== 0) {\n\t        t = b;\n\t        b = a % b;\n\t        a = t;\n\t      }\n\t\n\t      return a;\n\t    }\n\t\n\t    /**\n\t     * LCM: Lowest common multiple\n\t     */\n\t\n\t  }, {\n\t    key: 'LCM',\n\t    value: function LCM(a, b) {\n\t      return a * b / Fraction.GCD(a, b);\n\t    }\n\t\n\t    /**\n\t     * LCMM: Lowest common multiple for more than two numbers\n\t     */\n\t\n\t  }, {\n\t    key: 'LCMM',\n\t    value: function LCMM(args) {\n\t      if (args.length === 0) {\n\t        return 0;\n\t      } else if (args.length === 1) {\n\t        return args[0];\n\t      } else if (args.length === 2) {\n\t        return Fraction.LCM(args[0], args[1]);\n\t      } else {\n\t        var arg0 = args[0];\n\t        args.shift();\n\t        return Fraction.LCM(arg0, Fraction.LCMM(args));\n\t      }\n\t    }\n\t  }]);\n\t\n\t  function Fraction(numerator, denominator) {\n\t    _classCallCheck(this, Fraction);\n\t\n\t    this.set(numerator, denominator);\n\t  }\n\t\n\t  _createClass(Fraction, [{\n\t    key: 'set',\n\t    value: function set(numerator, denominator) {\n\t      this.numerator = numerator === undefined ? 1 : numerator;\n\t      this.denominator = denominator === undefined ? 1 : denominator;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'value',\n\t    value: function value() {\n\t      return this.numerator / this.denominator;\n\t    }\n\t  }, {\n\t    key: 'simplify',\n\t    value: function simplify() {\n\t      var u = this.numerator;\n\t      var d = this.denominator;\n\t\n\t      var gcd = Fraction.GCD(u, d);\n\t      u /= gcd;\n\t      d /= gcd;\n\t\n\t      if (d < 0) {\n\t        d = -d;\n\t        u = -u;\n\t      }\n\t      return this.set(u, d);\n\t    }\n\t  }, {\n\t    key: 'add',\n\t    value: function add(param1, param2) {\n\t      var otherNumerator = void 0;\n\t      var otherDenominator = void 0;\n\t\n\t      if (param1 instanceof Fraction) {\n\t        otherNumerator = param1.numerator;\n\t        otherDenominator = param1.denominator;\n\t      } else {\n\t        if (param1 !== undefined) {\n\t          otherNumerator = param1;\n\t        } else {\n\t          otherNumerator = 0;\n\t        }\n\t\n\t        if (param2 !== undefined) {\n\t          otherDenominator = param2;\n\t        } else {\n\t          otherDenominator = 1;\n\t        }\n\t      }\n\t\n\t      var lcm = Fraction.LCM(this.denominator, otherDenominator);\n\t      var a = lcm / this.denominator;\n\t      var b = lcm / otherDenominator;\n\t\n\t      var u = this.numerator * a + otherNumerator * b;\n\t      return this.set(u, lcm);\n\t    }\n\t  }, {\n\t    key: 'subtract',\n\t    value: function subtract(param1, param2) {\n\t      var otherNumerator = void 0;\n\t      var otherDenominator = void 0;\n\t\n\t      if (param1 instanceof Fraction) {\n\t        otherNumerator = param1.numerator;\n\t        otherDenominator = param1.denominator;\n\t      } else {\n\t        if (param1 !== undefined) {\n\t          otherNumerator = param1;\n\t        } else {\n\t          otherNumerator = 0;\n\t        }\n\t\n\t        if (param2 !== undefined) {\n\t          otherDenominator = param2;\n\t        } else {\n\t          otherDenominator = 1;\n\t        }\n\t      }\n\t\n\t      var lcm = Fraction.LCM(this.denominator, otherDenominator);\n\t      var a = lcm / this.denominator;\n\t      var b = lcm / otherDenominator;\n\t\n\t      var u = this.numerator * a - otherNumerator * b;\n\t      return this.set(u, lcm);\n\t    }\n\t  }, {\n\t    key: 'multiply',\n\t    value: function multiply(param1, param2) {\n\t      var otherNumerator = void 0;\n\t      var otherDenominator = void 0;\n\t\n\t      if (param1 instanceof Fraction) {\n\t        otherNumerator = param1.numerator;\n\t        otherDenominator = param1.denominator;\n\t      } else {\n\t        if (param1 !== undefined) {\n\t          otherNumerator = param1;\n\t        } else {\n\t          otherNumerator = 1;\n\t        }\n\t\n\t        if (param2 !== undefined) {\n\t          otherDenominator = param2;\n\t        } else {\n\t          otherDenominator = 1;\n\t        }\n\t      }\n\t\n\t      return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n\t    }\n\t  }, {\n\t    key: 'divide',\n\t    value: function divide(param1, param2) {\n\t      var otherNumerator = void 0;\n\t      var otherDenominator = void 0;\n\t\n\t      if (param1 instanceof Fraction) {\n\t        otherNumerator = param1.numerator;\n\t        otherDenominator = param1.denominator;\n\t      } else {\n\t        if (param1 !== undefined) {\n\t          otherNumerator = param1;\n\t        } else {\n\t          otherNumerator = 1;\n\t        }\n\t\n\t        if (param2 !== undefined) {\n\t          otherDenominator = param2;\n\t        } else {\n\t          otherDenominator = 1;\n\t        }\n\t      }\n\t\n\t      return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n\t    }\n\t\n\t    // Simplifies both sides and checks if they are equal.\n\t\n\t  }, {\n\t    key: 'equals',\n\t    value: function equals(compare) {\n\t      var a = Fraction.__compareA.copy(compare).simplify();\n\t      var b = Fraction.__compareB.copy(this).simplify();\n\t\n\t      return a.numerator === b.numerator && a.denominator === b.denominator;\n\t    }\n\t\n\t    // Greater than operator.\n\t\n\t  }, {\n\t    key: 'greaterThan',\n\t    value: function greaterThan(compare) {\n\t      var a = Fraction.__compareB.copy(this);\n\t      a.subtract(compare);\n\t      return a.numerator > 0;\n\t    }\n\t\n\t    // Greater than or equals operator.\n\t\n\t  }, {\n\t    key: 'greaterThanEquals',\n\t    value: function greaterThanEquals(compare) {\n\t      var a = Fraction.__compareB.copy(this);\n\t      a.subtract(compare);\n\t      return a.numerator >= 0;\n\t    }\n\t\n\t    // Less than operator.\n\t\n\t  }, {\n\t    key: 'lessThan',\n\t    value: function lessThan(compare) {\n\t      return !this.greaterThanEquals(compare);\n\t    }\n\t\n\t    // Less than or equals operator.\n\t\n\t  }, {\n\t    key: 'lessThanEquals',\n\t    value: function lessThanEquals(compare) {\n\t      return !this.greaterThan(compare);\n\t    }\n\t\n\t    // Creates a new copy with this current values.\n\t\n\t  }, {\n\t    key: 'clone',\n\t    value: function clone() {\n\t      return new Fraction(this.numerator, this.denominator);\n\t    }\n\t\n\t    // Copies value of another Fraction into itself.\n\t\n\t  }, {\n\t    key: 'copy',\n\t    value: function copy(_copy) {\n\t      return this.set(_copy.numerator, _copy.denominator);\n\t    }\n\t\n\t    // Returns the integer component eg. (4/2) == 2\n\t\n\t  }, {\n\t    key: 'quotient',\n\t    value: function quotient() {\n\t      return Math.floor(this.numerator / this.denominator);\n\t    }\n\t\n\t    // Returns the fraction component when reduced to a mixed number\n\t\n\t  }, {\n\t    key: 'fraction',\n\t    value: function fraction() {\n\t      return this.numerator % this.denominator;\n\t    }\n\t\n\t    // Returns the absolute value\n\t\n\t  }, {\n\t    key: 'abs',\n\t    value: function abs() {\n\t      this.denominator = Math.abs(this.denominator);\n\t      this.numerator = Math.abs(this.numerator);\n\t      return this;\n\t    }\n\t\n\t    // Returns a raw string representation\n\t\n\t  }, {\n\t    key: 'toString',\n\t    value: function toString() {\n\t      return this.numerator + '/' + this.denominator;\n\t    }\n\t\n\t    // Returns a simplified string respresentation\n\t\n\t  }, {\n\t    key: 'toSimplifiedString',\n\t    value: function toSimplifiedString() {\n\t      return Fraction.__tmp.copy(this).simplify().toString();\n\t    }\n\t\n\t    // Returns string representation in mixed form\n\t\n\t  }, {\n\t    key: 'toMixedString',\n\t    value: function toMixedString() {\n\t      var s = '';\n\t      var q = this.quotient();\n\t      var f = Fraction.__tmp.copy(this);\n\t\n\t      if (q < 0) {\n\t        f.abs().fraction();\n\t      } else {\n\t        f.fraction();\n\t      }\n\t\n\t      if (q !== 0) {\n\t        s += q;\n\t\n\t        if (f.numerator !== 0) {\n\t          s += ' ' + f.toSimplifiedString();\n\t        }\n\t      } else {\n\t        if (f.numerator === 0) {\n\t          s = '0';\n\t        } else {\n\t          s = f.toSimplifiedString();\n\t        }\n\t      }\n\t\n\t      return s;\n\t    }\n\t\n\t    // Parses a fraction string\n\t\n\t  }, {\n\t    key: 'parse',\n\t    value: function parse(str) {\n\t      var i = str.split('/');\n\t      var n = parseInt(i[0], 10);\n\t      var d = i[1] ? parseInt(i[1], 10) : 1;\n\t\n\t      return this.set(n, d);\n\t    }\n\t  }]);\n\t\n\t  return Fraction;\n\t}();\n\t\n\t// Temporary cached objects\n\t\n\t\n\texports.Fraction = Fraction;\n\tFraction.__compareA = new Fraction();\n\tFraction.__compareB = new Fraction();\n\tFraction.__tmp = new Fraction();\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Glyph = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _boundingboxcomputation = __webpack_require__(7);\n\t\n\tvar _boundingbox = __webpack_require__(8);\n\t\n\tvar _vexflow_font = __webpack_require__(9);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t\n\tfunction processOutline(outline, originX, originY, scaleX, scaleY, outlineFns) {\n\t  var command = void 0;\n\t  var x = void 0;\n\t  var y = void 0;\n\t  var i = 0;\n\t\n\t  function nextX() {\n\t    return originX + outline[i++] * scaleX;\n\t  }\n\t  function nextY() {\n\t    return originY + outline[i++] * scaleY;\n\t  }\n\t\n\t  while (i < outline.length) {\n\t    command = outline[i++];\n\t    switch (command) {\n\t      case 'm':\n\t      case 'l':\n\t        outlineFns[command](nextX(), nextY());\n\t        break;\n\t      case 'q':\n\t        x = nextX();\n\t        y = nextY();\n\t        outlineFns.q(nextX(), nextY(), x, y);\n\t        break;\n\t      case 'b':\n\t        x = nextX();\n\t        y = nextY();\n\t        outlineFns.b(nextX(), nextY(), nextX(), nextY(), x, y);\n\t        break;\n\t      default:\n\t        break;\n\t    }\n\t  }\n\t}\n\t\n\tvar Glyph = exports.Glyph = function (_Element) {\n\t  _inherits(Glyph, _Element);\n\t\n\t  _createClass(Glyph, null, [{\n\t    key: 'loadMetrics',\n\t\n\t    /* Static methods used to implement loading / unloading of glyphs */\n\t    value: function loadMetrics(font, code, cache) {\n\t      var glyph = font.glyphs[code];\n\t      if (!glyph) {\n\t        throw new _vex.Vex.RERR('BadGlyph', 'Glyph ' + code + ' does not exist in font.');\n\t      }\n\t\n\t      var x_min = glyph.x_min;\n\t      var x_max = glyph.x_max;\n\t      var ha = glyph.ha;\n\t\n\t      var outline = void 0;\n\t\n\t      if (glyph.o) {\n\t        if (cache) {\n\t          if (glyph.cached_outline) {\n\t            outline = glyph.cached_outline;\n\t          } else {\n\t            outline = glyph.o.split(' ');\n\t            glyph.cached_outline = outline;\n\t          }\n\t        } else {\n\t          if (glyph.cached_outline) delete glyph.cached_outline;\n\t          outline = glyph.o.split(' ');\n\t        }\n\t\n\t        return {\n\t          x_min: x_min,\n\t          x_max: x_max,\n\t          ha: ha,\n\t          outline: outline\n\t        };\n\t      } else {\n\t        throw new _vex.Vex.RERR('BadGlyph', 'Glyph ' + code + ' has no outline defined.');\n\t      }\n\t    }\n\t\n\t    /**\n\t     * A quick and dirty static glyph renderer. Renders glyphs from the default\n\t     * font defined in Vex.Flow.Font.\n\t     *\n\t     * @param {!Object} ctx The canvas context.\n\t     * @param {number} x_pos X coordinate.\n\t     * @param {number} y_pos Y coordinate.\n\t     * @param {number} point The point size to use.\n\t     * @param {string} val The glyph code in Vex.Flow.Font.\n\t     * @param {boolean} nocache If set, disables caching of font outline.\n\t     */\n\t\n\t  }, {\n\t    key: 'renderGlyph',\n\t    value: function renderGlyph(ctx, x_pos, y_pos, point, val, nocache) {\n\t      var scale = point * 72.0 / (_vexflow_font.Font.resolution * 100.0);\n\t      var metrics = Glyph.loadMetrics(_vexflow_font.Font, val, !nocache);\n\t      Glyph.renderOutline(ctx, metrics.outline, scale, x_pos, y_pos);\n\t    }\n\t  }, {\n\t    key: 'renderOutline',\n\t    value: function renderOutline(ctx, outline, scale, x_pos, y_pos) {\n\t      ctx.beginPath();\n\t      ctx.moveTo(x_pos, y_pos);\n\t      processOutline(outline, x_pos, y_pos, scale, -scale, {\n\t        m: ctx.moveTo.bind(ctx),\n\t        l: ctx.lineTo.bind(ctx),\n\t        q: ctx.quadraticCurveTo.bind(ctx),\n\t        b: ctx.bezierCurveTo.bind(ctx)\n\t      });\n\t      ctx.fill();\n\t    }\n\t  }, {\n\t    key: 'getOutlineBoundingBox',\n\t    value: function getOutlineBoundingBox(outline, scale, x_pos, y_pos) {\n\t      var bboxComp = new _boundingboxcomputation.BoundingBoxComputation();\n\t\n\t      processOutline(outline, x_pos, y_pos, scale, -scale, {\n\t        m: bboxComp.addPoint.bind(bboxComp),\n\t        l: bboxComp.addPoint.bind(bboxComp),\n\t        q: bboxComp.addQuadraticCurve.bind(bboxComp),\n\t        b: bboxComp.addBezierCurve.bind(bboxComp)\n\t      });\n\t\n\t      return new _boundingbox.BoundingBox(bboxComp.x1, bboxComp.y1, bboxComp.width(), bboxComp.height());\n\t    }\n\t\n\t    /**\n\t     * @constructor\n\t     */\n\t\n\t  }]);\n\t\n\t  function Glyph(code, point, options) {\n\t    _classCallCheck(this, Glyph);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Glyph).call(this));\n\t\n\t    _this.setAttribute('type', 'Glyph');\n\t\n\t    _this.code = code;\n\t    _this.point = point;\n\t    _this.options = {\n\t      cache: true,\n\t      font: _vexflow_font.Font\n\t    };\n\t\n\t    _this.metrics = null;\n\t    _this.x_shift = 0;\n\t    _this.y_shift = 0;\n\t\n\t    _this.originShift = {\n\t      x: 0,\n\t      y: 0\n\t    };\n\t\n\t    if (options) {\n\t      _this.setOptions(options);\n\t    } else {\n\t      _this.reset();\n\t    }\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Glyph, [{\n\t    key: 'setOptions',\n\t    value: function setOptions(options) {\n\t      _vex.Vex.Merge(this.options, options);\n\t      this.reset();\n\t    }\n\t  }, {\n\t    key: 'setPoint',\n\t    value: function setPoint(point) {\n\t      this.point = point;return this;\n\t    }\n\t  }, {\n\t    key: 'setStave',\n\t    value: function setStave(stave) {\n\t      this.stave = stave;return this;\n\t    }\n\t  }, {\n\t    key: 'setXShift',\n\t    value: function setXShift(x_shift) {\n\t      this.x_shift = x_shift;return this;\n\t    }\n\t  }, {\n\t    key: 'setYShift',\n\t    value: function setYShift(y_shift) {\n\t      this.y_shift = y_shift;return this;\n\t    }\n\t  }, {\n\t    key: 'reset',\n\t    value: function reset() {\n\t      this.scale = this.point * 72 / (this.options.font.resolution * 100);\n\t      this.metrics = Glyph.loadMetrics(this.options.font, this.code, this.options.cache);\n\t      this.bbox = Glyph.getOutlineBoundingBox(this.metrics.outline, this.scale, 0, 0);\n\t    }\n\t  }, {\n\t    key: 'getMetrics',\n\t    value: function getMetrics() {\n\t      if (!this.metrics) {\n\t        throw new _vex.Vex.RuntimeError('BadGlyph', 'Glyph ' + this.code + ' is not initialized.');\n\t      }\n\t\n\t      return {\n\t        x_min: this.metrics.x_min * this.scale,\n\t        x_max: this.metrics.x_max * this.scale,\n\t        width: this.bbox.getW(),\n\t        height: this.bbox.getH()\n\t      };\n\t    }\n\t  }, {\n\t    key: 'setOriginX',\n\t    value: function setOriginX(x) {\n\t      var bbox = this.bbox;\n\t\n\t      var originX = Math.abs(bbox.getX() / bbox.getW());\n\t      var xShift = (x - originX) * bbox.getW();\n\t      this.originShift.x = -xShift;\n\t    }\n\t  }, {\n\t    key: 'setOriginY',\n\t    value: function setOriginY(y) {\n\t      var bbox = this.bbox;\n\t\n\t      var originY = Math.abs(bbox.getY() / bbox.getH());\n\t      var yShift = (y - originY) * bbox.getH();\n\t      this.originShift.y = -yShift;\n\t    }\n\t  }, {\n\t    key: 'setOrigin',\n\t    value: function setOrigin(x, y) {\n\t      this.setOriginX(x);\n\t      this.setOriginY(y);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render(ctx, x, y) {\n\t      if (!this.metrics) {\n\t        throw new _vex.Vex.RuntimeError('BadGlyph', 'Glyph ' + this.code + ' is not initialized.');\n\t      }\n\t\n\t      var outline = this.metrics.outline;\n\t      var scale = this.scale;\n\t\n\t      this.setRendered();\n\t      Glyph.renderOutline(ctx, outline, scale, x + this.originShift.x, y + this.originShift.y);\n\t    }\n\t  }, {\n\t    key: 'renderToStave',\n\t    value: function renderToStave(x) {\n\t      this.checkContext();\n\t\n\t      if (!this.metrics) {\n\t        throw new _vex.Vex.RuntimeError('BadGlyph', 'Glyph ' + this.code + ' is not initialized.');\n\t      }\n\t\n\t      if (!this.stave) {\n\t        throw new _vex.Vex.RuntimeError('GlyphError', 'No valid stave');\n\t      }\n\t\n\t      var outline = this.metrics.outline;\n\t      var scale = this.scale;\n\t\n\t      this.setRendered();\n\t      Glyph.renderOutline(this.context, outline, scale, x + this.x_shift, this.stave.getYForGlyphs() + this.y_shift);\n\t    }\n\t  }]);\n\n\t  return Glyph;\n\t}(_element.Element);\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Element = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// @author Mohit Cheppudira\n\t//\n\t// ## Description\n\t//\n\t// This file implements a generic base class for VexFlow, with implementations\n\t// of general functions and properties that can be inherited by all VexFlow elements.\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _registry = __webpack_require__(6);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Element = exports.Element = function () {\n\t  _createClass(Element, null, [{\n\t    key: 'newID',\n\t    value: function newID() {\n\t      return 'auto' + Element.ID++;\n\t    }\n\t  }]);\n\t\n\t  function Element() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var type = _ref.type;\n\t\n\t    _classCallCheck(this, Element);\n\t\n\t    this.attrs = {\n\t      id: Element.newID(),\n\t      el: null,\n\t      type: type || 'Base',\n\t      classes: {}\n\t    };\n\t\n\t    this.boundingBox = null;\n\t    this.context = null;\n\t    this.rendered = false;\n\t\n\t    // If a default registry exist, then register with it right away.\n\t    if (_registry.Registry.getDefaultRegistry()) {\n\t      _registry.Registry.getDefaultRegistry().register(this);\n\t    }\n\t  }\n\t\n\t  // An element can have multiple class labels.\n\t\n\t\n\t  _createClass(Element, [{\n\t    key: 'hasClass',\n\t    value: function hasClass(className) {\n\t      return this.attrs.classes[className] === true;\n\t    }\n\t  }, {\n\t    key: 'addClass',\n\t    value: function addClass(className) {\n\t      this.attrs.classes[className] = true;\n\t      if (this.registry) {\n\t        this.registry.onUpdate({\n\t          id: this.getAttribute('id'),\n\t          name: 'class',\n\t          value: className,\n\t          oldValue: null\n\t        });\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'removeClass',\n\t    value: function removeClass(className) {\n\t      delete this.attrs.classes[className];\n\t      if (this.registry) {\n\t        this.registry.onUpdate({\n\t          id: this.getAttribute('id'),\n\t          name: 'class',\n\t          value: null,\n\t          oldValue: className\n\t        });\n\t      }\n\t      return this;\n\t    }\n\t\n\t    // This is called by the registry after the element is registered.\n\t\n\t  }, {\n\t    key: 'onRegister',\n\t    value: function onRegister(registry) {\n\t      this.registry = registry;return this;\n\t    }\n\t  }, {\n\t    key: 'isRendered',\n\t    value: function isRendered() {\n\t      return this.rendered;\n\t    }\n\t  }, {\n\t    key: 'setRendered',\n\t    value: function setRendered() {\n\t      var rendered = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\t      this.rendered = rendered;return this;\n\t    }\n\t  }, {\n\t    key: 'getAttributes',\n\t    value: function getAttributes() {\n\t      return this.attrs;\n\t    }\n\t  }, {\n\t    key: 'getAttribute',\n\t    value: function getAttribute(name) {\n\t      return this.attrs[name];\n\t    }\n\t  }, {\n\t    key: 'setAttribute',\n\t    value: function setAttribute(name, value) {\n\t      var id = this.attrs.id;\n\t      var oldValue = this.attrs[name];\n\t      this.attrs[name] = value;\n\t      if (this.registry) {\n\t        // Register with old id to support id changes.\n\t        this.registry.onUpdate({ id: id, name: name, value: value, oldValue: oldValue });\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getContext',\n\t    value: function getContext() {\n\t      return this.context;\n\t    }\n\t  }, {\n\t    key: 'setContext',\n\t    value: function setContext(context) {\n\t      this.context = context;return this;\n\t    }\n\t  }, {\n\t    key: 'getBoundingBox',\n\t    value: function getBoundingBox() {\n\t      return this.boundingBox;\n\t    }\n\t\n\t    // Validators\n\t\n\t  }, {\n\t    key: 'checkContext',\n\t    value: function checkContext() {\n\t      if (!this.context) {\n\t        throw new _vex.Vex.RERR('NoContext', 'No rendering context attached to instance');\n\t      }\n\t      return this.context;\n\t    }\n\t  }]);\n\t\n\t  return Element;\n\t}();\n\t\n\tElement.ID = 1000;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Registry = exports.X = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// @author Mohit Cheppudira\n\t//\n\t// ## Description\n\t//\n\t// This file implements a registry for VexFlow elements. It allows users\n\t// to track, query, and manage some subset of generated elements, and\n\t// dynamically get and set attributes.\n\t//\n\t// There are two ways to regiser with a registry:\n\t//\n\t// 1) Explicitly call `element.register(registry)`, or,\n\t// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n\t//    elements will automatically register with it.\n\t//\n\t// Once an element is registered, selected attributes are tracked and indexed by\n\t// the registry. This allows fast look up of elements by attributes like id, type,\n\t// and class.\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar X = exports.X = _vex.Vex.MakeException('RegistryError');\n\t\n\tfunction setIndexValue(index, name, value, id, elem) {\n\t  if (!index[name][value]) index[name][value] = {};\n\t  index[name][value][id] = elem;\n\t}\n\t\n\tvar Registry = exports.Registry = function () {\n\t  _createClass(Registry, null, [{\n\t    key: 'INDEXES',\n\t    get: function get() {\n\t      return ['type'];\n\t    }\n\t  }]);\n\t\n\t  function Registry() {\n\t    _classCallCheck(this, Registry);\n\t\n\t    this.clear();\n\t  }\n\t\n\t  // If you call `enableDefaultRegistry`, any new elements will auto-register with\n\t  // the provided registry as soon as they're constructed.\n\t\n\t\n\t  _createClass(Registry, [{\n\t    key: 'clear',\n\t    value: function clear() {\n\t      // Indexes are represented as maps of maps (of maps). This allows\n\t      // for both multi-labeling (e.g., an element can have multiple classes)\n\t      // and efficient lookup.\n\t      this.index = {\n\t        id: {},\n\t        type: {},\n\t        class: {}\n\t      };\n\t      return this;\n\t    }\n\t\n\t    // Updates the indexes for element 'id'. If an element's attribute changes\n\t    // from A -> B, make sure to remove the element from A.\n\t\n\t  }, {\n\t    key: 'updateIndex',\n\t    value: function updateIndex(_ref) {\n\t      var id = _ref.id;\n\t      var name = _ref.name;\n\t      var value = _ref.value;\n\t      var oldValue = _ref.oldValue;\n\t\n\t      var elem = this.getElementById(id);\n\t      if (oldValue !== null && this.index[name][oldValue]) {\n\t        delete this.index[name][oldValue][id];\n\t      }\n\t      if (value !== null) {\n\t        setIndexValue(this.index, name, value, elem.getAttribute('id'), elem);\n\t      }\n\t    }\n\t\n\t    // Register element `elem` with this registry. This adds the element to its index and watches\n\t    // it for attribute changes.\n\t\n\t  }, {\n\t    key: 'register',\n\t    value: function register(elem, id) {\n\t      var _this = this;\n\t\n\t      id = id || elem.getAttribute('id');\n\t\n\t      if (!id) {\n\t        throw new X('Can\\'t add element without `id` attribute to registry', elem);\n\t      }\n\t\n\t      // Manually add id to index, then update other indexes.\n\t      elem.setAttribute('id', id);\n\t      setIndexValue(this.index, 'id', id, id, elem);\n\t      Registry.INDEXES.forEach(function (name) {\n\t        _this.updateIndex({ id: id, name: name, value: elem.getAttribute(name), oldValue: null });\n\t      });\n\t      elem.onRegister(this);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getElementById',\n\t    value: function getElementById(id) {\n\t      return this.index.id[id] ? this.index.id[id][id] : null;\n\t    }\n\t  }, {\n\t    key: 'getElementsByAttribute',\n\t    value: function getElementsByAttribute(attrName, value) {\n\t      var index = this.index[attrName];\n\t      if (index && index[value]) {\n\t        return Object.keys(index[value]).map(function (i) {\n\t          return index[value][i];\n\t        });\n\t      } else {\n\t        return [];\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getElementsByType',\n\t    value: function getElementsByType(type) {\n\t      return this.getElementsByAttribute('type', type);\n\t    }\n\t  }, {\n\t    key: 'getElementsByClass',\n\t    value: function getElementsByClass(className) {\n\t      return this.getElementsByAttribute('class', className);\n\t    }\n\t\n\t    // This is called by the element when an attribute value changes. If an indexed\n\t    // attribute changes, then update the local index.\n\t\n\t  }, {\n\t    key: 'onUpdate',\n\t    value: function onUpdate(_ref2) {\n\t      var id = _ref2.id;\n\t      var name = _ref2.name;\n\t      var value = _ref2.value;\n\t      var oldValue = _ref2.oldValue;\n\t\n\t      function includes(array, value) {\n\t        return array.filter(function (x) {\n\t          return x === value;\n\t        }).length > 0;\n\t      }\n\t\n\t      if (!includes(Registry.INDEXES.concat(['id', 'class']), name)) return this;\n\t      this.updateIndex({ id: id, name: name, value: value, oldValue: oldValue });\n\t      return this;\n\t    }\n\t  }], [{\n\t    key: 'enableDefaultRegistry',\n\t    value: function enableDefaultRegistry(registry) {\n\t      Registry.defaultRegistry = registry;\n\t    }\n\t  }, {\n\t    key: 'getDefaultRegistry',\n\t    value: function getDefaultRegistry() {\n\t      return Registry.defaultRegistry;\n\t    }\n\t  }, {\n\t    key: 'disableDefaultRegistry',\n\t    value: function disableDefaultRegistry() {\n\t      Registry.defaultRegistry = null;\n\t    }\n\t  }]);\n\t\n\t  return Registry;\n\t}();\n\t\n\tRegistry.defaultRegistry = null;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// ## Description\n\t//\n\t// Object which computes metrics for a bounding box by continuously\n\t// taking canvas path commands\n\t\n\t// Warning: This file is merely a crutch to get bounding box information without\n\t// explicit metadata. This is likely to get deprecated following SMuFL support.\n\t//\n\t// taken from: https://github.com/gabelerner/canvg/blob/860e418aca67b9a41e858a223d74d375793ec364/ca\n\t// nvg.js#L449\n\t\n\tvar BoundingBoxComputation = exports.BoundingBoxComputation = function () {\n\t  function BoundingBoxComputation(x1, y1, x2, y2) {\n\t    _classCallCheck(this, BoundingBoxComputation);\n\t\n\t    // pass in initial points if you want\n\t    this.x1 = Number.NaN;\n\t    this.y1 = Number.NaN;\n\t    this.x2 = Number.NaN;\n\t    this.y2 = Number.NaN;\n\t\n\t    this.addPoint(x1, y1);\n\t    this.addPoint(x2, y2);\n\t  }\n\t\n\t  _createClass(BoundingBoxComputation, [{\n\t    key: \"width\",\n\t    value: function width() {\n\t      return this.x2 - this.x1;\n\t    }\n\t  }, {\n\t    key: \"height\",\n\t    value: function height() {\n\t      return this.y2 - this.y1;\n\t    }\n\t  }, {\n\t    key: \"addPoint\",\n\t    value: function addPoint(x, y) {\n\t      if (x != null) {\n\t        if (isNaN(this.x1) || isNaN(this.x2)) {\n\t          this.x1 = x;\n\t          this.x2 = x;\n\t        }\n\t        if (x < this.x1) this.x1 = x;\n\t        if (x > this.x2) this.x2 = x;\n\t      }\n\t\n\t      if (y != null) {\n\t        if (isNaN(this.y1) || isNaN(this.y2)) {\n\t          this.y1 = y;\n\t          this.y2 = y;\n\t        }\n\t        if (y < this.y1) this.y1 = y;\n\t        if (y > this.y2) this.y2 = y;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"addX\",\n\t    value: function addX(x) {\n\t      this.addPoint(x, null);\n\t    }\n\t  }, {\n\t    key: \"addY\",\n\t    value: function addY(y) {\n\t      this.addPoint(null, y);\n\t    }\n\t  }, {\n\t    key: \"addQuadraticCurve\",\n\t    value: function addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {\n\t      var cp1x = p0x + 2 / 3 * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)\n\t      var cp1y = p0y + 2 / 3 * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)\n\t      var cp2x = cp1x + 1 / 3 * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)\n\t      var cp2y = cp1y + 1 / 3 * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)\n\t      this.addBezierCurve(p0x, p0y, cp1x, cp1y, cp2x, cp2y, p2x, p2y);\n\t    }\n\t  }, {\n\t    key: \"addBezierCurve\",\n\t    value: function addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {\n\t      // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n\t      var p0 = [p0x, p0y];\n\t      var p1 = [p1x, p1y];\n\t      var p2 = [p2x, p2y];\n\t      var p3 = [p3x, p3y];\n\t      var i = void 0;\n\t\n\t      this.addPoint(p0[0], p0[1]);\n\t      this.addPoint(p3[0], p3[1]);\n\t\n\t      var f = function f(t, i) {\n\t        return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];\n\t      };\n\t\n\t      for (i = 0; i <= 1; i++) {\n\t        var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n\t        var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n\t        var c = 3 * p1[i] - 3 * p0[i];\n\t\n\t        if (a === 0) {\n\t          if (b === 0) continue;\n\t          var t = -c / b;\n\t          if (0 < t && t < 1) {\n\t            if (i === 0) this.addX(f(t, i));\n\t            if (i === 1) this.addY(f(t, i));\n\t          }\n\t          continue;\n\t        }\n\t\n\t        var b2ac = Math.pow(b, 2) - 4 * c * a;\n\t        if (b2ac < 0) continue;\n\t        var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n\t        if (0 < t1 && t1 < 1) {\n\t          if (i === 0) this.addX(f(t1, i));\n\t          if (i === 1) this.addY(f(t1, i));\n\t        }\n\t        var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n\t        if (0 < t2 && t2 < 1) {\n\t          if (i === 0) this.addX(f(t2, i));\n\t          if (i === 1) this.addY(f(t2, i));\n\t        }\n\t      }\n\t    }\n\t  }]);\n\n\t  return BoundingBoxComputation;\n\t}();\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// Vex Music Notation\n\t// Mohit Muthanna <mohit@muthanna.com>\n\t//\n\t// Copyright Mohit Muthanna 2010\n\t\n\t// Bounding boxes for interactive notation\n\t\n\tvar BoundingBox = exports.BoundingBox = function () {\n\t  _createClass(BoundingBox, null, [{\n\t    key: \"copy\",\n\t    value: function copy(that) {\n\t      return new BoundingBox(that.x, that.y, that.w, that.h);\n\t    }\n\t  }]);\n\t\n\t  function BoundingBox(x, y, w, h) {\n\t    _classCallCheck(this, BoundingBox);\n\t\n\t    this.x = x;\n\t    this.y = y;\n\t    this.w = w;\n\t    this.h = h;\n\t  }\n\t\n\t  _createClass(BoundingBox, [{\n\t    key: \"getX\",\n\t    value: function getX() {\n\t      return this.x;\n\t    }\n\t  }, {\n\t    key: \"getY\",\n\t    value: function getY() {\n\t      return this.y;\n\t    }\n\t  }, {\n\t    key: \"getW\",\n\t    value: function getW() {\n\t      return this.w;\n\t    }\n\t  }, {\n\t    key: \"getH\",\n\t    value: function getH() {\n\t      return this.h;\n\t    }\n\t  }, {\n\t    key: \"setX\",\n\t    value: function setX(x) {\n\t      this.x = x;return this;\n\t    }\n\t  }, {\n\t    key: \"setY\",\n\t    value: function setY(y) {\n\t      this.y = y;return this;\n\t    }\n\t  }, {\n\t    key: \"setW\",\n\t    value: function setW(w) {\n\t      this.w = w;return this;\n\t    }\n\t  }, {\n\t    key: \"setH\",\n\t    value: function setH(h) {\n\t      this.h = h;return this;\n\t    }\n\t  }, {\n\t    key: \"move\",\n\t    value: function move(x, y) {\n\t      this.x += x;this.y += y;\n\t    }\n\t  }, {\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return BoundingBox.copy(this);\n\t    }\n\t\n\t    // Merge my box with given box. Creates a bigger bounding box unless\n\t    // the given box is contained in this one.\n\t\n\t  }, {\n\t    key: \"mergeWith\",\n\t    value: function mergeWith(boundingBox, ctx) {\n\t      var that = boundingBox;\n\t\n\t      var new_x = this.x < that.x ? this.x : that.x;\n\t      var new_y = this.y < that.y ? this.y : that.y;\n\t      var new_w = this.x + this.w < that.x + that.w ? that.x + that.w - this.x : this.x + this.w - Math.min(this.x, that.x);\n\t      var new_h = this.y + this.h < that.y + that.h ? that.y + that.h - this.y : this.y + this.h - Math.min(this.y, that.y);\n\t\n\t      this.x = new_x;\n\t      this.y = new_y;\n\t      this.w = new_w;\n\t      this.h = new_h;\n\t\n\t      if (ctx) this.draw(ctx);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctx, x, y) {\n\t      if (!x) x = 0;\n\t      if (!y) y = 0;\n\t      ctx.rect(this.x + x, this.y + y, this.w, this.h);\n\t      ctx.stroke();\n\t    }\n\t  }]);\n\n\t  return BoundingBox;\n\t}();\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});var Font=exports.Font={\"glyphs\":{\"v0\":{\"x_min\":0,\"x_max\":514.5,\"ha\":525,\"o\":\"m 236 648 b 246 648 238 648 242 648 b 288 646 261 648 283 648 b 472 513 364 634 428 587 b 514 347 502 464 514 413 b 462 163 514 272 499 217 b 257 44 409 83 333 44 b 50 163 181 44 103 83 b 0 347 14 217 0 272 b 40 513 0 413 12 464 b 236 648 87 591 155 638 m 277 614 b 253 616 273 616 261 616 b 242 616 247 616 243 616 b 170 499 193 609 181 589 b 159 348 163 446 159 398 b 166 222 159 308 161 266 b 201 91 174 138 183 106 b 257 76 215 81 235 76 b 311 91 277 76 299 81 b 347 222 330 106 338 138 b 353 348 352 266 353 308 b 344 499 353 398 351 446 b 277 614 333 587 322 606 m 257 -1 l 258 -1 l 255 -1 l 257 -1 m 257 673 l 258 673 l 255 673 l 257 673 \"},\"v1\":{\"x_min\":-1.359375,\"x_max\":344.359375,\"ha\":351,\"o\":\"m 126 637 l 129 638 l 198 638 l 266 638 l 269 635 b 274 631 272 634 273 632 l 277 627 l 277 395 b 279 156 277 230 277 161 b 329 88 281 123 295 106 b 344 69 341 81 344 79 b 337 55 344 62 343 59 l 333 54 l 197 54 l 61 54 l 58 55 b 50 69 53 59 50 62 b 65 88 50 79 53 81 b 80 97 72 91 74 93 b 117 156 103 113 112 129 b 117 345 117 161 117 222 l 117 528 l 100 503 l 38 406 b 14 383 24 384 23 383 b -1 398 5 383 -1 390 b 4 415 -1 403 1 409 b 16 437 5 416 10 426 l 72 539 l 100 596 b 121 632 119 631 119 631 b 126 637 122 634 125 635 m 171 -1 l 172 -1 l 170 -1 l 171 -1 m 171 673 l 172 673 l 170 673 l 171 673 \"},\"v2\":{\"x_min\":-1.359375,\"x_max\":458.6875,\"ha\":468,\"o\":\"m 197 648 b 216 648 201 648 208 648 b 258 646 232 648 253 648 b 419 546 333 637 393 599 b 432 489 428 528 432 509 b 356 342 432 440 405 384 b 235 278 322 313 288 295 b 69 170 166 256 107 217 b 69 169 69 170 69 169 b 69 169 69 169 69 169 b 74 173 69 169 72 170 b 209 222 112 204 163 222 b 310 195 247 222 274 215 b 371 179 332 184 352 179 b 396 181 379 179 387 179 b 428 202 409 184 423 194 b 442 212 431 209 436 212 b 458 197 450 212 458 206 b 441 148 458 190 449 165 b 299 44 409 84 353 44 b 288 45 295 44 292 44 b 250 61 274 45 268 49 b 122 99 212 86 164 99 b 73 91 104 99 88 97 b 28 63 53 84 34 72 b 14 54 25 56 20 54 b 1 62 9 54 4 56 l -1 65 l -1 79 b 0 99 -1 91 0 95 b 2 113 1 102 2 108 b 164 309 20 197 81 272 b 285 470 232 341 277 398 b 287 487 287 476 287 481 b 171 595 287 551 239 595 b 155 595 166 595 160 595 b 142 592 145 594 142 594 b 145 589 142 592 142 591 b 179 527 168 576 179 551 b 132 455 179 496 163 467 b 104 451 122 452 112 451 b 27 530 62 451 27 487 b 29 555 27 538 27 546 b 197 648 44 601 115 639 m 228 -1 l 230 -1 l 227 -1 l 228 -1 m 228 673 l 230 673 l 227 673 l 228 673 \"},\"v3\":{\"x_min\":-1.359375,\"x_max\":409.6875,\"ha\":418,\"o\":\"m 174 648 b 191 648 176 648 183 648 b 225 648 204 648 220 648 b 402 523 317 638 389 588 b 404 503 404 517 404 510 b 402 484 404 495 404 488 b 264 373 389 437 334 394 b 257 370 259 371 257 371 b 257 370 257 370 257 370 b 264 369 258 370 261 369 b 409 202 359 334 409 267 b 318 72 409 152 381 104 b 200 43 281 52 240 43 b 23 113 134 43 69 68 b 0 169 6 129 0 149 b 77 249 0 210 29 249 l 77 249 b 152 174 125 249 152 212 b 103 102 152 145 137 116 b 103 102 103 102 103 102 b 147 94 103 101 132 95 b 153 94 149 94 151 94 b 265 206 219 94 265 141 b 264 226 265 213 265 219 b 147 355 253 299 204 353 b 126 371 133 356 126 362 b 147 388 126 383 132 388 b 254 474 196 391 238 424 b 259 502 258 484 259 494 b 182 592 259 544 228 582 b 156 595 175 595 166 595 b 115 592 142 595 129 594 l 111 591 l 115 588 b 152 524 141 574 152 549 b 92 449 152 491 130 458 b 76 448 87 448 81 448 b -1 530 32 448 -1 488 b 20 581 -1 548 5 566 b 174 648 55 619 108 641 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 \"},\"v4\":{\"x_min\":0,\"x_max\":468.21875,\"ha\":478,\"o\":\"m 174 637 b 232 638 175 638 189 638 b 277 638 245 638 259 638 l 378 638 l 381 635 b 389 623 386 632 389 627 b 382 609 389 617 386 613 b 366 589 381 606 372 598 l 313 528 l 245 451 l 209 410 l 155 348 l 84 267 b 59 240 72 252 59 240 b 59 240 59 240 59 240 b 151 238 59 238 68 238 l 242 238 l 242 303 b 243 371 242 369 242 370 b 289 426 245 374 254 385 l 303 441 l 317 456 l 338 483 l 360 506 l 371 520 b 386 527 375 526 381 527 b 400 519 392 527 397 524 b 401 440 401 516 401 514 b 401 377 401 423 401 402 l 401 238 l 426 238 b 453 237 449 238 450 238 b 465 217 461 234 465 226 b 460 202 465 212 464 206 b 426 197 454 197 453 197 l 401 197 l 401 180 b 451 88 402 129 412 109 b 468 69 465 81 468 79 b 461 55 468 62 466 59 l 458 54 l 321 54 l 185 54 l 182 55 b 175 69 176 59 175 62 b 191 88 175 79 176 81 b 240 180 230 109 240 129 l 240 197 l 125 197 b 73 195 104 195 87 195 b 8 197 10 195 9 197 b 0 212 2 199 0 205 b 0 212 0 212 0 212 b 20 242 0 219 0 219 b 163 610 104 344 163 492 b 174 637 163 628 166 634 m 234 -1 l 235 -1 l 232 -1 l 234 -1 m 234 673 l 235 673 l 232 673 l 234 673 \"},\"v5\":{\"x_min\":0,\"x_max\":409.6875,\"ha\":418,\"o\":\"m 47 637 b 53 638 49 638 50 638 b 69 634 55 638 61 637 b 210 610 114 619 161 610 b 363 634 259 610 311 619 b 382 638 372 637 378 638 b 392 634 386 638 389 637 b 397 623 396 630 397 627 b 393 610 397 620 396 616 b 298 505 368 552 338 520 b 212 494 277 498 246 494 b 65 517 163 494 106 502 b 61 517 62 517 61 517 b 61 517 61 517 61 517 b 51 408 61 517 51 412 b 51 408 51 408 51 408 b 51 408 51 408 51 408 b 61 412 53 408 55 409 b 125 434 80 421 103 430 b 185 441 145 440 166 441 b 409 244 310 441 409 353 b 401 191 409 227 406 209 b 197 43 375 105 287 43 b 159 47 183 43 171 44 b 23 123 112 56 61 86 b 0 180 6 140 0 159 b 76 260 0 220 31 260 b 92 259 81 260 87 259 b 152 183 132 251 152 216 b 100 112 152 152 134 122 b 95 111 98 112 95 111 b 95 111 95 111 95 111 b 129 98 95 109 119 101 b 148 97 136 97 141 97 b 264 235 206 97 261 158 b 265 248 265 240 265 244 b 210 398 265 312 243 373 b 179 408 201 406 194 408 b 174 408 178 408 176 408 b 53 369 130 408 88 394 b 34 359 39 359 38 359 b 17 374 24 359 17 365 b 39 628 17 384 38 625 b 47 637 40 631 43 635 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 \"},\"v6\":{\"x_min\":0,\"x_max\":475.03125,\"ha\":485,\"o\":\"m 255 648 b 274 648 259 648 266 648 b 314 646 288 648 307 648 b 450 555 374 637 438 594 b 454 530 453 546 454 538 b 375 451 454 485 416 451 b 328 467 359 451 343 455 b 300 526 310 483 300 503 b 352 598 300 557 319 589 b 356 599 355 598 356 599 b 352 602 356 599 355 601 b 288 616 330 612 308 616 b 210 584 257 616 230 605 b 164 433 189 559 174 508 b 160 374 163 415 160 381 b 160 374 160 374 160 374 b 160 374 160 374 160 374 b 168 377 160 374 164 376 b 258 395 200 390 228 395 b 366 367 294 395 328 387 b 475 223 436 333 475 283 b 472 197 475 215 473 206 b 349 65 462 141 419 95 b 259 43 317 51 288 43 b 167 69 230 43 200 52 b 4 290 80 113 20 195 b 0 349 1 309 0 328 b 20 467 0 391 6 433 b 255 648 58 563 155 637 m 269 363 b 257 363 265 363 261 363 b 210 345 236 363 220 356 b 186 226 196 324 186 272 b 187 198 186 216 186 206 b 213 95 191 151 202 112 b 257 76 221 83 238 76 b 270 77 261 76 266 76 b 321 156 299 81 310 99 b 329 229 326 183 329 206 b 321 301 329 252 326 274 b 269 363 311 342 298 359 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 \"},\"v7\":{\"x_min\":0,\"x_max\":442.359375,\"ha\":451,\"o\":\"m 147 648 b 166 649 153 649 160 649 b 313 598 217 649 273 630 b 340 587 323 588 328 587 l 341 587 b 412 628 367 587 390 601 b 427 638 416 635 421 638 b 439 632 431 638 435 637 b 442 623 441 630 442 628 b 430 569 442 616 439 603 b 352 369 408 492 377 410 b 300 259 325 324 313 298 b 273 84 283 205 273 140 b 265 55 273 65 272 59 l 261 54 l 181 54 l 99 54 l 96 55 b 91 61 95 56 92 59 l 89 63 l 89 77 b 147 263 89 133 111 202 b 261 401 176 313 212 355 b 378 541 315 449 349 489 l 382 548 l 375 544 b 240 495 333 512 285 495 b 129 535 198 495 160 509 b 84 560 108 552 95 560 b 76 559 81 560 78 560 b 31 487 59 555 43 530 b 14 470 27 473 24 470 b 1 477 8 470 4 471 l 0 480 l 0 553 l 0 627 l 1 630 b 16 638 4 635 9 638 b 23 635 17 638 20 637 b 49 626 36 626 39 626 b 96 638 59 626 80 630 b 104 639 99 638 102 639 b 117 644 107 641 112 642 b 147 648 125 645 137 648 m 220 -1 l 221 -1 l 219 -1 l 220 -1 m 220 673 l 221 673 l 219 673 l 220 673 \"},\"v8\":{\"x_min\":0,\"x_max\":488.640625,\"ha\":499,\"o\":\"m 217 648 b 245 649 225 648 235 649 b 453 516 343 649 430 595 b 458 478 455 503 458 491 b 412 370 458 440 441 398 b 411 369 412 369 411 369 b 415 365 411 367 412 367 b 488 231 462 331 488 281 b 472 165 488 208 483 186 b 243 43 434 86 338 43 b 63 104 178 43 112 62 b 0 233 20 140 0 186 b 73 365 0 283 24 331 l 77 369 l 72 374 b 29 476 42 406 29 441 b 217 648 29 557 103 635 m 258 605 b 242 606 253 605 247 606 b 157 552 198 606 157 580 b 160 541 157 548 159 544 b 319 413 176 503 242 452 l 337 403 l 338 406 b 359 476 352 428 359 452 b 258 605 359 537 318 595 m 138 326 b 130 330 134 328 130 330 b 130 330 130 330 130 330 b 107 305 127 330 112 313 b 84 231 91 281 84 256 b 243 86 84 156 151 86 b 249 87 245 86 246 87 b 347 156 303 88 347 120 b 344 172 347 162 345 167 b 156 319 325 227 257 281 b 138 326 151 322 144 324 m 243 -1 l 245 -1 l 242 -1 l 243 -1 m 243 673 l 245 673 l 242 673 l 243 673 \"},\"v9\":{\"x_min\":0,\"x_max\":475.03125,\"ha\":485,\"o\":\"m 191 646 b 212 649 198 648 205 649 b 255 644 227 649 243 646 b 458 448 348 616 428 539 b 475 342 469 415 475 378 b 460 244 475 308 469 274 b 193 44 421 124 303 44 b 91 69 157 44 122 51 b 19 161 43 97 19 126 b 21 181 19 167 20 174 b 98 241 32 220 65 241 b 170 186 129 241 160 223 b 172 166 171 179 172 173 b 121 94 172 134 152 102 b 117 93 118 94 117 93 b 121 90 117 93 118 91 b 185 76 142 80 164 76 b 270 119 220 76 251 91 b 308 259 287 145 300 194 b 313 317 310 277 313 310 b 313 317 313 317 313 317 b 313 317 313 317 313 317 b 304 315 313 317 308 316 b 216 295 273 302 245 295 b 145 308 193 295 170 299 b 19 398 88 327 42 360 b 0 469 5 420 0 444 b 24 551 0 496 8 526 b 191 646 54 596 125 637 m 227 614 b 215 616 224 616 220 616 b 202 614 210 616 206 616 b 152 535 174 610 163 592 b 144 463 147 509 144 485 b 152 391 144 440 147 417 b 216 328 163 344 179 328 b 280 391 253 328 269 344 b 288 463 285 417 288 440 b 280 535 288 485 285 509 b 227 614 269 594 258 610 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 \"},\"va\":{\"x_min\":-149.71875,\"x_max\":148.359375,\"ha\":151,\"o\":\"m -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 \"},\"vb\":{\"x_min\":0,\"x_max\":428.75,\"ha\":438,\"o\":\"m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 \"},\"vc\":{\"x_min\":0,\"x_max\":447.8125,\"ha\":457,\"o\":\"m 0 86 l 0 173 l 223 173 l 447 173 l 447 86 l 447 0 l 223 0 l 0 0 l 0 86 \"},\"vd\":{\"x_min\":0,\"x_max\":343,\"ha\":350,\"o\":\"m 329 331 b 333 331 330 331 332 331 b 343 322 338 331 343 327 b 343 320 343 322 343 320 b 318 276 341 317 340 313 b 279 223 291 227 294 230 b 202 208 257 212 236 208 b 144 210 186 208 167 208 b 93 212 123 212 107 212 b 19 195 59 212 39 208 b 8 191 14 192 10 191 b 0 198 5 191 2 194 b 0 201 0 199 0 199 b 23 248 0 205 4 213 b 62 301 50 297 47 292 b 140 316 84 312 104 316 b 197 313 155 316 174 315 b 249 310 217 312 234 310 b 322 328 283 310 303 316 b 329 331 325 328 328 331 \"},\"ve\":{\"x_min\":-390.640625,\"x_max\":389.28125,\"ha\":397,\"o\":\"m -378 502 l -374 503 l 0 503 l 372 503 l 377 502 b 387 491 381 499 385 496 l 389 488 l 389 251 l 389 15 l 387 12 b 367 0 383 4 375 0 b 348 12 360 0 352 4 l 347 15 l 347 174 l 347 335 l 0 335 l -348 335 l -348 174 l -348 15 l -349 12 b -368 0 -353 4 -362 0 b -389 12 -377 0 -385 4 l -390 15 l -390 251 l -390 488 l -389 491 b -378 502 -386 496 -382 499 m -13 131 b -1 133 -9 133 -5 133 b 50 105 19 133 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -58 38 -62 55 b -13 131 -62 98 -44 124 \"},\"vf\":{\"x_min\":0,\"x_max\":370.21875,\"ha\":378,\"o\":\"m 0 0 l 0 277 l 61 277 l 122 277 l 122 0 l 122 -278 l 61 -278 l 0 -278 l 0 0 m 246 -1 l 246 277 l 308 277 l 370 277 l 370 -1 l 370 -278 l 308 -278 l 246 -278 l 246 -1 \"},\"v10\":{\"x_min\":0,\"x_max\":559.421875,\"ha\":571,\"o\":\"m 5 127 b 14 127 6 127 9 127 b 51 126 25 127 43 127 b 175 98 93 122 138 112 l 186 94 b 279 51 210 86 255 65 b 285 47 280 51 283 48 b 319 27 291 44 311 31 l 326 22 b 359 0 332 19 352 4 l 367 -6 b 371 -9 368 -6 370 -8 l 379 -15 b 387 -22 383 -18 386 -20 l 398 -30 l 411 -40 l 417 -47 l 427 -55 l 434 -61 b 441 -66 436 -62 439 -65 l 446 -72 l 453 -77 l 462 -87 b 558 -188 490 -113 549 -176 b 559 -195 559 -191 559 -194 b 548 -205 559 -201 555 -205 b 541 -204 547 -205 544 -205 b 534 -198 539 -201 536 -199 l 525 -191 b 481 -162 518 -187 490 -167 b 472 -155 477 -159 472 -156 b 468 -152 470 -155 469 -154 b 461 -149 466 -152 464 -151 b 428 -130 454 -145 441 -137 b 371 -99 413 -122 372 -99 b 363 -95 371 -99 367 -98 b 353 -91 357 -94 353 -91 b 348 -90 353 -91 352 -91 b 332 -81 343 -87 341 -86 b 27 -12 230 -37 127 -13 b 0 -5 4 -11 2 -11 b 0 58 0 -2 0 27 b 0 122 0 88 0 120 b 5 127 1 124 4 126 \"},\"v11\":{\"x_min\":-155.171875,\"x_max\":153.8125,\"ha\":157,\"o\":\"m -137 353 b -130 353 -136 353 -133 353 b -112 349 -125 353 -119 352 b -100 342 -110 347 -104 344 b 0 317 -69 326 -35 317 b 111 349 38 317 76 328 b 129 353 117 352 123 353 b 153 327 142 353 153 344 b 144 302 153 320 153 317 b 27 6 93 226 50 113 b 21 -13 24 -11 24 -11 b 0 -26 17 -22 8 -26 b -24 -12 -9 -26 -19 -22 b -28 5 -24 -9 -27 -2 b -145 302 -53 117 -95 224 b -155 327 -155 317 -155 320 b -137 353 -155 340 -148 349 \"},\"v12\":{\"x_min\":0,\"x_max\":699.609375,\"ha\":714,\"o\":\"m 0 0 l 0 563 l 65 563 l 132 563 l 132 0 l 132 -564 l 65 -564 l 0 -564 l 0 0 m 181 0 l 181 563 l 197 563 l 215 563 l 215 294 b 215 24 215 95 215 24 b 228 37 216 24 221 30 b 332 245 274 84 311 159 b 344 262 334 258 338 262 b 349 262 347 262 348 262 b 359 244 356 259 357 256 b 488 91 364 158 424 91 b 519 97 499 91 509 94 b 582 306 570 113 582 156 l 582 308 b 544 501 582 423 573 471 b 464 528 525 520 496 528 b 387 512 439 528 412 523 b 381 508 383 509 381 508 b 383 508 381 508 382 508 b 430 473 400 508 421 491 b 436 445 434 464 436 455 b 372 380 436 412 408 380 b 366 380 370 380 368 380 b 304 449 328 384 304 416 b 323 498 304 467 310 484 b 465 555 362 537 413 555 b 656 453 536 555 611 520 b 699 312 686 410 699 360 b 496 66 699 191 617 74 b 487 66 494 66 490 66 b 412 91 461 66 438 74 b 404 97 408 95 405 97 b 404 95 404 97 404 97 b 348 1 404 95 352 9 l 347 0 l 375 -49 b 405 -98 392 -76 404 -98 l 405 -98 b 415 -91 405 -97 409 -94 b 492 -68 438 -74 464 -68 b 598 -105 526 -68 564 -80 b 688 -238 641 -136 673 -184 b 699 -313 695 -263 699 -290 b 594 -516 699 -395 661 -469 b 465 -556 555 -542 510 -556 b 353 -523 426 -556 386 -545 b 304 -460 321 -501 307 -484 b 304 -451 304 -458 304 -453 b 372 -381 304 -410 337 -381 b 408 -392 383 -381 396 -384 b 436 -445 427 -405 436 -426 b 385 -508 436 -474 417 -503 l 379 -509 l 387 -513 b 464 -530 412 -524 438 -530 b 522 -517 485 -530 506 -526 b 579 -390 558 -501 574 -463 b 582 -299 582 -370 582 -334 b 581 -226 582 -272 582 -242 b 519 -98 575 -144 560 -112 b 488 -93 510 -95 499 -93 b 359 -245 424 -93 364 -158 b 345 -263 357 -258 355 -263 b 332 -244 337 -263 336 -260 b 220 -30 310 -155 268 -73 l 215 -24 l 215 -295 l 215 -564 l 197 -564 l 181 -564 l 181 0 \"},\"v13\":{\"x_min\":-1.359375,\"x_max\":455.96875,\"ha\":465,\"o\":\"m 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 \"},\"v14\":{\"x_min\":-1.359375,\"x_max\":349.8125,\"ha\":357,\"o\":\"m 230 287 b 243 287 234 287 238 287 b 266 285 251 287 261 287 b 349 180 319 274 349 227 b 307 95 349 149 336 117 b 208 63 280 74 245 63 b 84 106 166 63 122 79 b 76 113 80 111 77 113 b 76 113 76 113 76 113 b 132 -74 76 112 102 27 b 187 -272 179 -235 187 -263 b 186 -276 187 -273 186 -274 b 166 -288 183 -284 174 -288 b 148 -278 159 -288 152 -285 b -1 231 145 -273 -1 227 b 20 252 -1 244 9 252 b 36 244 25 252 32 249 b 40 234 38 242 39 238 b 167 112 63 174 112 127 l 174 111 l 170 113 b 142 181 152 133 142 158 b 230 287 142 230 176 277 \"},\"v15\":{\"x_min\":-209.609375,\"x_max\":208.25,\"ha\":213,\"o\":\"m -12 248 b -1 249 -9 249 -5 249 b 55 219 20 249 43 237 b 66 180 62 206 66 194 b 36 123 66 158 55 137 b 0 112 25 116 12 112 b -57 142 -21 112 -43 122 b -68 180 -63 154 -68 167 b -12 248 -68 212 -46 242 m -197 19 b 1 20 -194 19 -96 20 b 196 19 98 20 193 19 b 208 -1 204 15 208 6 b 202 -15 208 -5 206 -11 b 95 -22 197 -20 212 -22 b -1 -22 69 -22 38 -22 b -96 -22 -39 -22 -70 -22 b -204 -15 -213 -22 -198 -20 b -209 -1 -208 -11 -209 -5 b -197 19 -209 6 -205 15 \"},\"v16\":{\"x_min\":-155.171875,\"x_max\":153.8125,\"ha\":157,\"o\":\"m -137 353 b -129 355 -134 353 -132 355 b -102 333 -118 355 -111 348 b -8 129 -63 273 -32 205 b 0 106 -4 116 -1 106 b 6 129 0 106 2 116 b 100 333 31 205 62 273 b 114 349 107 344 108 347 b 127 353 118 352 123 353 b 153 327 141 353 153 344 b 144 302 153 320 153 317 b 29 18 96 227 54 123 l 25 -4 b -1 -26 21 -19 13 -26 b -27 -4 -14 -26 -23 -19 l -31 18 b -145 302 -55 123 -98 227 b -155 327 -155 317 -155 320 b -137 353 -155 340 -148 349 \"},\"v17\":{\"x_min\":0,\"x_max\":102.078125,\"ha\":104,\"o\":\"m 42 104 b 47 104 43 104 46 104 b 66 102 54 104 62 102 b 102 51 89 94 102 72 b 76 5 102 33 93 15 b 51 -1 68 1 59 -1 b 10 18 35 -1 20 5 b 0 51 2 27 0 38 b 42 104 0 76 16 99 \"},\"v18\":{\"x_min\":0,\"x_max\":323.9375,\"ha\":331,\"o\":\"m 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 \"},\"v19\":{\"x_min\":-10.890625,\"x_max\":366.140625,\"ha\":363,\"o\":\"m 98 172 b 110 173 102 173 106 173 b 210 120 142 173 172 156 b 281 66 235 95 264 74 b 294 63 285 63 289 63 b 341 87 307 63 322 72 b 356 97 348 94 352 97 b 363 93 359 97 362 95 b 366 87 364 90 366 88 b 355 72 366 83 363 79 b 268 2 317 31 288 9 b 243 -1 259 0 251 -1 b 144 52 212 -1 181 16 b 72 106 119 77 91 98 b 61 109 69 108 65 109 b 13 84 47 109 31 101 b 0 76 5 77 2 76 b -10 86 -6 76 -10 80 b -10 88 -10 87 -10 88 b 62 158 -9 95 43 145 b 98 172 73 165 87 170 \"},\"v1a\":{\"x_min\":-149.71875,\"x_max\":148.359375,\"ha\":151,\"o\":\"m -9 151 b -1 152 -6 151 -2 152 b 1 152 0 152 0 152 l 9 151 b 144 37 72 148 127 99 b 148 -62 148 19 148 15 b 148 -111 148 -76 148 -93 l 148 -216 l 147 -219 b 127 -231 144 -227 136 -231 b 108 -219 119 -231 112 -227 l 107 -216 l 107 -104 b 103 26 106 18 107 12 b -1 109 89 76 46 109 b -38 102 -13 109 -25 106 b -104 27 -70 90 -96 62 b -108 -101 -108 15 -108 22 l -108 -216 l -110 -219 b -129 -231 -114 -227 -122 -231 b -148 -219 -137 -231 -145 -227 l -149 -216 l -149 -99 b -149 -63 -149 -87 -149 -74 b -145 37 -149 26 -149 20 b -9 151 -130 101 -74 148 \"},\"v1b\":{\"x_min\":0,\"x_max\":559.421875,\"ha\":571,\"o\":\"m 544 204 b 548 204 545 204 547 204 b 559 194 555 204 559 199 b 559 190 559 192 559 191 b 530 156 559 188 556 184 b 462 86 510 134 481 104 b 453 76 458 81 454 77 l 446 70 l 441 65 b 434 59 439 63 436 61 l 427 54 b 409 37 426 51 416 44 b 392 23 398 29 394 26 b 387 19 389 22 387 20 b 379 13 386 19 383 16 l 371 8 l 367 5 l 359 -1 l 337 -16 b 285 -48 319 -29 298 -41 l 279 -52 b 186 -95 255 -66 210 -87 l 175 -99 b 23 -129 127 -117 68 -129 b 17 -129 20 -129 19 -129 b 1 -123 2 -129 2 -129 b 0 -49 0 -122 0 -83 b 0 4 0 -22 0 1 b 27 11 2 9 4 9 b 185 31 78 12 145 20 b 198 34 186 31 193 33 b 314 73 234 44 277 58 b 349 88 328 79 340 84 b 353 90 352 90 353 90 b 363 94 353 90 357 93 b 371 98 367 97 371 98 b 428 129 372 98 413 120 b 461 148 441 136 454 144 b 468 151 464 149 466 151 b 472 154 469 152 470 154 b 481 161 473 155 477 158 b 525 190 490 166 518 186 l 534 197 b 540 201 536 198 539 199 b 544 204 541 202 544 204 \"},\"v1c\":{\"x_min\":0,\"x_max\":326.671875,\"ha\":333,\"o\":\"m 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -105 b 239 -262 239 -167 239 -219 b 238 -448 239 -416 239 -445 b 238 -451 238 -449 238 -451 b 238 -452 238 -452 238 -452 b 243 -451 239 -452 240 -451 b 298 -431 262 -448 280 -441 b 308 -427 300 -428 304 -427 b 326 -446 318 -427 326 -435 l 326 -446 l 326 -452 l 321 -462 b 238 -674 283 -520 253 -599 b 219 -695 234 -689 230 -695 b 197 -670 206 -695 202 -689 b 115 -462 179 -591 152 -520 l 110 -452 l 110 -446 l 110 -446 b 127 -427 110 -435 118 -427 b 138 -431 130 -427 134 -428 b 193 -451 155 -441 172 -448 b 198 -452 196 -452 197 -452 b 198 -451 198 -452 198 -452 b 198 -448 198 -451 198 -449 b 197 -323 197 -445 197 -426 b 197 -201 197 -247 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 \"},\"v1d\":{\"x_min\":0,\"x_max\":619.3125,\"ha\":632,\"o\":\"m 274 184 b 307 186 285 186 296 186 b 616 22 465 186 597 116 b 619 -1 617 13 619 5 b 308 -187 619 -104 483 -187 b 0 -1 133 -187 0 -102 b 5 36 0 11 1 23 b 274 184 29 115 141 176 m 289 161 b 272 162 284 162 277 162 b 171 41 209 162 171 108 b 205 -73 171 5 182 -34 b 345 -163 243 -133 298 -163 b 436 -98 385 -163 420 -142 b 446 -43 443 -80 446 -62 b 289 161 446 47 377 147 \"},\"v1e\":{\"x_min\":-402.890625,\"x_max\":401.53125,\"ha\":410,\"o\":\"m -219 173 b -213 174 -217 174 -215 174 b -202 173 -209 174 -205 173 b -114 86 -200 172 -179 151 b -28 0 -66 37 -28 0 b 40 84 -28 0 2 37 b 117 174 111 173 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b -42 -86 27 0 -4 -38 b -118 -174 -112 -174 -111 -173 b -123 -176 -119 -176 -121 -176 b -133 -174 -126 -176 -130 -174 b -296 -12 -136 -173 -172 -137 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 172 -398 -43 -228 167 b -219 173 -223 172 -220 173 \"},\"v1f\":{\"x_min\":-340.28125,\"x_max\":338.921875,\"ha\":346,\"o\":\"m -32 520 b -29 521 -31 520 -31 521 b -23 519 -27 521 -24 520 b -20 513 -21 517 -20 516 b -21 506 -20 512 -20 509 b -31 474 -23 502 -27 488 l -53 402 l -66 352 l -68 349 l -57 349 b -32 351 -51 349 -40 351 b 123 370 19 352 74 359 b 137 371 127 370 133 371 b 170 356 152 371 164 366 b 171 355 170 355 170 355 b 216 366 174 355 183 358 b 280 378 268 377 266 377 b 287 378 283 378 284 378 b 332 349 307 378 322 369 b 338 319 336 341 338 330 b 332 301 338 310 336 302 b 242 280 329 299 246 280 b 242 280 242 280 242 280 b 235 288 236 280 235 283 b 235 292 235 290 235 291 b 236 302 236 297 236 299 b 220 337 236 316 230 330 l 216 340 l 210 335 b 159 276 189 322 172 301 b 118 149 152 265 156 274 b 81 34 84 36 85 36 b -8 13 78 33 -4 13 b -8 13 -8 13 -8 13 b -14 20 -12 15 -14 15 b -8 44 -14 24 -12 31 b -2 66 -5 55 -2 65 b -2 66 -2 66 -2 66 l -2 66 b -43 41 -2 66 -21 55 b -114 4 -98 8 -98 8 b -144 0 -123 0 -134 0 b -242 99 -197 0 -242 43 b -242 109 -242 102 -242 105 b -212 219 -240 122 -242 116 b -185 312 -197 270 -185 312 l -185 312 b -189 312 -185 312 -186 312 b -259 312 -200 312 -227 312 b -321 310 -291 312 -310 310 b -334 312 -330 310 -334 312 b -340 319 -338 313 -340 316 b -336 326 -340 322 -338 324 b -291 337 -334 326 -314 331 l -247 347 l -210 348 b -172 348 -190 348 -172 348 b -168 363 -172 348 -171 355 b -145 442 -151 424 -145 441 b -133 452 -144 444 -140 446 l -77 489 b -32 520 -53 506 -32 520 m 57 334 b 53 335 55 335 54 335 b 44 334 50 335 49 335 b -70 316 8 326 -28 320 b -78 309 -78 316 -78 316 b -108 202 -80 305 -88 274 b -141 81 -136 112 -141 93 b -140 74 -141 79 -141 77 b -117 49 -137 59 -127 49 b -107 52 -114 49 -110 51 b 16 127 -106 54 14 126 b 42 217 16 127 42 215 b 49 241 42 222 44 229 b 73 320 53 251 73 317 b 57 334 73 327 65 333 \"},\"v20\":{\"x_min\":-571.671875,\"x_max\":570.3125,\"ha\":582,\"o\":\"m -559 351 b -551 352 -556 352 -553 352 b -530 338 -543 352 -533 348 b -529 169 -530 337 -529 291 l -529 1 l -507 27 l -441 112 b -382 174 -394 169 -390 174 b -378 174 -381 174 -379 174 b -281 86 -370 174 -375 179 b -196 0 -234 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 279 172 b 289 174 285 174 288 174 b 300 173 294 174 298 173 b 462 11 303 172 340 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 375 -176 371 -176 b 280 -87 367 -173 347 -152 b 194 0 234 -38 194 0 b 126 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 44 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -140 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -288 -176 b -300 -174 -294 -176 -298 -174 b -464 -11 -303 -173 -374 -102 l -476 0 l -506 -37 b -539 -76 -528 -65 -537 -74 b -551 -80 -543 -79 -547 -80 b -570 -68 -558 -80 -566 -76 l -571 -65 l -571 136 b -570 340 -571 331 -571 337 b -559 351 -568 344 -564 348 \"},\"v21\":{\"x_min\":-149.71875,\"x_max\":148.359375,\"ha\":151,\"o\":\"m -138 229 b -129 230 -136 230 -133 230 b -110 217 -121 230 -114 226 l -108 215 l -108 99 b -104 -29 -108 -23 -108 -16 b -38 -104 -96 -63 -70 -91 b -1 -111 -25 -108 -13 -111 b 103 -27 46 -111 89 -77 b 107 102 107 -13 106 -19 l 107 215 l 108 217 b 127 230 112 226 119 230 b 137 229 130 230 134 230 b 147 217 141 226 145 223 l 148 215 l 148 109 b 148 63 148 91 148 76 b 147 -24 148 -1 148 -13 b -1 -154 134 -101 70 -154 b -38 -148 -13 -154 -25 -151 b -145 -38 -91 -134 -133 -93 b -149 62 -149 -22 -149 -27 b -149 98 -149 73 -149 86 l -149 215 l -148 217 b -138 229 -147 223 -142 226 \"},\"v22\":{\"x_min\":0,\"x_max\":432.828125,\"ha\":442,\"o\":\"m 209 186 b 213 187 210 187 212 187 b 216 187 215 187 216 187 b 224 174 216 186 220 180 b 420 -1 269 105 338 43 b 432 -12 431 -8 432 -9 b 421 -23 432 -15 432 -16 b 228 -180 345 -70 264 -137 b 219 -188 221 -188 221 -188 l 219 -188 b 208 -177 215 -188 215 -188 b 10 1 163 -106 93 -44 b 0 11 0 6 0 8 b 10 22 0 13 0 15 b 202 179 87 69 167 136 b 209 186 206 183 209 186 \"},\"v23\":{\"x_min\":0,\"x_max\":133.390625,\"ha\":136,\"o\":\"m 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 \"},\"v24\":{\"x_min\":-627.46875,\"x_max\":626.109375,\"ha\":639,\"o\":\"m -69 173 b -53 174 -62 174 -58 174 b -42 172 -49 174 -44 174 b -28 149 -32 166 -28 158 b -42 126 -28 140 -32 131 b -231 73 -44 124 -29 129 l -371 34 l -469 8 b -499 0 -485 2 -499 0 b -469 -9 -499 -1 -485 -4 l -371 -36 l -231 -74 b -40 -129 -21 -131 -44 -124 b -28 -151 -32 -133 -28 -141 b -40 -172 -28 -159 -32 -167 b -54 -176 -44 -174 -49 -176 b -69 -174 -58 -176 -62 -176 l -288 -113 l -552 -41 b -616 -22 -619 -23 -611 -24 b -627 0 -623 -18 -627 -9 b -616 20 -627 8 -623 16 b -615 22 -615 22 -615 22 b -615 22 -615 22 -615 22 b -288 112 -615 23 -598 27 l -69 173 m 44 174 b 51 174 47 174 49 174 b 68 173 55 174 61 174 l 287 112 l 551 40 b 615 20 617 22 609 23 b 626 0 622 16 626 8 b 615 -22 626 -9 622 -18 b 613 -23 613 -23 613 -23 b 613 -23 613 -23 613 -23 b 287 -113 613 -24 597 -29 l 68 -174 b 53 -176 61 -176 57 -176 b 39 -172 47 -176 43 -174 b 27 -151 31 -167 27 -159 b 39 -129 27 -141 31 -133 b 230 -74 43 -124 20 -131 l 370 -36 l 468 -9 b 498 0 484 -4 498 -1 b 468 8 498 0 484 2 l 370 34 l 230 73 b 40 126 28 129 43 124 b 27 149 31 131 27 140 b 44 174 27 161 34 170 \"},\"v25\":{\"x_min\":0,\"x_max\":318.5,\"ha\":325,\"o\":\"m 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 \"},\"v26\":{\"x_min\":-21.78125,\"x_max\":483.1875,\"ha\":493,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 \"},\"v27\":{\"x_min\":0,\"x_max\":432.828125,\"ha\":442,\"o\":\"m 208 184 b 213 187 209 186 212 187 b 224 176 217 187 221 183 b 245 147 225 172 235 159 b 419 -1 288 90 347 38 b 431 -8 424 -4 431 -8 b 432 -12 432 -9 432 -11 b 430 -18 432 -13 432 -16 b 364 -61 424 -20 383 -47 b 225 -183 307 -102 250 -152 b 223 -187 224 -184 223 -187 b 220 -188 221 -188 220 -188 b 208 -176 216 -188 210 -184 b 187 -148 205 -173 197 -159 b 12 0 144 -90 84 -38 b 0 11 4 5 0 8 b 16 24 0 13 4 18 b 183 158 83 69 141 115 b 208 184 194 169 198 173 m 183 105 b 176 113 181 109 176 113 b 172 109 176 113 175 112 b 92 45 149 90 117 62 l 88 41 l 102 31 b 247 -105 160 -6 210 -55 l 254 -115 l 257 -112 l 269 -102 b 340 -45 287 -87 319 -61 l 344 -43 l 330 -33 b 183 105 272 6 221 54 \"},\"v28\":{\"x_min\":-73.5,\"x_max\":72.140625,\"ha\":74,\"o\":\"m -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 \"},\"v29\":{\"x_min\":-590.71875,\"x_max\":589.359375,\"ha\":601,\"o\":\"m 175 273 b 182 274 178 273 181 274 b 202 262 190 274 198 269 b 204 158 204 259 204 259 l 204 56 l 250 112 b 303 174 296 172 298 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 208 -6 213 0 210 -2 l 204 -12 l 204 -147 b 204 -210 204 -173 204 -194 b 198 -292 204 -297 204 -287 b 183 -299 194 -297 189 -299 b 164 -287 175 -299 167 -295 b 163 -174 163 -284 163 -284 l 161 -63 l 119 -117 b 65 -176 76 -170 73 -176 b 61 -176 63 -176 62 -176 b -35 -87 51 -174 57 -180 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -363 174 -374 170 -371 174 b -359 174 -362 174 -360 174 b -262 86 -351 174 -356 179 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 147 11 -13 172 35 123 l 157 -1 l 160 1 l 163 4 l 163 130 b 164 260 163 256 163 258 b 175 273 166 266 170 270 \"},\"v2a\":{\"x_min\":-21.78125,\"x_max\":366.140625,\"ha\":374,\"o\":\"m 276 1378 b 284 1379 279 1379 281 1379 b 306 1360 292 1379 298 1374 b 352 1247 326 1326 343 1286 b 366 1139 362 1213 366 1175 b 347 1009 366 1093 359 1049 l 344 1002 l 347 992 b 352 971 348 986 351 977 b 366 863 362 936 366 899 b 347 732 366 818 359 773 l 344 725 l 347 716 b 352 695 348 710 351 700 b 366 588 362 659 366 623 b 223 262 366 464 314 345 b 189 233 212 252 212 252 b 35 76 126 183 73 129 b -1 16 20 56 2 27 b -19 4 -4 9 -12 4 l -21 4 l -21 137 l -21 270 l -17 270 b 186 344 59 281 134 308 b 319 606 270 399 319 499 b 317 650 319 620 319 635 l 315 659 l 314 655 b 223 537 288 607 258 570 b 189 509 212 528 212 528 b 35 352 126 459 73 405 b -1 292 20 333 2 303 b -19 280 -4 285 -12 280 l -21 280 l -21 413 l -21 546 l -17 546 b 186 620 59 557 134 584 b 319 882 270 675 319 775 b 317 925 319 896 319 911 l 315 935 l 314 931 b 223 813 288 884 258 846 b 189 785 212 805 212 805 b 35 628 126 735 73 681 b -1 569 20 609 2 580 b -19 556 -4 562 -12 556 l -21 556 l -21 689 l -21 823 l -17 823 b 202 907 68 835 152 867 b 319 1157 280 968 319 1061 b 270 1338 319 1218 303 1281 b 262 1358 264 1349 262 1353 b 262 1364 262 1360 262 1363 b 276 1378 265 1371 269 1376 \"},\"v2b\":{\"x_min\":0,\"x_max\":386.5625,\"ha\":394,\"o\":\"m 0 0 l 0 347 l 193 347 l 386 347 l 386 0 l 386 -348 l 193 -348 l 0 -348 l 0 0 \"},\"v2c\":{\"x_min\":-597.53125,\"x_max\":596.171875,\"ha\":608,\"o\":\"m -413 173 b -408 174 -412 174 -409 174 b -397 173 -404 174 -400 173 b -308 86 -394 172 -374 151 b -223 0 -261 37 -223 0 b -153 84 -223 0 -191 37 b -77 174 -83 173 -84 172 b -72 174 -76 174 -74 174 b -62 173 -68 174 -63 173 b 25 86 -59 172 -39 151 b 112 0 73 37 111 0 b 181 84 112 0 144 37 b 257 174 251 173 251 172 b 262 174 258 174 261 174 b 273 173 266 174 270 173 b 436 9 276 172 347 101 l 447 -1 l 477 36 b 522 79 511 79 513 79 l 522 79 b 552 51 533 79 539 73 b 596 -112 582 6 596 -51 b 567 -262 596 -161 586 -213 b 539 -322 558 -287 544 -316 b 524 -327 534 -326 529 -327 b 504 -315 515 -327 507 -323 b 503 -308 503 -312 503 -309 b 511 -285 503 -302 504 -297 b 555 -113 540 -227 555 -169 b 544 -34 555 -86 551 -59 b 522 19 540 -16 530 8 l 521 22 l 481 -26 l 405 -122 b 353 -176 366 -172 362 -176 b 349 -176 352 -176 351 -176 b 253 -87 341 -176 347 -180 b 167 0 206 -38 167 0 b 99 -86 167 0 136 -38 b 21 -174 27 -174 28 -173 b 17 -176 20 -176 19 -176 b 6 -174 13 -176 9 -174 b -81 -87 4 -173 -14 -152 b -167 0 -129 -38 -167 0 b -236 -86 -167 0 -198 -38 b -313 -174 -307 -174 -306 -173 b -318 -176 -314 -176 -315 -176 b -328 -174 -321 -176 -325 -174 b -491 -12 -330 -173 -367 -137 l -503 0 l -530 -34 b -570 -77 -562 -73 -564 -76 b -577 -79 -571 -79 -574 -79 b -597 -58 -588 -79 -597 -69 b -596 -49 -597 -55 -597 -52 b -417 172 -593 -43 -423 167 b -413 173 -417 172 -415 173 \"},\"v2d\":{\"x_min\":0,\"x_max\":438.28125,\"ha\":447,\"o\":\"m 212 190 b 219 191 213 191 216 191 b 236 176 225 191 228 190 b 419 18 277 105 341 49 b 436 5 431 13 434 11 b 438 -1 438 4 438 1 b 424 -16 438 -8 432 -13 b 356 -49 409 -20 379 -36 b 234 -180 306 -83 258 -133 b 219 -192 230 -188 224 -192 b 200 -176 213 -192 206 -187 b 9 -15 157 -102 89 -45 b 0 0 2 -12 0 -6 b 16 18 0 9 2 12 b 200 176 93 48 159 104 b 212 190 205 186 208 188 m 239 113 b 236 117 238 116 238 117 b 230 108 235 117 234 115 b 92 -15 196 58 140 8 b 88 -18 91 -16 88 -18 b 92 -20 88 -18 91 -19 b 198 -116 130 -43 166 -74 b 200 -117 200 -117 200 -117 b 201 -117 200 -117 201 -117 b 264 -43 212 -98 242 -62 b 345 15 288 -19 321 4 b 348 18 347 16 348 16 b 344 20 348 18 347 19 b 239 113 307 41 266 79 \"},\"v2e\":{\"x_min\":-108.890625,\"x_max\":251.8125,\"ha\":257,\"o\":\"m -8 863 b 0 864 -5 864 -2 864 b 12 859 4 864 9 863 b 19 843 16 856 16 853 b 102 631 34 768 65 689 l 107 621 l 107 616 l 107 616 b 89 596 107 605 99 596 b 78 601 85 596 83 598 b 47 614 69 606 55 612 b 19 621 39 617 21 621 b 19 621 19 621 19 621 b 19 619 19 621 19 620 b 20 383 20 616 20 585 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 b -20 619 -21 563 -21 616 b -20 621 -20 620 -20 621 b -20 621 -20 621 -20 621 b -49 614 -23 621 -40 617 b -80 601 -57 612 -70 606 b -91 596 -84 598 -87 596 b -108 616 -100 596 -108 605 l -108 616 l -108 621 l -103 631 b -20 839 -66 689 -38 760 b -8 863 -17 856 -14 859 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 \"},\"v2f\":{\"x_min\":-1.359375,\"x_max\":680.5625,\"ha\":694,\"o\":\"m 597 1042 b 604 1042 600 1042 602 1042 b 642 1002 627 1042 642 1022 b 619 966 642 988 635 974 b 439 927 574 942 503 927 l 426 927 l 426 921 b 430 838 428 893 430 866 b 345 480 430 696 398 560 b 179 391 307 423 249 391 b 156 392 171 391 164 392 b 138 394 149 394 142 394 b 103 434 115 396 103 416 b 129 471 103 451 111 466 b 141 474 133 473 137 474 b 172 459 153 474 164 469 b 181 455 175 456 176 455 b 187 456 182 455 185 455 b 253 520 212 460 234 483 b 315 836 294 605 315 714 b 311 928 315 867 314 898 b 302 945 310 943 311 942 b 245 953 283 950 262 953 b 130 891 193 953 149 931 b 84 860 119 870 102 860 b 36 905 61 860 39 877 b 36 910 36 907 36 909 b 80 970 36 931 50 949 b 249 1017 125 1000 187 1017 b 322 1009 273 1017 299 1014 l 341 1003 b 436 991 372 995 406 991 b 577 1031 495 991 545 1004 b 597 1042 583 1038 590 1041 m 416 360 b 424 360 419 360 421 360 b 481 309 454 360 479 338 b 503 145 484 280 495 199 b 585 -185 525 16 555 -106 b 630 -245 596 -213 613 -237 l 634 -247 l 638 -245 b 647 -244 641 -245 645 -244 b 680 -278 666 -244 680 -262 b 664 -308 680 -290 675 -301 b 638 -312 658 -310 650 -312 b 613 -309 631 -312 623 -310 b 477 -201 555 -303 502 -260 b 417 -2 460 -159 434 -72 b 416 5 417 1 416 5 b 416 5 416 5 416 5 b 411 -5 415 5 413 0 b 359 -97 397 -33 377 -70 b 353 -106 355 -102 353 -105 b 359 -112 353 -108 355 -109 b 409 -130 375 -123 390 -129 b 426 -134 420 -130 421 -131 b 431 -147 428 -137 431 -141 b 420 -162 431 -152 427 -159 b 382 -169 409 -166 396 -169 b 323 -155 363 -169 341 -165 l 317 -152 l 314 -155 b 62 -303 240 -240 148 -295 b 36 -305 55 -305 44 -305 b 23 -303 29 -305 24 -305 b -1 -273 6 -299 -1 -287 b 31 -240 -1 -256 10 -240 b 36 -240 32 -240 34 -240 b 42 -241 38 -241 39 -241 b 134 -204 63 -241 99 -226 b 367 288 265 -115 357 81 b 375 330 368 313 370 320 b 416 360 383 347 400 358 m 360 -359 b 379 -359 363 -359 371 -359 b 424 -360 396 -359 416 -359 b 646 -502 536 -373 624 -430 b 649 -527 649 -510 649 -519 b 530 -673 649 -578 604 -635 l 521 -677 l 529 -681 b 653 -811 592 -714 637 -762 b 660 -853 658 -827 660 -839 b 645 -911 660 -873 656 -892 b 426 -1021 608 -981 519 -1021 b 283 -989 377 -1021 328 -1011 b 235 -949 249 -972 239 -964 b 234 -936 234 -946 234 -941 b 234 -928 234 -934 234 -931 l 235 -925 l 234 -927 l 225 -934 b 87 -982 186 -966 138 -982 b 80 -982 85 -982 83 -982 b 55 -981 70 -981 58 -981 b 17 -943 32 -981 17 -964 b 54 -904 17 -921 35 -904 b 78 -914 62 -904 72 -909 l 83 -918 l 88 -918 b 190 -831 122 -918 166 -881 b 269 -506 242 -727 269 -612 b 268 -462 269 -492 269 -477 b 266 -449 266 -458 266 -452 b 265 -444 266 -445 266 -444 b 257 -446 264 -444 261 -445 b 132 -545 196 -470 152 -505 b 88 -573 122 -563 104 -573 b 39 -523 63 -573 39 -553 b 63 -476 39 -505 44 -494 b 360 -359 136 -408 235 -369 m 419 -424 b 393 -423 411 -423 406 -423 l 375 -423 l 377 -426 b 379 -439 377 -427 378 -434 b 383 -510 382 -463 383 -487 b 314 -811 383 -609 360 -710 b 266 -893 296 -850 285 -870 b 264 -898 265 -896 264 -898 l 264 -898 b 264 -898 264 -898 264 -898 b 268 -898 264 -898 266 -898 b 273 -898 270 -898 272 -898 b 300 -909 283 -898 291 -900 b 426 -957 340 -941 385 -957 b 476 -949 443 -957 460 -954 b 547 -853 522 -931 547 -893 b 485 -745 547 -816 526 -775 b 397 -707 460 -727 432 -714 b 366 -675 375 -703 366 -692 b 396 -642 366 -657 377 -645 b 530 -557 455 -637 511 -601 b 536 -527 534 -548 536 -537 b 419 -424 536 -480 490 -437 \"},\"v30\":{\"x_min\":-21.78125,\"x_max\":367.5,\"ha\":375,\"o\":\"m 276 1900 b 284 1901 279 1900 281 1901 b 306 1883 291 1901 298 1896 b 367 1686 347 1825 367 1757 b 343 1558 367 1643 359 1600 l 338 1549 l 343 1537 b 367 1411 359 1497 367 1454 b 343 1282 367 1367 359 1324 l 338 1272 l 343 1261 b 367 1135 359 1221 367 1178 b 343 1007 367 1090 359 1047 l 338 996 l 343 985 b 367 859 359 945 367 902 b 343 731 367 814 359 771 l 338 720 l 343 709 b 367 582 359 667 367 626 b 289 362 367 503 340 426 b 239 312 276 345 259 330 b 29 77 152 237 76 152 b -1 18 14 54 2 30 b -19 4 -4 11 -12 4 l -21 4 l -21 133 l -20 260 l -13 262 b 98 299 17 269 62 284 b 111 305 103 302 110 305 b 167 334 123 310 156 327 b 319 595 264 391 319 491 b 313 659 319 616 318 638 b 310 667 311 664 311 667 b 307 663 310 667 308 666 b 240 588 289 637 269 614 b 16 331 141 505 62 413 b -1 294 8 316 1 302 b -19 280 -4 287 -12 280 l -21 280 l -21 408 l -20 537 l -13 538 b 98 576 17 545 62 560 b 111 581 103 578 110 581 b 167 610 123 587 156 603 b 319 871 264 667 319 767 b 313 935 319 892 318 913 b 310 942 311 941 311 942 b 307 939 310 942 308 941 b 240 864 289 913 269 889 b 16 607 141 781 62 689 b -1 570 8 592 1 578 b -19 556 -4 563 -12 556 l -21 556 l -21 684 l -20 813 l -13 814 b 98 852 17 821 62 836 b 111 857 103 855 110 857 b 167 886 123 863 156 880 b 319 1147 264 943 319 1043 b 313 1211 319 1168 318 1189 b 310 1218 311 1217 311 1218 b 307 1215 310 1218 308 1217 b 240 1140 289 1188 269 1165 b 16 884 141 1057 62 966 b -1 846 8 868 1 855 b -19 832 -4 839 -12 832 l -21 832 l -21 960 l -20 1089 l -13 1090 b 98 1128 17 1097 62 1111 b 111 1134 103 1131 110 1134 b 167 1163 123 1139 156 1156 b 319 1424 264 1220 319 1320 b 313 1486 319 1444 318 1465 b 310 1494 311 1493 311 1494 b 307 1492 310 1494 308 1493 b 240 1417 289 1464 269 1442 b 16 1160 141 1333 62 1242 b -1 1121 8 1145 1 1131 b -19 1109 -4 1115 -12 1109 l -21 1109 l -21 1236 l -20 1365 l -13 1367 b 98 1404 17 1374 62 1388 b 111 1410 103 1407 110 1410 b 250 1508 172 1437 215 1467 b 319 1701 296 1564 319 1633 b 270 1859 319 1757 303 1814 b 262 1882 265 1868 262 1875 b 276 1900 262 1890 266 1896 \"},\"v31\":{\"x_min\":0,\"x_max\":386.5625,\"ha\":394,\"o\":\"m 0 173 l 0 347 l 193 347 l 386 347 l 386 173 l 386 0 l 193 0 l 0 0 l 0 173 \"},\"v32\":{\"x_min\":-390.640625,\"x_max\":389.28125,\"ha\":397,\"o\":\"m -378 573 l -374 576 l 0 576 l 372 576 l 377 573 b 387 563 381 571 385 567 l 389 559 l 389 287 l 389 15 l 387 12 b 367 0 383 4 375 0 b 348 12 360 0 352 4 l 347 15 l 347 210 l 347 406 l 0 406 l -348 406 l -348 210 l -348 15 l -349 12 b -368 0 -353 4 -362 0 b -389 12 -377 0 -385 4 l -390 15 l -390 287 l -390 559 l -389 563 b -378 573 -386 567 -382 571 m -274 337 l -270 338 l 0 338 l 269 338 l 273 337 b 284 326 279 334 281 330 l 285 323 l 285 169 l 285 15 l 284 12 b 265 -1 280 4 272 -1 b 245 12 257 -1 249 4 l 245 15 l 243 108 l 243 201 l 0 201 l -245 201 l -245 108 l -245 15 l -246 12 b -266 -1 -250 4 -258 -1 b -285 12 -273 -1 -281 4 l -287 15 l -287 169 l -287 323 l -285 326 b -274 337 -283 330 -280 334 m -13 131 b -1 133 -9 133 -5 133 b 50 105 19 133 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -58 38 -62 55 b -13 131 -62 98 -44 124 \"},\"v33\":{\"x_min\":-423.3125,\"x_max\":421.9375,\"ha\":431,\"o\":\"m -10 276 b -2 277 -8 277 -5 277 b 17 265 5 277 13 273 b 19 163 19 260 19 260 l 19 68 l 39 45 b 277 -95 122 -34 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -54 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 200 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 137 b 421 22 421 37 421 29 b 257 -198 421 -86 347 -188 b 242 -198 251 -198 247 -198 b 20 -105 181 -198 95 -163 l 19 -104 l 19 -183 b 19 -216 19 -195 19 -206 b 12 -273 19 -272 17 -267 b -2 -278 8 -277 2 -278 b -21 -266 -10 -278 -19 -274 b -23 -165 -23 -263 -23 -262 l -23 -69 l -44 -47 b -250 86 -117 23 -183 66 b -295 94 -270 93 -284 94 b -315 91 -302 94 -308 94 b -381 5 -356 81 -381 43 b -355 -56 -381 -16 -372 -40 b -299 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -168 -77 -196 -58 -179 -65 b -151 -122 -156 -90 -151 -105 b -179 -174 -151 -141 -160 -162 b -239 -195 -194 -184 -217 -192 b -257 -197 -245 -195 -250 -197 b -423 -5 -349 -197 -423 -113 b -423 0 -423 -4 -423 -1 b -277 194 -420 97 -362 173 b -247 197 -268 197 -258 197 b -24 104 -185 197 -100 162 l -23 102 l -23 181 b -21 265 -23 260 -23 260 b -10 276 -20 269 -14 274 \"},\"v34\":{\"x_min\":0,\"x_max\":622.03125,\"ha\":635,\"o\":\"m 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 \"},\"v35\":{\"x_min\":0,\"x_max\":323.9375,\"ha\":331,\"o\":\"m 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 \"},\"v36\":{\"x_min\":-1.359375,\"x_max\":1064.390625,\"ha\":1086,\"o\":\"m 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 483 112 b 503 129 494 120 503 127 b 504 130 503 129 504 129 b 503 138 504 131 503 134 b 500 180 500 152 500 166 b 553 326 500 238 518 288 b 604 366 560 331 592 358 b 649 381 617 376 632 381 b 696 362 665 381 681 374 b 724 302 714 347 724 324 b 695 238 724 278 714 255 b 660 210 691 234 662 212 b 579 148 658 209 582 151 b 579 148 579 148 579 148 b 596 106 579 144 589 119 b 622 77 604 88 609 83 b 657 69 632 72 645 69 b 748 112 688 69 721 84 b 755 123 754 117 755 120 b 755 127 755 124 755 126 b 751 165 752 137 751 151 b 758 219 751 183 754 202 b 894 387 774 290 820 347 b 896 390 896 388 896 388 b 891 398 896 391 895 392 b 622 560 827 477 730 535 b 600 580 605 564 600 569 b 617 596 600 591 607 596 b 628 595 622 596 624 596 b 1057 248 846 552 1020 412 b 1064 191 1061 229 1064 209 b 922 0 1064 94 1005 9 b 902 -1 916 -1 909 -1 b 774 76 847 -1 800 26 b 769 83 770 81 770 83 b 769 81 769 83 769 83 b 627 -1 733 29 677 -1 b 548 27 597 -1 570 8 b 515 88 537 37 525 61 l 513 95 l 510 93 l 453 45 b 390 0 396 0 396 0 b 390 0 390 0 390 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 m 926 348 b 921 353 924 351 922 353 b 914 348 920 353 918 351 b 823 167 857 306 823 237 b 828 124 823 154 826 138 b 890 31 837 79 862 40 b 896 31 892 31 894 31 b 956 104 916 31 940 59 b 970 191 965 129 970 159 b 966 241 970 208 969 224 b 926 348 959 277 945 313 m 627 326 b 619 326 624 326 622 326 b 598 316 611 326 604 323 b 568 215 579 288 568 255 b 568 208 568 213 568 210 b 571 183 570 195 570 184 l 571 183 b 594 201 571 183 582 191 l 634 231 b 660 259 653 247 656 248 b 664 278 662 266 664 272 b 627 326 664 299 649 320 \"},\"v37\":{\"x_min\":0,\"x_max\":333.46875,\"ha\":340,\"o\":\"m 219 818 b 225 821 220 820 223 821 b 239 816 231 821 235 818 b 245 800 242 811 243 810 b 328 587 259 725 291 646 l 333 578 l 333 573 l 333 571 b 315 553 333 560 325 553 b 306 556 313 553 308 555 b 251 577 288 567 270 574 b 246 578 249 577 247 578 b 245 577 246 578 245 578 b 246 576 245 577 246 577 b 247 416 246 574 246 542 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 494 87 498 b 114 485 102 498 110 494 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 409 b 206 574 205 546 205 571 b 206 577 206 576 206 577 b 205 578 206 578 206 578 b 200 577 205 578 202 577 b 147 556 181 574 163 567 b 136 553 142 555 138 553 b 118 571 126 553 118 560 l 118 573 l 118 578 l 123 587 b 205 796 160 646 187 717 b 219 818 209 813 210 816 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 \"},\"v38\":{\"x_min\":-1.359375,\"x_max\":651.96875,\"ha\":665,\"o\":\"m 389 644 b 405 645 394 645 400 645 b 504 566 450 645 492 613 b 507 541 506 557 507 549 b 480 471 507 514 498 489 l 477 467 l 483 470 b 609 591 539 485 586 531 b 613 601 611 595 613 599 b 631 609 619 607 624 609 b 651 588 641 609 651 602 b 200 -946 651 584 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 537 313 478 300 508 b 389 644 300 585 334 635 \"},\"v39\":{\"x_min\":-171.5,\"x_max\":251.8125,\"ha\":257,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 \"},\"v3a\":{\"x_min\":-1.359375,\"x_max\":227.3125,\"ha\":232,\"o\":\"m 182 210 b 196 215 189 213 193 215 b 204 209 200 215 202 212 b 205 204 205 206 205 205 b 193 191 205 199 201 195 b 104 54 137 159 104 105 b 122 -8 104 31 110 11 l 123 -11 l 130 -11 b 202 -45 156 -11 185 -24 b 227 -112 219 -65 227 -88 b 172 -205 227 -149 208 -186 b 127 -216 157 -212 142 -216 b -1 -52 59 -216 -1 -144 b 0 -37 -1 -48 0 -43 b 182 210 6 58 80 155 \"},\"v3b\":{\"x_min\":0,\"x_max\":484.5625,\"ha\":494,\"o\":\"m 228 245 b 239 247 234 247 239 247 b 243 247 240 247 242 247 b 303 238 257 247 287 242 b 484 -2 417 208 484 104 b 412 -177 484 -65 461 -127 b 243 -248 363 -226 303 -248 b 6 -63 138 -248 36 -180 b 0 -1 1 -41 0 -20 b 228 245 0 127 98 240 m 255 181 b 240 183 247 183 245 183 b 232 181 238 183 235 183 b 142 152 200 180 168 170 l 138 149 l 190 97 l 242 44 l 294 97 l 345 149 l 340 152 b 255 181 315 169 284 180 m 147 -54 l 197 -1 l 147 51 l 95 104 l 91 99 b 62 -1 72 70 62 34 b 66 -43 62 -15 63 -29 b 91 -101 72 -63 80 -84 l 95 -106 l 147 -54 m 393 99 b 389 104 390 102 389 104 b 337 51 389 104 366 80 l 285 -1 l 337 -54 l 389 -106 l 393 -101 b 421 -1 412 -72 421 -36 b 393 99 421 34 412 69 m 294 -98 b 242 -45 265 -69 242 -45 b 190 -98 242 -45 219 -69 l 138 -151 l 142 -154 b 242 -184 172 -174 206 -184 b 340 -154 276 -184 311 -174 l 345 -151 l 294 -98 \"},\"v3c\":{\"x_min\":0,\"x_max\":450.53125,\"ha\":460,\"o\":\"m 189 302 b 204 303 193 302 198 303 b 303 224 250 303 292 270 b 306 199 304 216 306 208 b 279 129 306 173 296 147 l 276 126 l 281 127 b 408 249 337 142 385 190 b 412 259 409 254 412 258 b 430 267 417 265 423 267 b 450 247 441 267 450 259 b 200 -605 450 242 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 194 111 136 99 165 b 189 302 99 244 133 292 \"},\"v3d\":{\"x_min\":0,\"x_max\":677.828125,\"ha\":692,\"o\":\"m 390 1199 b 396 1200 392 1200 394 1200 b 426 1179 404 1200 412 1195 b 528 975 468 1135 507 1059 b 543 863 537 938 543 900 b 401 533 543 743 494 627 l 364 496 l 344 476 l 345 471 l 355 430 l 383 291 l 385 284 l 387 284 b 420 287 398 285 409 287 b 616 192 494 287 567 251 b 677 18 658 140 677 79 b 502 -244 677 -88 615 -195 b 496 -247 499 -245 496 -247 b 514 -334 496 -247 499 -259 l 526 -394 b 537 -467 536 -437 537 -444 b 307 -700 536 -602 428 -700 b 215 -681 276 -700 245 -695 b 114 -595 174 -663 130 -626 b 103 -544 107 -578 103 -562 b 156 -444 103 -505 122 -466 b 219 -424 175 -431 197 -424 b 303 -463 250 -424 283 -438 b 329 -535 321 -485 329 -510 b 234 -644 329 -588 292 -638 l 224 -644 l 225 -645 b 268 -659 235 -650 254 -656 b 307 -663 281 -662 294 -663 b 498 -494 401 -663 484 -592 b 500 -467 499 -484 500 -476 b 491 -406 500 -452 498 -435 l 480 -348 b 461 -259 466 -284 461 -259 b 461 -259 461 -259 461 -259 b 457 -260 460 -259 458 -259 b 374 -270 430 -267 402 -270 b 190 -222 311 -270 246 -254 b 0 115 68 -151 0 -20 b 46 303 0 179 14 242 b 268 581 80 369 182 496 l 281 595 l 280 605 l 254 730 b 236 850 239 799 236 813 b 235 868 235 857 235 863 b 239 927 235 888 236 903 b 340 1153 250 1010 285 1090 b 390 1199 356 1171 383 1197 m 446 1039 b 434 1041 442 1041 438 1041 b 306 921 389 1041 332 989 b 284 810 291 884 284 849 b 296 705 284 780 288 745 l 308 649 b 313 627 311 637 313 627 l 313 627 b 344 657 314 627 332 645 b 487 957 434 757 487 870 b 483 995 487 970 485 982 b 446 1039 477 1021 468 1034 m 315 437 b 314 442 314 440 314 442 b 314 442 314 442 314 442 b 230 345 311 442 255 378 b 104 101 142 234 115 183 b 102 55 103 86 102 70 b 374 -242 102 -108 225 -242 b 420 -238 389 -242 404 -241 b 454 -229 431 -237 453 -230 b 454 -229 454 -229 454 -229 b 451 -213 454 -227 453 -220 l 441 -162 l 426 -93 l 378 136 b 372 149 375 145 375 149 b 364 147 371 149 368 148 b 270 12 306 123 270 70 b 274 -20 270 1 272 -9 b 333 -101 281 -52 302 -80 b 343 -117 340 -105 343 -112 b 330 -133 343 -124 338 -130 b 328 -133 329 -133 328 -133 b 238 -70 308 -133 262 -101 b 193 61 206 -30 193 15 b 340 272 193 151 247 240 b 348 276 345 274 348 276 b 347 284 348 276 348 280 l 315 437 m 443 155 b 421 156 436 156 428 156 b 412 155 416 156 412 156 b 412 155 412 155 412 155 b 420 117 412 154 416 137 l 435 44 l 449 -19 l 460 -72 l 475 -147 b 488 -212 484 -188 488 -208 b 490 -213 488 -212 490 -213 b 494 -210 490 -213 491 -212 b 571 -134 525 -194 553 -165 b 601 -33 592 -102 601 -66 b 443 155 601 56 539 140 \"},\"v3e\":{\"x_min\":0,\"x_max\":406.96875,\"ha\":415,\"o\":\"m 21 183 b 28 183 24 183 25 183 b 42 181 34 183 39 183 b 127 108 47 179 47 179 b 202 41 168 72 202 41 b 279 108 204 41 238 72 b 357 177 321 145 356 176 b 375 183 363 181 370 183 b 406 151 392 183 406 169 b 404 137 406 147 405 141 b 322 62 401 131 398 129 b 251 0 284 27 251 0 b 322 -63 251 -1 284 -29 b 404 -138 398 -130 401 -133 b 406 -152 405 -142 406 -148 b 375 -184 406 -170 392 -184 b 357 -179 370 -184 363 -183 b 279 -109 356 -177 321 -147 b 202 -43 238 -73 204 -43 b 127 -109 202 -43 168 -73 b 49 -179 85 -147 50 -177 b 31 -184 43 -183 36 -184 b 0 -152 13 -184 0 -170 b 2 -138 0 -148 0 -142 b 83 -63 5 -133 8 -130 b 155 0 122 -29 155 -1 b 83 62 155 0 122 27 b 8 129 43 97 10 127 b 0 151 2 136 0 144 b 21 183 0 165 8 177 \"},\"v3f\":{\"x_min\":-24.5,\"x_max\":317.140625,\"ha\":324,\"o\":\"m -24 -147 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 58 -123 6 -43 31 -86 b 196 -278 93 -173 134 -219 b 317 -570 274 -356 317 -460 b 294 -713 317 -617 308 -666 l 289 -724 l 294 -735 b 317 -873 308 -780 317 -827 b 235 -1132 317 -963 288 -1054 b 209 -1165 228 -1140 224 -1146 b 189 -1177 204 -1172 196 -1177 b 171 -1164 182 -1177 175 -1172 b 168 -1154 170 -1161 168 -1159 b 181 -1132 168 -1149 172 -1142 b 269 -891 238 -1064 269 -975 b 269 -881 269 -886 269 -884 b 262 -814 269 -857 265 -827 b 258 -800 261 -811 259 -806 b 142 -628 240 -731 198 -667 b -8 -589 112 -606 47 -589 b -20 -589 -13 -589 -19 -589 l -24 -589 l -24 -449 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 58 -424 6 -345 31 -388 b 194 -580 93 -476 136 -523 b 259 -660 221 -606 245 -635 b 261 -663 259 -662 261 -663 b 264 -656 262 -663 262 -660 b 269 -587 268 -632 269 -610 b 264 -521 269 -566 268 -544 b 262 -512 264 -517 262 -513 b 258 -498 261 -509 259 -503 b 142 -326 240 -428 198 -365 b -8 -287 112 -303 47 -288 b -20 -287 -13 -287 -19 -287 l -24 -287 l -24 -147 \"},\"v40\":{\"x_min\":-1.359375,\"x_max\":436.921875,\"ha\":446,\"o\":\"m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 \"},\"v41\":{\"x_min\":-1.359375,\"x_max\":556.6875,\"ha\":568,\"o\":\"m 294 322 b 318 323 299 322 308 323 b 360 320 334 323 352 322 b 526 217 430 310 490 273 b 543 166 537 202 543 184 b 447 70 543 117 503 70 b 445 70 447 70 446 70 b 359 159 394 72 359 113 b 368 201 359 173 362 187 b 442 245 382 229 412 245 b 455 244 446 245 451 245 b 460 244 458 244 460 244 b 460 244 460 244 460 244 b 454 248 460 244 458 245 b 325 291 417 276 372 291 b 285 287 313 291 299 290 b 144 -2 183 269 144 190 b 281 -290 144 -208 179 -280 b 304 -291 289 -291 298 -291 b 524 -105 412 -291 506 -212 b 541 -84 526 -88 530 -84 b 556 -101 551 -84 556 -90 b 549 -138 556 -111 553 -122 b 334 -322 521 -237 435 -310 b 302 -324 323 -323 313 -324 b 13 -101 172 -324 54 -234 b -1 -1 4 -68 -1 -34 b 294 322 -1 161 121 303 \"},\"v42\":{\"x_min\":-348.4375,\"x_max\":24.5,\"ha\":25,\"o\":\"m -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 \"},\"v43\":{\"x_min\":-442.359375,\"x_max\":441,\"ha\":450,\"o\":\"m -31 487 b -1 488 -21 488 -10 488 b 434 104 216 488 397 330 b 441 27 438 79 441 47 b 439 12 441 20 439 15 b 419 0 435 4 427 0 b 404 5 413 0 408 1 b 398 30 400 11 398 13 b 0 351 390 213 213 351 b -59 348 -20 351 -39 349 b -400 30 -251 324 -393 191 b -405 5 -400 13 -401 11 b -420 0 -409 1 -415 0 b -441 12 -428 0 -436 4 b -442 27 -441 15 -442 20 b -435 104 -442 47 -439 79 b -31 487 -401 316 -235 474 m -13 131 b -1 133 -9 133 -5 133 b 51 105 19 133 39 123 b 61 70 58 95 61 83 b 51 34 61 58 58 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -57 38 -62 54 b -13 131 -62 98 -44 124 \"},\"v44\":{\"x_min\":-21.78125,\"x_max\":251.8125,\"ha\":257,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 \"},\"v45\":{\"x_min\":-402.890625,\"x_max\":401.53125,\"ha\":410,\"o\":\"m -10 273 b -4 274 -9 273 -6 274 b 16 262 4 274 12 269 b 17 158 17 259 17 259 l 17 56 l 62 112 b 117 174 110 172 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b 21 -6 27 0 24 -2 l 17 -12 l 17 -147 b 17 -210 17 -173 17 -194 b 10 -292 17 -297 16 -287 b -2 -299 6 -297 2 -299 b -21 -287 -10 -299 -19 -295 b -24 -174 -23 -284 -23 -284 l -24 -63 l -66 -117 b -121 -176 -110 -170 -114 -176 b -125 -176 -122 -176 -123 -176 b -296 -12 -134 -174 -125 -184 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 170 -398 -43 -231 165 b -212 174 -221 173 -216 174 b -202 173 -208 174 -205 174 b -39 11 -200 172 -151 122 l -28 -1 l -25 1 l -24 4 l -24 130 b -23 260 -24 256 -24 258 b -10 273 -20 266 -16 270 \"},\"v46\":{\"x_min\":0,\"x_max\":627.46875,\"ha\":640,\"o\":\"m 306 190 b 314 191 308 191 311 191 b 326 184 318 191 322 190 l 336 173 b 510 52 377 127 442 80 b 515 49 513 51 515 49 b 611 16 537 40 579 24 b 627 0 624 13 627 9 b 607 -18 627 -11 624 -13 b 330 -181 490 -49 389 -109 b 314 -192 323 -190 319 -192 b 306 -191 311 -192 308 -192 b 294 -177 302 -188 302 -188 b 257 -140 287 -170 265 -148 b 19 -18 193 -84 114 -44 b 0 0 2 -13 0 -11 b 16 16 0 9 2 13 b 110 49 47 24 89 40 b 117 52 111 49 114 51 b 145 65 126 56 130 58 b 281 163 200 93 245 124 b 300 186 288 170 291 174 b 306 190 300 187 303 188 m 317 137 b 313 142 315 141 314 142 b 308 137 313 142 311 141 b 161 4 276 84 220 33 b 155 0 159 1 155 0 b 163 -4 155 0 159 -2 b 308 -138 220 -34 276 -84 b 313 -142 311 -141 313 -142 b 317 -138 314 -142 315 -141 b 464 -4 351 -84 406 -34 b 470 0 468 -2 470 0 b 464 4 470 0 468 1 b 317 137 406 33 351 84 \"},\"v47\":{\"x_min\":-24.5,\"x_max\":315.78125,\"ha\":322,\"o\":\"m -24 -145 l -24 -5 l -20 -5 b 1 -26 -10 -5 -6 -9 b 175 -241 31 -86 96 -166 b 314 -548 259 -323 304 -420 b 315 -589 315 -555 315 -571 b 314 -630 315 -606 315 -623 b 298 -730 311 -664 306 -699 l 295 -742 l 296 -748 b 314 -850 304 -778 311 -813 b 315 -892 315 -857 315 -874 b 314 -932 315 -909 315 -925 b 298 -1032 311 -967 306 -1002 l 295 -1045 l 296 -1050 b 314 -1153 304 -1081 311 -1115 b 315 -1193 315 -1160 315 -1177 b 314 -1235 315 -1211 315 -1228 b 217 -1526 306 -1338 270 -1444 b 201 -1533 213 -1532 208 -1533 b 182 -1522 193 -1533 185 -1529 b 179 -1514 181 -1518 179 -1517 b 189 -1489 179 -1508 182 -1501 b 266 -1217 240 -1403 266 -1308 b 262 -1156 266 -1196 265 -1177 b 110 -907 247 -1043 190 -950 b 0 -889 87 -895 50 -889 l -1 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 1 -631 -10 -610 -6 -614 b 175 -846 31 -691 96 -771 b 259 -956 213 -884 236 -914 b 265 -966 262 -961 264 -966 b 265 -966 265 -966 265 -966 b 265 -953 265 -964 265 -959 b 266 -920 266 -943 266 -932 b 262 -853 266 -898 265 -873 b 110 -605 247 -741 190 -648 b 0 -587 87 -592 50 -587 l -1 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 1 -328 -10 -308 -6 -312 b 175 -544 31 -388 96 -469 b 259 -655 213 -581 236 -612 b 265 -663 262 -659 264 -663 b 265 -663 265 -663 265 -663 b 265 -650 265 -663 265 -657 b 266 -617 266 -641 266 -630 b 262 -551 266 -595 265 -570 b 110 -303 247 -438 190 -345 b 0 -284 87 -290 50 -284 l -1 -284 l -24 -284 l -24 -145 \"},\"v48\":{\"x_min\":0,\"x_max\":720.03125,\"ha\":735,\"o\":\"m 251 280 b 269 280 258 280 264 280 b 487 215 348 280 432 255 b 594 -2 558 159 594 87 b 590 -55 594 -19 593 -37 b 44 -598 553 -309 330 -533 b 10 -605 25 -603 16 -605 b 1 -599 5 -605 2 -603 b 0 -594 0 -598 0 -595 b 8 -580 0 -587 2 -580 b 43 -566 9 -580 32 -571 b 453 -54 279 -467 434 -274 b 454 -9 454 -48 454 -29 b 453 34 454 9 454 29 b 351 230 443 129 411 192 b 259 255 323 247 292 255 b 70 133 183 255 103 208 b 68 124 68 127 68 124 b 68 123 68 123 68 123 b 70 126 68 123 69 124 b 126 141 88 137 107 141 b 202 109 153 141 182 131 b 234 33 224 87 234 59 b 126 -77 234 -23 191 -77 b 5 61 53 -77 5 -13 b 27 147 5 88 12 119 b 251 280 68 226 151 274 m 672 172 b 677 173 673 173 676 173 b 720 130 700 173 720 152 b 714 111 720 124 717 117 b 677 88 707 95 692 88 b 642 108 664 88 650 95 b 637 130 638 115 637 123 b 672 172 637 151 650 169 m 672 -90 b 677 -90 673 -90 676 -90 b 720 -131 700 -90 720 -109 b 714 -151 720 -138 717 -144 b 677 -174 707 -166 692 -174 b 642 -154 664 -174 650 -167 b 637 -133 638 -147 637 -140 b 672 -90 637 -112 650 -93 \"},\"v49\":{\"x_min\":0,\"x_max\":630.203125,\"ha\":643,\"o\":\"m 308 204 b 314 205 310 205 313 205 b 326 201 319 205 323 204 b 355 154 328 199 338 180 b 401 83 362 142 392 95 l 409 72 b 431 41 412 66 424 49 b 619 -174 498 -51 570 -134 b 630 -192 626 -180 630 -186 b 626 -202 630 -195 628 -199 b 616 -206 623 -205 620 -206 b 552 -188 608 -206 592 -202 b 310 -155 488 -169 392 -155 b 268 -156 295 -155 281 -155 b 77 -188 197 -161 126 -173 b 13 -206 35 -202 20 -206 b 9 -206 12 -206 10 -206 b 0 -191 2 -202 0 -197 b 8 -176 0 -186 2 -180 b 204 49 58 -136 138 -43 l 220 72 l 227 83 b 295 188 245 108 281 166 b 308 204 299 197 304 202 m 315 147 b 314 147 315 147 314 147 b 314 147 314 147 314 147 b 306 129 314 145 310 138 l 296 105 b 281 72 292 97 284 77 l 274 56 b 181 -123 247 -4 212 -72 l 174 -134 l 176 -133 b 314 -123 215 -127 272 -123 b 451 -133 356 -123 413 -127 l 454 -134 l 449 -123 b 353 56 417 -72 381 -4 l 347 72 b 332 105 344 77 336 97 l 322 129 b 315 147 318 138 315 145 \"},\"v4a\":{\"x_min\":70.78125,\"x_max\":378.390625,\"ha\":315,\"o\":\"m 246 373 b 254 373 249 373 251 373 b 372 324 303 373 360 351 b 378 302 377 317 378 309 b 338 251 378 278 362 255 b 328 249 334 249 332 249 b 283 294 303 249 283 270 b 288 315 283 301 284 308 b 289 319 289 317 289 319 b 289 319 289 319 289 319 b 283 320 289 320 287 320 b 270 322 279 322 274 322 b 206 288 242 322 215 308 b 206 283 206 287 206 285 b 257 223 206 267 230 238 b 284 206 272 213 277 210 b 351 90 328 173 351 130 b 340 47 351 74 348 59 b 205 -30 314 -2 264 -30 b 182 -29 198 -30 190 -30 b 84 15 147 -24 103 -5 b 70 48 74 24 70 36 b 108 99 70 70 85 94 b 121 102 112 101 117 102 b 167 56 147 102 167 80 b 159 31 167 48 164 40 l 156 26 l 157 26 b 190 20 167 22 178 20 b 220 26 201 20 212 22 b 258 65 243 34 258 51 b 257 70 258 66 258 69 b 204 126 249 94 234 109 b 114 258 148 158 114 209 b 125 302 114 273 118 288 b 246 373 147 342 193 370 \"},\"v4b\":{\"x_min\":0,\"x_max\":503.609375,\"ha\":514,\"o\":\"m 274 430 b 277 430 276 430 277 430 b 310 394 296 430 310 415 b 308 383 310 391 308 387 b 306 367 307 381 307 374 b 236 120 298 305 272 210 b 40 -273 189 -5 125 -134 b 20 -287 35 -283 27 -287 b 5 -281 14 -287 9 -285 b 0 -267 1 -277 0 -273 b 9 -242 0 -262 2 -255 b 246 395 137 -12 232 242 b 274 430 249 416 257 427 m 468 430 b 472 430 469 430 470 430 b 503 394 490 430 503 415 b 502 383 503 391 503 387 b 499 367 502 381 500 374 b 431 120 491 305 465 210 b 234 -273 382 -5 318 -134 b 213 -287 228 -283 220 -287 b 198 -281 208 -287 202 -285 b 193 -267 194 -277 193 -273 b 202 -242 193 -262 196 -255 b 439 395 330 -12 426 242 b 468 430 442 416 451 427 \"},\"v4c\":{\"x_min\":-348.4375,\"x_max\":24.5,\"ha\":25,\"o\":\"m -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -6 27 -221 95 -117 52 b 10 23 1 26 8 23 b 24 -1 20 18 24 8 b 12 -23 24 -9 20 -19 b -8 -29 9 -26 9 -26 b -298 -148 -112 -52 -223 -97 b -322 -158 -313 -158 -315 -158 b -348 -133 -338 -158 -348 -147 b -343 -115 -348 -127 -347 -120 b -313 -1 -323 -79 -313 -40 b -337 101 -313 34 -321 69 b -343 113 -338 105 -341 111 b -348 131 -347 119 -348 126 b -330 155 -348 142 -343 152 \"},\"v4d\":{\"x_min\":-311.6875,\"x_max\":310.328125,\"ha\":317,\"o\":\"m -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 b 24 298 23 299 24 298 b 81 276 34 298 65 285 b 213 91 145 240 190 177 b 224 24 217 76 224 36 b 257 24 224 24 235 24 b 299 19 292 24 292 24 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 257 -27 292 -27 292 -27 b 224 -29 235 -27 224 -29 b 213 -95 224 -40 217 -80 b 81 -280 190 -181 145 -244 b 24 -301 65 -290 34 -301 b 23 -335 24 -301 23 -303 l 23 -340 b 17 -381 23 -374 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -374 l -27 -335 b -28 -301 -27 -303 -27 -301 b -85 -280 -38 -301 -69 -290 b -217 -95 -149 -244 -194 -181 b -228 -29 -221 -80 -228 -40 b -259 -27 -228 -29 -238 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -259 24 -291 23 -284 24 b -228 24 -239 24 -228 24 b -217 91 -228 36 -221 76 b -85 276 -194 177 -149 240 b -28 298 -69 285 -38 298 b -27 333 -27 298 -27 299 b -27 371 -27 362 -27 369 b -9 388 -24 378 -17 385 m -27 136 b -28 247 -27 197 -28 247 b -61 216 -31 247 -53 226 b -123 33 -95 172 -121 98 l -125 24 l -76 24 l -27 24 l -27 136 m 29 242 b 24 247 27 245 24 247 b 23 136 24 247 23 197 l 23 24 l 72 24 l 121 24 l 119 33 b 29 242 115 116 77 206 m -27 -140 l -27 -27 l -76 -27 l -125 -27 l -123 -36 b -61 -220 -121 -102 -95 -176 b -28 -251 -53 -230 -31 -251 b -27 -140 -28 -251 -27 -201 m 119 -36 l 121 -27 l 72 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 57 -220 27 -251 49 -230 b 119 -36 91 -176 117 -102 \"},\"v4e\":{\"x_min\":0,\"x_max\":239.5625,\"ha\":244,\"o\":\"m 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 \"},\"v4f\":{\"x_min\":0,\"x_max\":193.28125,\"ha\":197,\"o\":\"m 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 \"},\"v50\":{\"x_min\":-111.609375,\"x_max\":110.25,\"ha\":113,\"o\":\"m -8 112 b -1 112 -5 112 -2 112 b 110 -1 63 112 110 58 b 87 -69 110 -24 103 -48 b -1 -113 65 -98 32 -113 b -88 -69 -34 -113 -66 -98 b -111 -1 -104 -48 -111 -24 b -8 112 -111 55 -70 108 m 17 94 b 0 95 12 95 6 95 b -53 79 -17 95 -38 90 b -95 -1 -80 61 -95 30 b -72 -63 -95 -23 -88 -45 b -1 -97 -53 -87 -27 -97 b 89 -31 38 -97 74 -73 b 93 0 92 -20 93 -11 b 17 94 93 44 63 83 \"},\"v51\":{\"x_min\":-1.359375,\"x_max\":455.96875,\"ha\":465,\"o\":\"m 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 \"},\"v52\":{\"x_min\":-10.890625,\"x_max\":298.078125,\"ha\":294,\"o\":\"m 138 473 b 142 474 140 473 141 474 b 164 459 148 474 153 470 b 191 402 183 442 191 423 b 181 353 191 388 187 371 b 178 349 179 352 178 349 b 179 348 178 348 179 348 b 185 349 181 348 182 348 b 255 376 210 355 234 363 b 272 381 264 381 266 381 b 298 355 287 381 298 370 b 288 330 298 348 298 345 b 171 34 238 254 194 141 b 166 13 168 16 168 16 b 144 1 161 5 152 1 b 121 15 134 1 125 5 b 115 33 119 18 117 24 b 0 330 91 145 49 252 b -10 355 -9 345 -10 348 b 13 381 -10 371 0 381 b 31 376 19 381 25 380 b 132 345 61 358 103 345 l 136 345 l 137 355 b 145 378 138 359 142 370 b 152 415 149 394 152 405 b 137 452 152 427 148 438 b 133 464 134 458 133 460 b 138 473 133 467 134 470 \"},\"v53\":{\"x_min\":0,\"x_max\":902.421875,\"ha\":921,\"o\":\"m 17 240 b 24 241 19 241 21 241 b 32 240 28 241 31 241 b 46 229 38 238 43 234 b 50 88 50 223 50 237 b 50 -1 50 63 50 34 b 50 -90 50 -36 50 -65 b 46 -231 50 -238 50 -224 b 25 -242 42 -238 34 -242 b 0 -224 14 -242 4 -235 b 0 2 0 -222 0 -108 b 0 223 0 112 0 220 b 17 240 2 230 9 237 m 110 240 b 118 241 111 241 114 241 b 126 240 121 241 123 241 b 142 223 133 237 140 230 b 144 123 144 220 144 205 b 144 29 144 45 144 29 b 144 29 144 29 144 29 b 393 183 166 106 264 167 b 450 186 412 184 431 186 b 756 29 600 186 732 120 b 756 29 756 29 756 29 b 758 123 758 29 758 45 b 760 227 758 226 758 223 b 784 241 766 237 774 241 b 804 229 792 241 800 237 b 809 88 808 223 809 237 l 809 -1 l 809 -90 b 804 -231 809 -238 808 -224 b 784 -242 800 -238 792 -242 b 762 -231 775 -242 766 -238 b 758 -124 756 -224 758 -231 b 756 -30 758 -47 758 -30 b 756 -30 756 -30 756 -30 b 509 -184 736 -108 637 -169 b 450 -187 488 -187 469 -187 b 144 -30 300 -187 168 -122 b 144 -30 144 -30 144 -30 b 144 -124 144 -30 144 -47 b 140 -231 144 -231 144 -224 b 118 -242 134 -238 126 -242 b 92 -224 107 -242 96 -235 b 92 2 92 -222 92 -108 b 92 223 92 112 92 220 b 110 240 95 230 102 237 m 432 161 b 413 162 426 162 420 162 b 313 41 351 162 313 109 b 347 -73 313 5 323 -34 b 487 -163 385 -133 439 -163 b 578 -97 526 -163 562 -142 b 588 -43 585 -80 588 -62 b 432 161 588 47 518 147 m 868 240 b 876 241 869 241 872 241 b 884 240 879 241 882 241 b 898 229 890 238 894 234 b 902 88 902 223 902 237 l 902 -1 l 902 -90 b 898 -231 902 -238 902 -224 b 876 -242 892 -238 884 -242 b 852 -224 865 -242 854 -235 b 850 2 850 -222 850 -108 b 852 223 850 112 850 220 b 868 240 853 230 860 237 \"},\"v54\":{\"x_min\":-24.5,\"x_max\":317.140625,\"ha\":324,\"o\":\"m -24 -161 l -24 -5 l -20 -5 b 0 -24 -9 -5 -2 -12 b 171 -315 21 -124 84 -233 b 317 -660 268 -406 317 -531 b 187 -1014 317 -782 274 -909 b 161 -1034 172 -1034 171 -1034 b 141 -1013 149 -1034 141 -1025 b 152 -991 141 -1004 142 -1002 b 266 -682 228 -899 266 -788 b 174 -430 266 -588 236 -498 b -23 -317 136 -388 66 -348 b -24 -161 -23 -316 -24 -285 \"},\"v55\":{\"x_min\":0,\"x_max\":551.25,\"ha\":563,\"o\":\"m 289 644 b 304 645 294 645 299 645 b 404 566 349 645 392 613 b 406 541 405 557 406 549 b 379 471 406 514 397 489 l 377 467 l 382 470 b 509 591 438 485 485 531 b 513 601 510 595 513 599 b 530 609 518 607 524 609 b 551 588 540 609 551 602 b 200 -605 551 584 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 195 112 136 99 165 b 118 256 99 217 106 238 b 204 303 138 287 171 303 b 292 249 238 303 273 285 b 306 199 302 234 306 217 b 279 129 306 173 296 148 l 276 126 l 281 127 b 408 248 336 142 385 190 b 473 470 409 254 473 469 b 473 470 473 470 473 470 b 465 464 473 470 469 467 b 341 421 428 435 383 421 b 236 458 303 421 266 433 b 200 537 212 478 200 508 b 289 644 200 585 234 635 \"},\"v56\":{\"x_min\":0,\"x_max\":1159.671875,\"ha\":1183,\"o\":\"m 0 0 l 0 347 l 193 347 l 386 347 l 386 0 l 386 -348 l 193 -348 l 0 -348 l 0 0 m 773 -1 l 773 347 l 966 347 l 1159 347 l 1159 -1 l 1159 -348 l 966 -348 l 773 -348 l 773 -1 \"},\"v57\":{\"x_min\":0,\"x_max\":272.21875,\"ha\":278,\"o\":\"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 \"},\"v58\":{\"x_min\":-21.78125,\"x_max\":367.5,\"ha\":375,\"o\":\"m 259 1553 b 265 1553 261 1553 264 1553 b 288 1540 272 1553 277 1550 b 367 1351 340 1493 367 1424 b 336 1221 367 1308 357 1263 l 332 1211 l 333 1208 b 367 1077 356 1170 367 1124 b 336 945 367 1032 357 986 l 332 935 l 333 932 b 367 800 356 893 367 848 b 336 669 367 756 357 710 l 332 659 l 333 656 b 367 523 356 617 367 571 b 345 412 367 485 360 446 b 231 273 322 356 284 310 b -1 19 121 195 27 93 b -17 4 -4 11 -10 5 l -21 4 l -21 134 l -21 265 l -17 265 b 133 291 20 265 96 278 b 318 537 245 328 318 433 b 307 603 318 559 315 582 b 303 614 304 612 304 614 b 298 609 302 614 300 613 b 231 549 281 589 258 567 b -1 295 121 471 27 369 b -17 280 -4 287 -10 281 l -21 280 l -21 410 l -21 541 l -17 541 b 133 567 20 541 96 555 b 318 813 245 605 318 709 b 307 880 318 835 315 859 b 303 891 304 888 304 891 b 298 885 302 891 300 888 b 231 825 281 866 258 843 b -1 571 121 748 27 645 b -17 556 -4 563 -10 557 l -21 556 l -21 687 l -21 817 l -17 817 b 133 843 20 817 96 830 b 318 1089 245 881 318 985 b 307 1156 318 1111 315 1134 b 303 1167 304 1164 304 1167 b 298 1161 302 1167 300 1164 b 231 1102 281 1140 258 1120 b -1 848 121 1024 27 921 b -17 832 -4 839 -10 834 l -21 832 l -21 963 l -21 1093 l -17 1093 b 114 1113 12 1093 78 1103 b 313 1314 215 1142 289 1218 b 318 1364 317 1331 318 1347 b 255 1511 318 1422 295 1478 b 243 1532 247 1519 243 1525 b 259 1553 243 1540 250 1550 \"},\"v59\":{\"x_min\":0,\"x_max\":464.140625,\"ha\":474,\"o\":\"m 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 \"},\"v5a\":{\"x_min\":-171.5,\"x_max\":170.140625,\"ha\":174,\"o\":\"m -6 566 b 0 567 -5 567 -2 567 b 14 556 6 567 12 563 b 92 285 14 555 50 433 b 170 13 166 33 170 19 b 168 13 170 13 170 13 b 161 1 168 8 167 4 l 159 0 l 122 0 l 84 0 l 81 1 b 21 195 76 5 78 -5 b -32 381 -8 297 -32 381 b -87 197 -32 381 -57 298 b -141 8 -115 94 -140 9 b -155 0 -142 2 -149 0 b -171 15 -163 0 -171 5 b -14 556 -171 18 -24 528 b -6 566 -14 560 -10 564 \"},\"v5b\":{\"x_min\":-441,\"x_max\":439.640625,\"ha\":449,\"o\":\"m -428 -2 b -421 0 -427 -1 -424 0 b -406 -6 -416 0 -409 -2 b -400 -31 -401 -12 -400 -15 b -1 -352 -392 -215 -215 -352 b 58 -349 19 -352 38 -351 b 398 -31 250 -326 392 -192 b 404 -6 398 -15 400 -12 b 419 -1 408 -2 413 -1 b 439 -13 427 -1 435 -5 b 439 -29 439 -16 439 -22 b 434 -105 439 -48 438 -80 b 0 -489 397 -333 213 -489 b -68 -484 -23 -489 -44 -488 b -441 -36 -280 -452 -436 -263 b -441 -30 -441 -34 -441 -31 b -428 -2 -441 -11 -439 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 \"},\"v5c\":{\"x_min\":0,\"x_max\":447.8125,\"ha\":457,\"o\":\"m 0 -87 l 0 0 l 223 0 l 447 0 l 447 -87 l 447 -174 l 223 -174 l 0 -174 l 0 -87 \"},\"v5d\":{\"x_min\":-1.359375,\"x_max\":592.078125,\"ha\":604,\"o\":\"m 280 692 b 295 694 283 692 289 694 b 310 692 300 694 307 692 b 357 630 340 684 357 657 b 336 580 357 612 351 594 b 311 538 321 566 311 549 b 352 492 311 512 330 492 b 366 495 357 492 362 492 b 397 553 390 503 397 517 b 415 603 397 576 402 591 b 460 623 427 617 443 623 b 509 599 479 623 498 614 b 522 559 518 587 522 573 b 494 506 522 538 513 519 b 451 495 481 498 473 496 b 415 488 432 495 426 494 b 394 449 404 483 394 464 b 394 448 394 448 394 448 l 394 440 l 397 433 b 428 409 404 420 413 413 b 438 408 431 408 435 408 b 479 431 450 408 462 415 b 528 455 495 448 510 455 b 548 452 534 455 541 453 b 592 391 577 442 592 416 b 549 331 592 365 577 340 b 528 327 541 328 534 327 b 479 351 510 327 495 335 b 438 374 464 367 450 374 b 417 369 431 374 424 373 b 394 333 402 360 394 348 b 400 312 394 326 396 319 b 451 287 408 294 420 288 b 513 258 484 285 499 278 b 522 223 519 247 522 234 b 461 159 522 190 496 159 b 449 161 457 159 453 159 b 397 229 416 167 397 191 b 366 288 397 265 390 278 b 352 290 362 290 357 290 b 315 262 336 290 321 280 b 311 245 313 256 311 251 b 334 204 311 233 318 220 b 355 170 348 190 351 184 b 357 152 356 166 357 159 b 355 136 357 147 356 140 b 295 88 345 104 321 88 b 232 152 264 88 232 112 b 255 204 232 174 238 186 b 279 244 273 222 279 231 l 279 245 b 238 290 279 270 259 290 b 224 288 234 290 228 290 b 193 229 200 278 193 265 b 141 161 193 191 174 167 b 129 159 137 159 133 159 b 68 223 93 159 68 190 b 77 258 68 234 70 247 b 138 287 91 278 106 285 b 185 302 166 287 175 291 b 196 333 193 312 196 323 b 174 369 196 347 187 360 b 152 374 166 373 159 374 b 111 351 140 374 126 367 b 62 327 95 335 80 327 b 51 328 58 327 54 327 b -1 391 16 334 -1 363 b 53 455 -1 420 17 449 b 62 455 57 455 59 455 b 111 431 80 455 95 448 b 152 408 127 415 140 408 b 161 409 155 408 159 408 b 193 433 176 413 186 420 l 196 440 l 196 448 b 196 451 196 449 196 449 b 190 471 196 459 194 463 b 137 495 182 489 167 495 l 134 495 l 134 495 b 68 560 95 495 68 521 b 129 623 68 596 95 623 b 144 621 134 623 138 623 b 193 553 175 614 193 589 b 224 495 193 517 200 503 b 238 492 228 492 234 492 b 279 538 259 492 279 512 b 254 580 279 549 269 566 b 232 630 239 594 232 612 b 280 692 232 657 250 684 m 307 456 b 295 458 303 458 299 458 b 230 391 258 458 230 426 b 236 360 230 381 231 371 b 295 324 249 337 272 324 b 353 360 318 324 341 337 b 360 391 357 370 360 381 b 307 456 360 421 340 451 \"},\"v5e\":{\"x_min\":-206.890625,\"x_max\":428.75,\"ha\":438,\"o\":\"m -178 811 b -172 811 -175 811 -174 811 b -145 800 -164 811 -157 809 l -114 778 l -50 735 l 13 691 l 77 646 l 141 602 l 205 559 l 269 514 l 332 471 l 394 427 b 428 392 421 409 426 405 b 428 384 428 390 428 387 b 394 349 428 365 412 349 b 375 355 387 349 382 351 b 272 426 372 356 303 403 l 209 469 l 145 513 l 83 556 l -34 638 l -87 674 l -151 718 b -202 759 -196 749 -198 752 b -206 775 -205 764 -206 770 b -178 811 -206 792 -196 809 \"},\"v5f\":{\"x_min\":-390.640625,\"x_max\":389.28125,\"ha\":397,\"o\":\"m -378 -2 b -368 -1 -375 -1 -374 -1 b -349 -13 -360 -1 -353 -5 l -348 -16 l -348 -176 l -348 -337 l 0 -337 l 347 -337 l 347 -176 l 347 -16 l 348 -13 b 367 0 352 -5 360 0 b 387 -13 375 0 383 -5 l 389 -16 l 389 -252 l 389 -489 l 387 -492 b 377 -503 385 -498 381 -501 l 372 -505 l 0 -505 l -374 -505 l -378 -503 b -389 -492 -382 -501 -386 -498 l -390 -489 l -390 -252 l -390 -16 l -389 -13 b -378 -2 -386 -8 -382 -4 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -58 -102 -62 -87 b -13 -9 -62 -44 -44 -16 \"},\"v60\":{\"x_min\":-590.71875,\"x_max\":589.359375,\"ha\":601,\"o\":\"m -367 173 b -362 174 -366 174 -364 174 b -351 173 -357 174 -353 173 b -262 86 -348 172 -328 151 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 72 86 -13 172 6 151 b 157 0 119 37 157 0 b 227 84 159 0 189 37 b 303 174 298 173 296 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 144 -86 213 0 182 -38 b 68 -174 73 -174 74 -173 b 62 -176 66 -176 65 -176 b 53 -174 59 -176 55 -174 b -35 -87 50 -173 29 -152 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -367 173 -375 169 -372 172 \"},\"v61\":{\"x_min\":-108.890625,\"x_max\":251.8125,\"ha\":257,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 93 -148 206 -40 179 -70 l 38 -199 l 23 -215 l 20 -217 l 20 -241 b 19 -267 20 -260 20 -266 b 19 -270 19 -269 19 -270 b 19 -270 19 -270 19 -270 b 47 -263 21 -270 39 -266 b 78 -249 55 -260 69 -255 b 89 -247 83 -247 85 -247 b 107 -265 99 -247 107 -254 l 107 -265 l 107 -270 l 102 -280 b 19 -492 65 -338 34 -417 b 0 -513 14 -508 10 -513 b -20 -488 -12 -513 -16 -508 b -103 -280 -38 -409 -66 -338 l -108 -270 l -108 -265 l -108 -265 b -91 -247 -108 -254 -100 -247 b -80 -249 -87 -247 -84 -247 b -49 -263 -70 -255 -57 -260 b -20 -270 -40 -266 -23 -270 b -20 -270 -20 -270 -20 -270 b -20 -267 -20 -270 -20 -269 b -21 174 -21 -266 -21 -208 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 \"},\"v62\":{\"x_min\":46.28125,\"x_max\":669.671875,\"ha\":563,\"o\":\"m 183 376 b 189 376 185 376 187 376 b 212 374 197 376 208 376 b 265 337 234 369 253 355 b 274 317 268 331 273 320 b 274 316 274 317 274 316 b 280 323 276 316 276 319 b 311 358 288 337 299 348 b 319 366 315 360 318 365 b 356 376 326 373 340 376 b 382 371 364 376 374 374 b 428 337 400 366 417 352 b 436 317 431 331 436 320 b 438 316 436 317 436 316 b 442 323 438 316 439 319 b 475 358 451 337 462 348 b 483 366 477 360 481 365 b 518 376 488 373 503 376 b 544 373 528 376 536 376 b 604 285 579 360 604 326 b 597 249 604 273 601 258 b 543 63 596 247 544 70 b 541 54 543 61 541 55 b 540 44 540 51 540 47 b 552 23 540 33 545 23 b 552 23 552 23 552 23 b 647 126 586 29 627 72 b 658 138 651 136 653 138 b 660 138 660 138 660 138 b 669 129 666 137 669 136 b 654 88 669 122 665 109 b 562 -12 631 43 602 9 l 549 -19 b 521 -27 540 -24 530 -27 b 447 30 490 -27 458 -4 b 443 58 445 38 443 48 b 450 93 443 72 446 84 b 504 278 453 97 504 272 b 507 288 506 283 506 287 b 509 298 507 292 509 295 b 491 326 509 310 502 320 b 487 327 490 327 488 327 b 479 324 484 327 483 326 b 441 270 462 316 443 288 b 435 249 441 265 436 254 b 398 127 434 248 419 195 b 362 4 379 61 362 5 b 328 -1 359 -1 362 -1 b 314 -1 323 -1 319 -1 b 302 -1 310 -1 306 -1 b 266 4 266 -1 269 -1 b 265 6 265 5 265 5 b 303 144 265 13 272 34 b 343 278 325 216 343 276 b 344 288 343 281 344 285 b 345 298 345 291 345 295 b 330 326 345 310 340 320 b 323 327 328 327 325 327 b 317 324 322 327 321 326 b 279 270 300 316 281 288 b 273 249 279 265 274 254 b 236 127 272 248 255 195 b 200 4 216 61 200 5 b 164 -1 197 -1 198 -1 b 151 -1 161 -1 156 -1 b 140 -1 147 -1 142 -1 b 103 4 104 -1 106 -1 b 103 6 103 5 103 5 b 141 144 103 13 108 34 b 181 278 161 216 179 276 b 182 288 181 281 181 285 b 183 298 182 291 183 295 b 168 324 183 310 178 320 b 160 327 166 326 163 327 b 141 320 156 327 151 324 b 69 230 112 305 85 272 b 57 215 65 217 62 215 b 55 215 57 215 55 215 b 46 224 49 215 46 217 b 59 260 46 231 50 242 b 151 363 81 306 112 341 b 161 369 155 365 160 367 b 183 376 166 371 174 374 \"},\"v63\":{\"x_min\":-1.359375,\"x_max\":392,\"ha\":400,\"o\":\"m 253 341 b 317 341 276 341 298 341 b 363 341 344 341 362 341 b 392 309 379 340 392 326 l 392 309 b 266 -320 392 305 269 -310 b 246 -341 262 -330 255 -337 b 136 -342 243 -342 189 -342 b 21 -341 80 -342 24 -342 b -1 -310 8 -337 -1 -324 b 0 -310 -1 -310 0 -310 b 123 316 0 -306 118 297 b 144 340 126 327 133 335 b 253 341 147 341 151 341 m 321 276 b 250 277 321 277 307 277 b 179 276 194 277 179 277 b 123 -1 179 276 153 151 l 68 -278 l 140 -278 b 167 -278 149 -278 159 -278 b 210 -278 191 -278 210 -278 b 321 276 210 -278 321 274 \"},\"v64\":{\"x_min\":-355.25,\"x_max\":353.890625,\"ha\":361,\"o\":\"m -355 534 l -355 1068 l 0 1068 l 353 1068 l 353 534 l 353 0 l 0 0 l -355 0 l -355 534 m 325 881 l 325 1041 l -1 1041 l -326 1041 l -326 881 l -326 721 l -1 721 l 325 721 l 325 881 m 325 534 l 325 694 l 0 694 l -326 694 l -326 534 l -326 374 l 0 374 l 325 374 l 325 534 m 325 187 l 325 347 l 0 347 l -326 347 l -326 187 l -326 27 l 0 27 l 325 27 l 325 187 \"},\"v65\":{\"x_min\":-695.53125,\"x_max\":694.171875,\"ha\":708,\"o\":\"m -50 1414 b 1 1415 -32 1414 -16 1415 b 683 828 333 1415 626 1168 b 694 706 690 787 694 746 b -1 0 694 323 389 0 b -695 706 -385 0 -695 315 b -50 1413 -695 1079 -415 1386 l -50 1414 m 44 1385 b -2 1386 28 1386 13 1386 b -526 1124 -204 1386 -400 1289 b -564 1068 -539 1107 -564 1070 b -1 1067 -564 1068 -311 1067 b 563 1068 308 1067 563 1068 b 524 1124 563 1070 537 1107 b 44 1385 406 1276 235 1371 m 590 1021 l 581 1039 l -1 1039 l -582 1039 l -592 1021 b -666 728 -637 931 -666 816 l -666 720 l -1 720 l 665 720 l 665 728 b 590 1021 665 816 635 931 m 665 685 l 665 692 l -1 692 l -666 692 l -666 685 b -590 391 -666 596 -637 480 l -582 374 l -1 374 l 579 374 l 589 391 b 665 685 634 480 665 596 m 558 337 l 563 345 l -1 345 l -564 345 l -559 337 b 0 27 -436 142 -223 27 b 148 44 49 27 99 33 b 558 337 315 83 465 191 \"},\"v66\":{\"x_min\":-73.5,\"x_max\":72.140625,\"ha\":74,\"o\":\"m -36 -126 b 0 0 -17 -56 -1 0 b 70 -254 0 0 70 -249 l 72 -255 l 0 -255 l -73 -255 l -72 -254 b -36 -126 -72 -254 -55 -195 \"},\"v67\":{\"x_min\":-1.359375,\"x_max\":549.890625,\"ha\":561,\"o\":\"m 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 495 122 b 534 148 528 148 528 148 b 549 133 544 148 549 142 l 549 133 b 549 130 549 131 549 131 b 509 91 549 124 548 123 l 436 33 b 390 0 397 0 396 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 \"},\"v68\":{\"x_min\":-597.53125,\"x_max\":596.171875,\"ha\":608,\"o\":\"m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 155 11 -5 172 43 123 l 166 -1 l 168 1 l 170 4 l 170 130 b 171 260 170 256 170 258 b 191 274 175 269 183 274 b 205 267 196 274 201 272 b 212 158 212 262 210 273 l 212 56 l 257 112 b 311 173 304 172 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 216 -6 221 -1 219 -2 l 212 -12 l 212 -147 b 212 -210 212 -173 212 -194 b 205 -292 212 -297 210 -287 b 191 -299 201 -297 196 -299 b 172 -287 183 -299 175 -295 b 170 -174 171 -284 171 -284 l 170 -63 l 127 -117 b 73 -176 84 -170 80 -176 b 68 -176 72 -176 70 -176 b -27 -87 59 -174 65 -180 b -114 0 -74 -38 -112 0 b -182 -86 -114 0 -145 -38 b -258 -174 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 \"},\"v69\":{\"x_min\":-25.859375,\"x_max\":347.078125,\"ha\":354,\"o\":\"m 313 155 b 321 156 315 156 318 156 b 329 156 325 156 328 156 b 347 130 341 152 347 141 b 338 109 347 123 344 115 b 288 79 332 105 307 88 b 126 6 236 49 186 26 b 104 0 114 2 104 0 b 126 -8 104 -1 114 -4 b 326 -104 201 -33 268 -65 b 343 -117 337 -111 340 -112 b 347 -131 345 -122 347 -127 b 321 -158 347 -145 337 -158 b 296 -148 314 -158 311 -158 b 17 -31 223 -99 121 -56 l -4 -27 b -25 0 -19 -23 -25 -15 b -4 26 -25 13 -19 22 l 17 30 b 296 147 121 55 223 98 b 313 155 307 152 310 155 \"},\"v6a\":{\"x_min\":-85.75,\"x_max\":84.390625,\"ha\":86,\"o\":\"m -17 84 b 0 86 -12 86 -6 86 b 84 -1 46 86 84 45 b 83 -18 84 -6 84 -12 b -1 -87 73 -62 36 -87 b -66 -55 -25 -87 -49 -77 b -85 -1 -80 -38 -85 -19 b -17 84 -85 37 -59 74 \"},\"v6b\":{\"x_min\":-1.359375,\"x_max\":544.4375,\"ha\":556,\"o\":\"m 475 834 b 483 835 477 834 480 835 b 514 803 500 835 514 820 b 509 785 514 798 513 791 b 356 742 496 764 424 743 l 341 742 l 341 738 b 344 671 343 716 344 694 b 247 351 344 533 306 401 b 144 315 217 326 185 315 b 121 316 136 315 129 315 b 83 340 98 317 88 323 b 81 348 83 342 81 345 b 114 380 81 366 98 380 b 137 369 122 380 130 377 b 147 365 140 366 142 365 b 191 399 159 365 178 378 b 251 673 230 459 251 560 b 250 739 251 695 251 717 b 239 757 249 756 249 755 b 194 763 224 762 209 763 b 103 712 153 763 121 745 b 68 689 95 696 81 689 b 29 730 47 689 29 703 b 77 785 29 749 43 766 b 198 814 111 805 155 814 b 262 806 220 814 243 811 b 351 793 294 798 323 793 b 462 827 396 793 435 805 b 475 834 466 831 469 832 m 334 290 b 340 290 336 290 338 290 b 386 244 364 290 383 272 b 470 -154 397 115 439 -81 b 509 -195 481 -177 498 -195 b 510 -195 509 -195 510 -195 b 518 -194 513 -194 515 -194 b 544 -223 533 -194 544 -208 b 530 -244 544 -231 540 -240 b 510 -248 526 -247 519 -248 b 450 -235 491 -248 466 -244 b 351 -68 401 -210 381 -176 b 333 5 344 -44 333 1 b 333 5 333 5 333 5 b 326 -8 333 5 329 -1 b 289 -73 313 -34 302 -54 l 281 -84 l 284 -86 b 328 -102 295 -95 313 -102 b 344 -116 340 -104 344 -106 b 323 -131 344 -124 340 -129 b 304 -134 317 -133 311 -134 b 259 -123 289 -134 273 -130 l 254 -120 l 251 -124 b 78 -237 198 -183 141 -222 b 29 -242 63 -241 44 -242 b 16 -241 24 -242 19 -242 b -1 -217 5 -237 -1 -227 b 17 -192 -1 -206 5 -195 b 23 -191 19 -191 20 -191 b 29 -191 24 -191 27 -191 b 32 -191 29 -191 31 -191 b 175 -97 70 -191 132 -152 b 294 237 246 -12 287 105 b 306 273 295 256 298 263 b 334 290 313 281 323 288 m 292 -285 b 311 -285 299 -285 306 -285 b 517 -399 405 -285 496 -334 b 519 -420 518 -406 519 -413 b 427 -535 519 -462 485 -505 l 416 -541 l 427 -546 b 528 -681 491 -580 528 -631 b 518 -724 528 -695 525 -710 b 341 -816 488 -782 417 -816 b 216 -785 299 -816 255 -806 b 186 -750 194 -774 186 -764 b 187 -742 186 -748 186 -745 l 187 -739 l 186 -742 b 66 -784 151 -771 114 -784 b 59 -784 65 -784 62 -784 b 16 -767 31 -784 23 -781 b 13 -753 14 -763 13 -757 b 43 -723 13 -737 27 -723 b 62 -730 50 -723 55 -725 b 70 -734 66 -734 66 -734 b 151 -666 96 -734 130 -705 b 167 -630 153 -660 155 -656 b 213 -444 193 -570 209 -506 b 215 -412 215 -437 215 -426 b 212 -355 215 -385 213 -356 b 212 -353 212 -355 212 -353 b 176 -369 209 -353 187 -363 b 106 -433 145 -385 119 -409 b 69 -458 98 -449 83 -458 b 36 -437 57 -458 44 -451 b 31 -417 32 -431 31 -424 b 53 -378 31 -405 38 -391 b 292 -285 111 -324 191 -294 m 336 -338 b 310 -337 329 -338 318 -337 b 300 -338 304 -337 300 -337 b 300 -338 300 -338 300 -338 b 306 -408 303 -345 306 -381 b 306 -415 306 -410 306 -413 b 247 -657 304 -496 284 -578 b 217 -709 235 -682 228 -695 b 210 -717 215 -713 212 -716 b 210 -717 210 -717 210 -717 b 215 -717 210 -717 212 -717 b 217 -717 215 -717 216 -717 b 220 -717 217 -717 219 -717 b 242 -727 228 -717 232 -718 b 337 -764 273 -752 303 -763 b 341 -764 338 -764 340 -764 b 436 -681 396 -764 436 -728 b 435 -664 436 -675 436 -670 b 319 -566 427 -617 381 -578 b 299 -557 307 -563 304 -562 b 292 -539 294 -552 292 -545 b 317 -513 292 -527 302 -514 b 423 -445 364 -508 409 -480 b 428 -421 427 -437 428 -430 b 336 -338 428 -384 392 -349 \"},\"v6c\":{\"x_min\":-1.359375,\"x_max\":193.28125,\"ha\":197,\"o\":\"m 78 233 b 87 233 81 233 84 233 b 187 140 132 233 174 195 b 193 102 190 127 193 115 b 43 -113 193 22 136 -62 b 27 -119 36 -116 31 -119 b 19 -108 21 -119 19 -115 b 29 -97 19 -102 20 -101 b 102 13 73 -72 102 -27 b 92 51 102 26 98 40 l 91 54 l 84 54 b 8 104 53 54 21 74 b -1 142 1 116 -1 130 b 78 233 -1 187 31 227 \"},\"v6d\":{\"x_min\":-590.71875,\"x_max\":589.359375,\"ha\":601,\"o\":\"m 544 335 b 553 337 548 337 551 337 b 575 313 563 337 570 330 b 589 226 583 285 589 256 b 517 8 589 152 563 76 b 464 -58 507 -4 503 -9 l 401 -136 b 362 -176 372 -172 370 -176 b 357 -176 360 -176 359 -176 b 261 -87 349 -174 355 -180 b 175 0 215 -38 175 0 b 106 -86 175 0 144 -38 b 29 -174 35 -174 36 -173 b 24 -176 28 -176 27 -176 b 14 -174 21 -176 17 -174 b -73 -87 12 -173 -8 -152 b -159 0 -121 -38 -159 0 b -228 -86 -160 0 -190 -38 b -304 -174 -299 -174 -298 -173 b -310 -176 -306 -176 -308 -176 b -319 -174 -314 -176 -318 -174 b -483 -12 -323 -173 -359 -137 l -495 0 l -524 -34 b -562 -77 -553 -73 -556 -76 b -568 -79 -564 -79 -566 -79 b -590 -58 -581 -79 -590 -69 b -588 -49 -590 -55 -589 -52 b -412 170 -585 -43 -417 165 b -398 174 -408 173 -402 174 b -389 173 -394 174 -392 174 b -300 86 -387 172 -366 151 b -215 -1 -254 37 -215 -1 b -145 84 -215 -1 -183 37 b -69 173 -74 173 -76 172 b -63 174 -68 174 -66 174 b -54 173 -61 174 -57 173 b 34 86 -51 172 -31 151 b 119 -1 81 37 119 -1 b 189 84 121 -1 151 37 b 265 173 259 173 258 172 b 270 174 266 174 269 174 b 280 173 274 174 279 173 b 370 84 283 172 303 151 b 455 -1 416 37 455 -1 l 455 -1 b 476 24 455 -1 469 15 b 547 226 522 87 547 159 b 534 302 547 252 543 278 b 532 317 533 308 532 313 b 544 335 532 326 536 333 \"},\"v6e\":{\"x_min\":-355.25,\"x_max\":353.890625,\"ha\":361,\"o\":\"m -27 720 b -13 721 -24 720 -20 721 b 42 718 4 721 34 720 b 343 446 190 699 308 591 b 353 360 349 417 353 390 b 84 9 353 197 245 49 b 0 0 55 2 27 0 b -344 273 -160 0 -306 109 b -355 359 -351 302 -355 331 b -39 718 -355 539 -221 700 l -27 720 m 39 691 b -13 692 32 691 4 692 b -25 692 -19 692 -23 692 b -326 383 -190 675 -314 548 l -326 374 l -1 374 l 325 374 l 325 383 b 39 691 314 541 197 667 m 325 337 l 325 345 l -1 345 l -326 345 l -326 337 b -55 33 -315 184 -204 58 b -1 29 -34 29 -29 29 b 54 33 28 29 32 29 b 325 337 201 58 314 184 \"},\"v6f\":{\"x_min\":-80.3125,\"x_max\":78.9375,\"ha\":81,\"o\":\"m 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 \"},\"v70\":{\"x_min\":0,\"x_max\":436.921875,\"ha\":446,\"o\":\"m 213 190 b 217 191 215 191 216 191 b 231 184 223 191 228 188 b 249 154 240 167 246 159 b 419 18 292 91 348 45 b 436 -1 435 11 436 8 b 424 -16 436 -9 434 -13 b 308 -87 394 -26 340 -59 b 231 -186 276 -117 257 -142 b 219 -192 228 -191 225 -192 b 198 -174 209 -192 208 -191 b 47 -33 161 -113 110 -63 b 10 -16 34 -26 17 -19 b 0 -1 2 -13 0 -9 b 17 18 0 8 1 11 b 198 173 95 48 156 101 b 213 190 206 187 208 188 \"},\"v71\":{\"x_min\":-25.859375,\"x_max\":347.078125,\"ha\":354,\"o\":\"m 313 155 b 321 156 315 156 318 156 b 334 154 325 156 330 155 b 347 131 343 148 347 140 b 341 113 347 126 345 120 b 336 101 340 111 337 105 b 311 -1 319 69 311 34 b 341 -115 311 -40 322 -79 b 347 -133 345 -120 347 -127 b 321 -158 347 -147 337 -158 b 296 -148 314 -158 311 -158 b 6 -29 221 -97 111 -52 b -13 -23 -10 -26 -10 -26 b -25 -1 -21 -19 -25 -9 b -12 23 -25 8 -21 18 b 5 27 -9 23 -2 26 b 296 147 115 52 220 95 b 313 155 307 152 310 155 \"},\"v72\":{\"x_min\":-423.3125,\"x_max\":421.9375,\"ha\":431,\"o\":\"m -262 197 b -247 197 -257 197 -253 197 b -118 162 -210 197 -163 184 b 40 45 -61 134 -13 98 b 277 -95 119 -33 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -55 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 201 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 136 b 421 22 421 37 421 29 b 245 -199 421 -93 338 -199 b 238 -198 243 -199 240 -199 b -44 -47 148 -194 50 -141 b -250 86 -114 22 -183 66 b -295 94 -270 91 -283 94 b -315 91 -302 94 -307 94 b -381 4 -356 81 -381 43 b -355 -56 -381 -18 -372 -40 b -298 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -178 -69 -200 -58 -189 -62 b -151 -122 -160 -81 -151 -101 b -171 -167 -151 -138 -157 -155 b -239 -195 -185 -181 -213 -192 b -257 -197 -245 -197 -250 -197 b -423 -5 -352 -197 -423 -109 b -412 65 -423 16 -419 40 b -262 197 -389 137 -329 188 \"},\"v73\":{\"x_min\":0,\"x_max\":347.078125,\"ha\":354,\"o\":\"m 231 818 b 239 821 234 820 236 821 b 251 816 243 821 249 818 b 258 800 255 811 255 810 b 341 587 273 725 304 646 l 347 578 l 347 573 l 347 571 b 329 553 347 560 338 553 b 318 556 325 553 322 555 b 264 577 302 567 283 574 b 258 578 261 577 259 578 b 258 577 258 578 258 578 b 258 576 258 577 258 577 b 259 416 259 574 259 542 l 259 258 l 285 265 b 318 270 302 269 311 270 b 336 259 328 270 332 267 b 337 208 336 256 337 233 b 336 158 337 184 336 159 b 302 140 332 148 329 147 b 259 130 266 131 259 130 b 259 65 259 130 259 104 b 259 20 259 51 259 36 l 259 -88 l 285 -81 b 318 -76 302 -77 311 -76 b 332 -81 325 -76 328 -77 b 337 -123 336 -87 337 -86 l 337 -138 l 337 -154 b 332 -195 337 -191 336 -190 b 281 -210 328 -199 328 -199 b 262 -216 272 -213 264 -216 l 259 -216 l 259 -349 l 259 -483 l 258 -487 b 239 -499 254 -495 246 -499 b 220 -487 231 -499 223 -495 l 219 -483 l 217 -355 l 217 -227 l 216 -227 l 194 -233 l 152 -244 b 129 -249 140 -247 130 -249 b 127 -410 127 -249 127 -258 b 127 -576 127 -548 127 -573 b 126 -578 126 -577 126 -578 b 127 -580 126 -578 126 -580 b 133 -578 129 -580 130 -578 b 186 -557 152 -576 170 -569 b 197 -555 190 -556 194 -555 b 215 -573 206 -555 215 -562 l 215 -574 l 215 -580 l 209 -588 b 126 -802 172 -648 141 -727 b 107 -823 123 -817 118 -823 b 87 -798 95 -823 91 -817 b 5 -588 69 -718 40 -648 l 0 -580 l 0 -574 b 0 -573 0 -574 0 -574 b 16 -555 0 -562 6 -555 b 27 -557 20 -555 24 -556 b 81 -578 44 -569 62 -576 b 87 -580 84 -578 85 -580 b 88 -578 88 -580 88 -580 b 87 -576 88 -578 88 -577 b 87 -416 87 -573 87 -549 b 85 -260 87 -270 87 -260 b 85 -260 85 -260 85 -260 b 32 -273 74 -263 35 -273 b 13 -260 24 -273 16 -267 b 12 -209 12 -256 12 -256 l 12 -162 l 13 -158 b 74 -134 17 -148 17 -148 l 87 -131 l 87 -22 b 85 86 87 79 87 86 b 85 86 85 86 85 86 b 32 74 74 83 35 74 b 13 86 24 74 16 79 b 12 137 12 90 12 90 l 12 184 l 13 188 b 73 212 17 198 17 198 l 87 215 l 87 348 l 87 481 l 88 485 b 107 498 92 494 99 498 b 126 485 115 498 122 494 l 127 481 l 127 353 l 127 226 l 133 226 b 172 235 136 227 153 231 l 212 247 l 217 248 l 217 409 b 219 574 217 546 217 571 b 219 577 219 576 219 577 b 219 578 219 578 219 578 b 213 577 217 578 216 577 b 159 556 194 574 175 567 b 148 553 155 555 152 553 b 130 571 138 553 130 560 l 130 573 l 130 578 l 136 587 b 219 796 172 646 200 717 b 231 818 221 813 224 816 m 217 9 b 217 119 217 70 217 119 l 217 119 b 194 113 217 119 206 116 l 152 102 b 129 97 140 99 130 97 b 127 -12 127 97 127 91 l 127 -122 l 133 -120 b 172 -111 136 -119 153 -115 l 212 -101 l 217 -98 l 217 9 \"},\"v74\":{\"x_min\":-206.890625,\"x_max\":428.75,\"ha\":438,\"o\":\"m 389 -351 b 394 -351 390 -351 393 -351 b 428 -385 413 -351 428 -367 b 428 -394 428 -388 428 -391 b 394 -428 426 -406 421 -410 l 332 -473 l 269 -516 l 205 -560 l 141 -603 l 77 -648 l 13 -692 l -50 -737 l -114 -780 l -145 -802 b -171 -813 -157 -810 -163 -813 b -175 -813 -172 -813 -174 -813 b -206 -777 -194 -811 -206 -795 b -202 -760 -206 -771 -205 -766 b -87 -675 -197 -752 -206 -757 l -34 -639 l 83 -557 l 145 -514 l 209 -470 l 272 -427 b 389 -351 375 -356 381 -352 \"},\"v75\":{\"x_min\":-149.71875,\"x_max\":148.359375,\"ha\":151,\"o\":\"m -137 381 b -130 383 -134 383 -133 383 b -111 371 -122 383 -114 378 b -55 224 -110 370 -85 305 b 0 80 -25 145 -1 80 b 54 224 0 80 24 145 b 112 377 114 384 110 373 b 127 384 118 381 122 384 b 148 362 138 384 148 374 l 148 356 l 83 183 b 16 9 47 88 17 11 b -1 0 12 2 5 0 b -14 5 -5 0 -10 1 b -84 183 -19 9 -13 -6 l -149 356 l -149 362 b -137 381 -149 371 -145 378 \"},\"v76\":{\"x_min\":0,\"x_max\":737.71875,\"ha\":753,\"o\":\"m 9 13 b 208 15 10 15 51 15 b 368 15 251 15 304 15 l 726 15 l 729 12 b 737 -1 735 9 737 4 b 729 -15 737 -6 735 -11 l 726 -16 l 660 -16 l 592 -16 l 592 -95 l 592 -174 l 368 -174 l 144 -174 l 144 -95 l 144 -16 l 77 -16 l 9 -16 l 6 -15 b 0 -1 1 -11 0 -6 b 9 13 0 5 2 11 \"},\"v77\":{\"x_min\":-209.609375,\"x_max\":208.25,\"ha\":213,\"o\":\"m -197 19 b 1 20 -194 19 -96 20 b 196 19 98 20 193 19 b 208 -1 204 15 208 6 b 202 -15 208 -6 206 -11 b 95 -22 197 -20 212 -22 b -1 -22 69 -22 38 -22 b -96 -22 -39 -22 -70 -22 b -204 -15 -213 -22 -198 -20 b -209 -1 -208 -11 -209 -6 b -197 19 -209 6 -205 15 \"},\"v78\":{\"x_min\":0,\"x_max\":193.28125,\"ha\":197,\"o\":\"m 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 \"},\"v79\":{\"x_min\":-1.359375,\"x_max\":899.703125,\"ha\":918,\"o\":\"m 307 349 b 332 351 315 351 323 351 b 443 340 367 351 408 347 b 741 47 607 306 720 195 b 744 0 743 31 744 16 b 660 -303 744 -90 713 -206 b 28 -755 534 -531 304 -695 b 14 -756 23 -755 19 -756 b -1 -741 4 -756 -1 -750 b 21 -720 -1 -731 1 -728 b 567 -56 337 -601 548 -344 b 568 -11 568 -41 568 -24 b 442 285 568 129 525 233 b 325 319 406 308 367 319 b 93 177 232 319 137 266 b 84 154 91 170 84 155 b 84 154 84 154 84 154 b 88 156 84 154 85 155 b 159 177 110 170 134 177 b 257 134 194 177 231 162 b 294 41 281 108 294 73 b 171 -97 294 -24 246 -90 b 156 -98 166 -97 161 -98 b 6 74 73 -98 6 -22 b 6 80 6 76 6 79 b 307 349 10 223 141 340 m 839 215 b 845 216 841 216 842 216 b 862 213 852 216 860 215 b 899 163 887 206 899 184 b 872 117 899 145 890 127 b 847 111 865 112 856 111 b 808 130 833 111 818 117 b 796 162 800 140 796 151 b 839 215 796 187 812 212 m 839 -112 b 845 -112 841 -112 842 -112 b 862 -115 852 -112 860 -113 b 899 -165 887 -122 899 -144 b 872 -210 899 -183 890 -201 b 847 -217 865 -215 856 -217 b 808 -198 833 -217 818 -210 b 796 -165 800 -188 796 -177 b 839 -112 796 -140 812 -116 \"},\"v7a\":{\"x_min\":-1.359375,\"x_max\":386.5625,\"ha\":394,\"o\":\"m 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 \"},\"v7b\":{\"x_min\":-212.328125,\"x_max\":210.96875,\"ha\":215,\"o\":\"m -8 216 b -1 217 -6 216 -4 217 b 19 204 8 217 16 212 b 20 111 20 201 20 199 l 20 20 l 107 20 b 142 20 121 20 133 20 b 205 13 205 20 198 19 b 210 0 209 9 210 4 b 198 -20 210 -9 206 -16 b 107 -22 194 -22 193 -22 l 20 -22 l 20 -112 b 20 -148 20 -126 20 -138 b 13 -212 20 -213 19 -206 b 0 -219 9 -216 4 -219 b -20 -205 -8 -219 -16 -213 b -21 -112 -21 -202 -21 -201 l -21 -22 l -108 -22 b -200 -20 -194 -22 -196 -22 b -212 0 -208 -16 -212 -9 b -206 13 -212 4 -210 9 b -144 20 -200 19 -206 20 b -108 20 -134 20 -122 20 l -21 20 l -21 111 b -20 204 -21 199 -21 201 b -8 216 -17 209 -13 213 \"},\"v7c\":{\"x_min\":0,\"x_max\":300.8125,\"ha\":307,\"o\":\"m 49 505 b 53 506 50 505 51 506 b 70 496 58 506 62 503 b 81 485 73 492 78 488 l 96 473 l 111 459 l 122 449 l 134 438 l 182 396 l 255 330 b 292 291 292 298 292 298 l 292 290 l 292 284 l 283 270 b 209 36 234 197 209 113 b 288 -170 209 -44 235 -119 b 299 -184 295 -179 299 -181 b 300 -191 300 -187 300 -188 b 285 -206 300 -199 294 -206 b 280 -206 283 -206 281 -206 b 247 -201 270 -202 259 -201 b 176 -222 223 -201 197 -208 b 114 -340 136 -249 114 -292 b 172 -471 114 -384 134 -433 b 185 -492 182 -481 185 -487 b 181 -502 185 -496 183 -499 b 171 -508 176 -505 174 -508 b 152 -498 166 -508 160 -503 b 0 -284 65 -428 12 -352 b 0 -260 0 -278 0 -270 b 1 -238 0 -252 0 -242 b 148 -140 16 -177 73 -140 b 209 -148 167 -140 189 -142 b 215 -149 212 -148 215 -149 b 215 -149 215 -149 215 -149 l 215 -149 b 201 -136 215 -148 209 -142 l 157 -97 l 96 -41 b 17 34 21 24 17 29 b 17 37 17 36 17 36 b 17 38 17 37 17 38 b 25 56 17 44 17 44 b 110 298 81 131 110 219 b 46 474 110 367 88 431 b 38 491 40 480 38 487 b 49 505 38 498 42 502 \"},\"v7d\":{\"x_min\":-1.359375,\"x_max\":436.921875,\"ha\":446,\"o\":\"m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 \"},\"v7e\":{\"x_min\":-390.640625,\"x_max\":389.28125,\"ha\":397,\"o\":\"m -377 -1 b -368 0 -375 -1 -372 0 b -362 -1 -366 0 -363 -1 b -343 -24 -356 -4 -352 -8 l -285 -119 l -187 -280 l -88 -444 l -35 -533 b -31 -538 -32 -537 -32 -538 b -28 -534 -31 -538 -29 -537 l -23 -526 l -19 -517 l -13 -509 l -8 -501 l -2 -492 l 2 -483 l 6 -476 l 17 -458 l 23 -449 l 32 -433 l 38 -424 l 42 -416 l 47 -408 l 53 -399 l 58 -391 l 63 -381 l 68 -373 l 73 -365 l 78 -356 l 84 -348 l 89 -340 l 93 -330 l 99 -322 l 104 -315 l 114 -297 l 125 -280 l 129 -272 l 134 -263 l 140 -255 l 145 -247 l 151 -238 l 155 -230 l 160 -220 l 166 -212 l 171 -204 l 176 -195 l 181 -187 l 186 -177 l 191 -169 l 196 -162 l 201 -154 l 206 -144 l 217 -127 l 221 -119 l 227 -111 l 232 -102 l 238 -94 l 242 -86 l 247 -77 l 253 -69 l 258 -59 l 262 -51 l 268 -43 l 273 -34 l 279 -26 l 283 -18 b 321 -1 292 -2 292 -1 b 338 -1 326 -1 332 -1 b 382 -6 378 -1 375 -1 b 389 -20 386 -9 389 -15 b 382 -38 389 -26 386 -31 l 378 -47 l 372 -55 l 367 -63 l 362 -72 l 356 -80 l 351 -90 l 347 -98 l 341 -106 l 336 -115 l 330 -123 l 325 -131 l 321 -141 l 315 -149 l 310 -158 l 304 -166 l 299 -174 b 295 -183 298 -177 296 -181 l 289 -191 l 285 -199 l 280 -208 l 274 -216 l 269 -224 l 264 -233 l 259 -242 l 254 -251 l 249 -259 l 243 -267 l 238 -276 l 234 -284 l 228 -292 l 223 -302 l 217 -310 l 213 -319 l 208 -327 b 202 -335 206 -330 204 -334 l 197 -344 l 193 -351 l 187 -360 l 182 -369 l 176 -377 l 172 -385 l 167 -394 l 161 -403 l 156 -412 l 152 -420 l 147 -428 l 141 -437 l 136 -445 l 130 -455 l 126 -463 l 121 -471 l 115 -480 b 110 -488 114 -483 111 -487 l 106 -496 l 100 -503 l 96 -512 l 89 -521 l 85 -530 l 80 -538 l 74 -546 l 69 -555 l 65 -564 l 59 -573 l 54 -581 l 49 -589 l 43 -598 l 39 -606 l 34 -616 l 28 -624 l 23 -632 b 19 -641 21 -635 20 -638 b 0 -653 14 -649 8 -653 b -25 -631 -10 -653 -14 -649 l -80 -541 l -359 -79 b -389 -29 -375 -52 -389 -30 b -390 -22 -389 -26 -390 -24 b -377 -1 -390 -13 -385 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 51 -36 19 -8 39 -19 b 61 -72 58 -47 61 -59 b 51 -106 61 -84 58 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -127 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 \"},\"v7f\":{\"x_min\":0,\"x_max\":367.5,\"ha\":375,\"o\":\"m 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 \"},\"v80\":{\"x_min\":29.9375,\"x_max\":420.578125,\"ha\":371,\"o\":\"m 115 345 b 221 347 117 345 166 347 b 411 345 306 347 409 345 b 420 330 416 342 420 335 b 415 319 420 326 419 321 b 178 118 397 303 179 118 b 178 117 178 118 178 117 b 181 117 178 117 178 117 b 189 117 182 117 185 117 b 193 117 190 117 191 117 b 247 98 215 117 232 111 b 296 75 266 83 280 76 b 302 75 299 75 300 75 b 322 91 311 75 315 79 b 322 91 322 91 322 91 b 322 91 322 91 322 91 b 319 91 322 91 321 91 b 313 90 318 90 315 90 b 283 107 300 90 288 97 b 277 126 279 114 277 121 b 319 167 277 149 295 167 b 319 167 319 167 319 167 b 362 118 347 167 362 147 b 355 82 362 108 359 96 b 311 33 349 65 340 55 b 224 1 284 12 253 1 b 194 5 213 1 204 2 b 168 18 183 8 178 11 b 110 36 151 30 130 36 b 57 15 88 36 68 29 b 47 11 54 12 51 11 b 31 20 40 11 34 13 b 29 26 31 22 29 25 b 68 66 29 36 39 45 b 285 250 73 71 281 248 b 285 250 285 250 285 250 b 231 252 285 252 261 252 b 137 250 190 252 141 250 b 93 227 122 248 110 241 b 78 220 88 222 83 220 b 66 227 74 220 70 222 b 63 234 65 229 63 231 b 85 291 63 241 69 252 b 115 345 108 342 108 344 \"},\"v81\":{\"x_min\":0,\"x_max\":428.75,\"ha\":438,\"o\":\"m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 m 366 131 b 352 134 362 133 357 134 b 219 81 321 134 269 115 b 47 -111 126 23 50 -62 b 47 -112 47 -111 47 -112 b 77 -136 47 -129 58 -136 b 264 -45 118 -136 194 -101 b 382 109 336 12 382 76 b 366 131 382 120 377 129 \"},\"v82\":{\"x_min\":0,\"x_max\":607.0625,\"ha\":619,\"o\":\"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 \"},\"v83\":{\"x_min\":-1.359375,\"x_max\":847.96875,\"ha\":865,\"o\":\"m 488 1499 b 495 1500 490 1500 492 1500 b 541 1465 507 1500 521 1490 b 679 1078 622 1372 679 1210 b 677 1050 679 1068 677 1060 b 477 642 668 893 604 764 l 443 609 l 431 596 l 431 592 l 438 562 l 449 508 l 460 458 b 481 355 475 390 481 355 b 481 355 481 355 481 355 b 490 356 481 355 485 355 b 528 358 495 356 511 358 b 558 356 540 358 552 356 b 839 95 699 338 808 237 b 847 22 845 72 847 47 b 631 -303 847 -113 766 -242 b 620 -309 623 -308 620 -309 l 620 -310 b 631 -359 620 -310 626 -333 l 646 -435 l 660 -496 b 672 -588 668 -535 672 -563 b 664 -653 672 -610 669 -630 b 383 -875 630 -792 509 -875 b 201 -810 321 -875 257 -855 b 129 -680 151 -768 129 -730 b 274 -530 129 -592 200 -530 b 351 -553 300 -530 326 -538 b 412 -669 393 -582 412 -626 b 287 -805 412 -735 366 -800 l 279 -805 l 285 -809 b 383 -830 318 -823 351 -830 b 586 -718 464 -830 540 -789 b 626 -584 612 -678 626 -631 b 619 -528 626 -566 623 -548 b 612 -495 619 -526 616 -510 b 577 -324 590 -387 577 -324 b 577 -324 577 -324 577 -324 b 568 -326 575 -324 571 -324 b 528 -334 558 -328 537 -333 b 465 -338 506 -337 485 -338 b 24 -11 269 -338 87 -206 b -1 145 8 41 -1 93 b 96 442 -1 249 32 351 b 322 714 166 541 236 626 l 352 745 l 345 782 l 332 843 l 315 921 b 303 984 310 950 304 978 b 295 1082 298 1017 295 1049 b 413 1426 295 1208 336 1329 b 488 1499 436 1456 477 1496 m 549 1301 b 541 1301 547 1301 544 1301 b 411 1207 500 1301 447 1263 b 355 1004 374 1152 355 1079 b 359 942 355 984 356 963 b 371 881 362 927 363 917 l 385 818 b 392 782 389 799 392 784 l 392 782 b 434 828 393 782 424 816 b 607 1165 534 941 594 1060 b 608 1193 608 1175 608 1183 b 597 1270 608 1224 604 1254 b 549 1301 589 1286 571 1299 m 398 528 b 393 555 396 542 393 553 b 392 555 393 555 393 555 b 317 470 390 555 347 505 b 190 298 266 408 212 334 b 127 70 148 227 127 148 b 155 -77 127 19 137 -30 b 468 -303 209 -216 333 -303 b 519 -299 484 -303 502 -302 b 568 -284 541 -295 568 -287 l 568 -284 b 563 -263 568 -284 566 -274 l 534 -120 l 511 -13 l 496 61 l 480 133 b 469 187 472 176 469 187 b 468 188 469 187 469 188 b 416 162 462 188 430 172 b 337 13 364 126 337 69 b 413 -124 337 -40 363 -93 b 428 -144 424 -131 428 -137 b 428 -149 428 -145 428 -148 b 409 -166 426 -161 419 -166 b 394 -162 405 -166 400 -165 b 240 77 302 -122 240 -27 l 240 77 b 430 342 240 197 315 301 l 436 344 l 426 394 l 398 528 m 548 194 b 526 195 540 195 532 195 b 519 195 524 195 521 195 l 514 195 l 518 177 l 539 79 l 552 15 l 566 -48 l 594 -187 l 605 -240 b 612 -266 609 -254 611 -266 b 612 -266 612 -266 612 -266 b 641 -248 613 -266 630 -256 b 744 -98 692 -212 730 -156 b 751 -40 749 -79 751 -59 b 548 194 751 76 665 181 \"},\"v84\":{\"x_min\":25.859375,\"x_max\":164.6875,\"ha\":168,\"o\":\"m 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 \"},\"v85\":{\"x_min\":-21.78125,\"x_max\":251.8125,\"ha\":257,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 \"},\"v86\":{\"x_min\":-571.671875,\"x_max\":570.3125,\"ha\":582,\"o\":\"m -386 173 b -381 174 -385 174 -383 174 b -370 173 -377 174 -372 173 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 277 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 125 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 43 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -392 172 -566 -43 -396 167 b -386 173 -390 172 -387 173 \"},\"v87\":{\"x_min\":0,\"x_max\":0,\"ha\":263},\"v88\":{\"x_min\":-1.359375,\"x_max\":413.78125,\"ha\":422,\"o\":\"m 99 692 b 107 694 102 692 104 694 b 121 688 112 694 117 691 b 126 673 123 685 125 682 b 209 460 141 598 172 519 l 215 451 l 215 445 l 215 445 b 197 426 215 434 206 426 b 186 430 194 426 190 427 b 133 449 170 440 152 446 b 127 451 130 449 129 451 b 126 449 126 451 126 451 b 127 446 126 449 127 448 b 127 324 127 444 127 424 b 129 205 127 259 129 205 b 215 227 129 205 167 215 b 308 249 283 244 300 249 b 315 247 311 249 313 248 b 325 237 319 245 323 241 l 326 233 l 326 -105 b 326 -262 326 -167 326 -219 b 326 -448 326 -416 326 -445 b 325 -451 325 -449 325 -451 b 326 -452 325 -452 325 -452 b 330 -451 326 -452 329 -451 b 385 -431 351 -448 368 -441 b 396 -427 389 -428 393 -427 b 413 -446 405 -427 413 -435 l 413 -446 l 413 -452 l 408 -462 b 325 -674 371 -520 340 -599 b 306 -695 322 -689 317 -695 b 285 -670 294 -695 289 -689 b 204 -462 268 -591 239 -520 l 197 -452 l 197 -446 l 197 -446 b 215 -427 197 -435 205 -427 b 225 -431 219 -427 223 -428 b 280 -451 243 -441 261 -448 b 285 -452 283 -452 284 -452 b 287 -451 287 -452 287 -452 b 285 -448 287 -451 287 -449 b 285 -323 285 -445 285 -426 b 284 -201 285 -247 284 -201 b 197 -223 284 -201 245 -210 b 104 -245 129 -240 111 -245 b 98 -242 102 -245 100 -244 b 88 -233 93 -241 89 -237 l 87 -230 l 87 106 b 87 262 87 169 87 220 b 87 446 87 415 87 444 b 88 449 88 448 88 449 b 87 451 88 451 88 451 b 81 449 85 451 84 451 b 27 430 62 446 44 440 b 16 426 24 427 20 426 b -1 445 6 426 -1 434 b 0 445 -1 445 0 445 l 0 451 l 5 460 b 87 669 40 519 69 589 b 99 692 91 685 92 688 m 284 22 b 285 70 285 41 285 58 b 284 116 285 113 284 116 l 284 116 b 205 97 283 116 247 106 l 127 77 l 127 -18 b 129 -112 127 -69 129 -112 l 206 -93 l 284 -73 l 284 22 \"},\"v89\":{\"x_min\":0,\"x_max\":737.71875,\"ha\":753,\"o\":\"m 144 94 l 144 173 l 368 173 l 592 173 l 592 94 l 592 15 l 660 15 l 726 15 l 729 12 b 737 -1 735 9 737 4 b 729 -15 737 -6 735 -11 l 726 -16 l 368 -16 l 9 -16 l 6 -15 b 0 -1 1 -11 0 -6 b 6 12 0 4 1 9 l 9 15 l 77 15 l 144 15 l 144 94 \"},\"v8a\":{\"x_min\":-170.140625,\"x_max\":168.78125,\"ha\":172,\"o\":\"m -160 567 b -122 567 -159 567 -149 567 l -87 567 l -84 566 b -74 553 -78 563 -77 560 b -20 366 -73 551 -49 466 b 31 186 8 267 31 186 b 85 371 31 186 55 269 b 140 559 114 473 138 557 b 153 567 141 564 148 567 b 168 559 159 567 166 564 b 168 555 168 557 168 557 b 92 281 168 548 159 513 b 14 13 50 134 14 13 b 0 0 14 6 6 0 b -17 15 -8 0 -17 8 b -93 283 -17 15 -51 136 b -170 552 -166 533 -170 548 b -170 553 -170 552 -170 552 b -160 567 -170 560 -167 564 \"},\"v8b\":{\"x_min\":0,\"x_max\":319.859375,\"ha\":326,\"o\":\"m 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 \"},\"v8c\":{\"x_min\":-330.75,\"x_max\":329.390625,\"ha\":336,\"o\":\"m -133 483 b -117 484 -127 484 -122 484 b 31 373 -51 484 9 440 b 35 348 34 365 35 356 b -25 285 35 313 10 285 b -87 331 -55 285 -76 302 b -167 402 -100 376 -133 402 b -191 398 -175 402 -183 401 b -227 341 -215 388 -227 369 b -225 320 -227 334 -227 327 b -13 74 -209 230 -125 133 b 6 65 -4 70 5 66 l 9 63 l 10 65 b 117 231 12 68 40 112 l 189 341 l 242 424 b 268 460 262 456 264 458 b 283 464 273 463 277 464 b 308 438 296 464 308 453 l 308 437 b 287 396 308 430 308 428 l 95 98 l 59 43 l 58 41 l 65 37 b 253 -156 151 -8 217 -77 b 281 -285 272 -199 281 -244 b 148 -481 281 -381 231 -463 b 115 -485 137 -484 126 -485 b -32 -376 51 -485 -9 -442 b -36 -349 -35 -366 -36 -358 b 25 -287 -36 -315 -12 -287 b 85 -333 54 -287 74 -302 b 166 -403 99 -377 133 -403 b 190 -399 174 -403 182 -402 b 225 -342 215 -390 225 -370 b 224 -322 225 -335 225 -328 b 12 -76 208 -231 125 -134 b -8 -66 2 -72 -6 -68 l -10 -65 l -12 -66 b -118 -231 -13 -68 -42 -113 l -190 -342 l -243 -426 b -269 -462 -264 -458 -265 -458 b -284 -466 -274 -464 -279 -466 b -310 -440 -298 -466 -310 -455 l -310 -438 b -288 -398 -310 -430 -308 -430 l -96 -99 l -59 -44 l -59 -43 l -66 -38 b -281 284 -198 33 -281 158 l -281 284 b -133 483 -281 392 -220 474 m 254 177 b 266 179 258 177 262 179 b 319 149 287 179 307 167 b 329 115 326 140 329 127 b 319 79 329 102 326 90 b 268 51 307 61 287 51 b 221 72 250 51 234 58 b 205 115 210 84 205 99 b 254 177 205 142 223 170 m -281 -54 b -269 -52 -277 -52 -273 -52 b -223 -73 -253 -52 -235 -59 b -206 -116 -212 -84 -206 -101 b -216 -151 -206 -129 -209 -141 b -269 -179 -228 -170 -249 -179 b -314 -159 -285 -179 -302 -173 b -330 -116 -325 -147 -330 -131 b -281 -54 -330 -88 -313 -61 \"},\"v8d\":{\"x_min\":-1.359375,\"x_max\":255.890625,\"ha\":261,\"o\":\"m 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 \"},\"v8e\":{\"x_min\":-299.4375,\"x_max\":298.078125,\"ha\":304,\"o\":\"m -281 174 b -274 174 -280 174 -277 174 b -259 173 -270 174 -265 174 l -40 112 l 224 40 b 287 20 289 22 283 23 b 298 0 295 16 298 8 b 287 -22 298 -9 295 -18 b 287 -23 287 -23 287 -23 b 287 -23 287 -23 287 -23 b -40 -113 287 -24 270 -29 l -259 -174 b -274 -176 -265 -176 -270 -176 b -288 -172 -280 -176 -284 -174 b -299 -151 -296 -167 -299 -159 b -288 -129 -299 -141 -296 -133 b -98 -74 -284 -124 -307 -131 l 42 -36 l 140 -9 b 170 0 156 -4 170 -1 b 140 8 170 0 156 2 l 42 34 l -98 73 b -287 126 -299 129 -284 124 b -299 149 -295 131 -299 140 b -281 174 -299 161 -294 170 \"},\"v8f\":{\"x_min\":-21.78125,\"x_max\":362.0625,\"ha\":369,\"o\":\"m 302 1031 b 308 1032 304 1032 307 1032 b 330 1016 318 1032 325 1027 b 362 867 351 970 362 920 b 340 738 362 824 353 780 l 336 727 l 340 717 b 362 591 355 677 362 634 b 257 323 362 496 325 401 b 204 272 243 306 227 290 b 20 56 129 206 66 133 b -1 18 12 44 0 22 b -19 4 -4 9 -12 4 l -21 4 l -21 140 l -21 276 l -12 277 b 167 333 61 288 127 309 b 319 598 262 388 319 491 b 311 664 319 620 317 642 l 310 673 l 304 664 b 204 548 279 620 250 587 b 20 333 129 483 66 409 b -1 292 12 320 0 298 b -19 280 -4 285 -12 280 l -21 280 l -21 416 l -21 552 l -12 553 b 167 609 61 564 127 585 b 319 874 264 666 319 770 b 294 992 319 914 311 954 b 288 1011 288 1004 288 1007 b 302 1031 288 1021 294 1028 \"},\"v90\":{\"x_min\":-171.5,\"x_max\":483.1875,\"ha\":493,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 495 20 616 20 616 b 20 373 20 427 20 373 b 115 410 20 373 63 390 l 210 448 l 210 531 b 212 620 210 614 210 616 b 231 632 215 628 223 632 b 246 627 236 632 242 631 b 251 541 251 620 251 628 l 251 463 l 315 489 b 387 514 368 509 381 514 b 393 513 390 514 392 514 b 406 494 402 510 406 502 b 397 476 406 487 404 480 b 323 446 396 474 363 462 l 251 417 l 251 283 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -19 -217 -9 -229 -16 -224 l -20 -215 l -21 48 l -21 310 l -83 287 b -152 262 -133 266 -145 262 b -157 263 -153 262 -155 262 b -171 283 -166 266 -171 274 b -161 301 -171 290 -167 297 b -91 328 -160 302 -129 315 l -21 356 l -21 487 l -20 617 l -19 621 b -8 631 -17 626 -12 630 m 210 288 b 210 401 210 351 210 401 b 114 365 209 401 167 384 l 20 327 l 20 238 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 180 164 199 187 192 l 209 177 b 209 177 209 177 209 177 b 210 288 210 177 210 199 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 \"},\"v91\":{\"x_min\":-355.25,\"x_max\":353.890625,\"ha\":361,\"o\":\"m -27 720 b -13 721 -24 720 -20 721 b 42 718 4 721 34 720 b 343 446 190 699 308 591 b 353 360 349 417 353 390 b 84 9 353 197 245 49 b 0 0 55 2 27 0 b -344 273 -160 0 -306 109 b -355 359 -351 302 -355 331 b -39 718 -355 539 -221 700 l -27 720 m 39 691 b -13 692 32 691 4 692 b -25 692 -19 692 -23 692 b -322 416 -178 677 -296 566 b -326 360 -325 394 -326 390 b -325 323 -326 341 -325 328 b -36 29 -303 163 -193 51 b -1 29 -31 29 -16 29 b 35 29 14 29 29 29 b 323 323 191 51 302 163 b 325 360 323 328 325 341 b 321 416 325 390 323 394 b 39 691 296 560 185 669 m -12 655 b -4 655 -9 655 -6 655 b 20 652 4 655 14 653 b 66 585 50 642 66 613 b 32 524 66 562 55 538 b 25 521 28 523 25 521 b 16 403 25 520 16 408 b 16 403 16 403 16 403 l 16 403 b 54 448 17 403 34 423 l 92 492 l 89 499 b 87 519 88 506 87 513 b 103 564 87 535 92 552 b 155 589 117 581 136 589 b 216 551 179 589 204 576 b 224 520 221 541 224 530 b 156 449 224 483 193 449 b 136 453 149 449 142 451 l 129 455 l 85 416 b 42 377 61 395 42 378 l 42 377 l 42 377 b 156 387 46 377 156 387 b 160 394 156 387 159 390 b 220 430 172 417 197 430 b 280 394 243 430 266 417 b 288 360 285 384 288 371 b 280 326 288 348 285 337 b 220 291 266 302 243 291 b 160 327 197 291 172 302 b 156 333 159 330 156 333 b 42 342 156 333 46 342 b 42 342 42 342 42 342 l 42 342 b 85 303 42 342 61 324 l 129 265 l 136 267 b 155 270 142 269 148 270 b 198 254 171 270 186 265 b 223 201 216 240 223 220 b 186 138 223 176 210 151 b 155 131 176 133 166 131 b 87 201 119 131 87 162 b 89 220 87 206 88 213 l 92 227 l 54 272 b 16 316 34 297 17 316 l 16 316 b 16 316 16 316 16 316 b 25 199 16 313 25 199 b 32 195 25 199 28 198 b 68 134 55 183 68 158 b 32 73 68 111 55 87 b -1 65 23 68 10 65 b -34 73 -12 65 -24 68 b -69 134 -57 87 -69 111 b -34 195 -69 158 -57 183 b -27 199 -29 198 -27 199 b -17 316 -27 199 -17 313 b -17 316 -17 316 -17 316 l -17 316 b -55 272 -19 316 -35 297 l -93 227 l -91 220 b -88 201 -89 215 -88 208 b -104 156 -88 184 -93 169 b -156 131 -118 140 -137 131 b -217 169 -181 131 -205 144 b -225 201 -223 179 -225 190 b -157 270 -225 238 -194 270 b -137 267 -151 270 -144 269 l -130 265 l -87 303 b -43 342 -62 324 -43 342 l -43 342 b -43 342 -43 342 -43 342 b -157 333 -47 342 -157 333 b -161 327 -159 333 -160 330 b -221 291 -175 302 -198 291 b -281 326 -245 291 -268 302 b -289 360 -287 337 -289 348 b -281 394 -289 371 -287 384 b -221 430 -268 417 -245 430 b -161 394 -198 430 -175 417 b -157 387 -160 390 -159 387 b -43 377 -157 387 -47 377 l -43 377 l -43 377 b -87 416 -43 378 -62 395 l -130 455 l -137 453 b -156 449 -144 451 -149 449 b -200 466 -172 449 -187 455 b -224 520 -217 480 -224 499 b -187 581 -224 545 -212 569 b -156 589 -178 587 -167 589 b -88 520 -121 589 -88 559 b -91 499 -88 513 -89 506 l -93 492 l -55 448 b -17 403 -35 423 -19 403 l -17 403 b -17 403 -17 403 -17 403 b -27 521 -17 408 -27 520 b -34 524 -27 521 -29 523 b -68 585 -57 538 -68 562 b -12 655 -68 617 -47 649 \"},\"v92\":{\"x_min\":0,\"x_max\":598.890625,\"ha\":611,\"o\":\"m 62 181 b 77 183 66 183 72 183 b 91 181 83 183 88 183 b 202 131 100 180 106 177 l 299 87 l 394 131 b 517 183 499 181 502 183 b 519 183 517 183 518 183 b 598 104 567 183 598 144 b 577 49 598 84 592 65 b 518 15 567 38 563 37 b 484 0 499 6 484 0 b 518 -16 484 -1 499 -8 b 577 -51 563 -38 567 -40 b 598 -105 592 -66 598 -86 b 519 -184 598 -145 567 -184 b 517 -184 518 -184 517 -184 b 394 -133 502 -184 499 -183 l 299 -88 l 202 -133 b 81 -184 99 -183 95 -184 b 77 -184 80 -184 78 -184 b 0 -105 29 -184 0 -145 b 20 -51 0 -86 5 -66 b 80 -16 29 -40 34 -38 b 114 -1 98 -8 114 -1 b 80 15 114 0 98 6 b 20 49 34 37 29 38 b 0 104 6 65 0 84 b 62 181 0 140 23 174 m 88 134 b 74 136 85 134 80 136 b 68 134 72 136 69 136 b 46 104 54 130 46 117 b 55 81 46 95 49 88 b 149 34 59 76 53 80 b 224 -1 190 15 224 0 b 144 -38 224 -1 187 -18 b 54 -84 59 -79 58 -79 b 46 -105 49 -90 46 -98 b 76 -137 46 -122 58 -137 b 78 -137 77 -137 77 -137 b 194 -86 87 -137 76 -141 b 298 -36 250 -58 298 -36 b 298 -36 298 -36 298 -36 b 402 -84 299 -36 345 -58 b 518 -137 522 -141 510 -137 b 521 -137 519 -137 519 -137 b 551 -105 539 -137 551 -122 b 541 -83 551 -98 548 -90 b 447 -36 537 -77 544 -81 b 374 -1 406 -16 374 -1 b 447 34 374 0 406 15 b 541 81 544 80 537 76 b 551 104 548 88 551 97 b 521 136 551 120 539 136 b 518 136 519 136 519 136 b 517 136 518 136 517 136 l 517 136 b 402 83 511 136 511 136 b 298 34 345 56 299 34 b 298 34 298 34 298 34 b 194 84 298 34 250 56 b 88 134 137 111 89 133 \"},\"v93\":{\"x_min\":0,\"x_max\":438.28125,\"ha\":447,\"o\":\"m 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 \"},\"v94\":{\"x_min\":-149.71875,\"x_max\":148.359375,\"ha\":151,\"o\":\"m -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 \"},\"v95\":{\"x_min\":0,\"x_max\":406.96875,\"ha\":415,\"o\":\"m 55 181 b 70 183 61 183 66 183 b 111 170 85 183 99 179 b 160 130 115 167 137 149 l 202 95 l 245 130 b 319 181 299 176 302 179 b 334 183 325 183 330 183 b 406 109 375 183 406 148 b 401 81 406 99 405 91 b 348 24 394 65 390 59 b 318 -1 332 11 318 0 b 348 -26 318 -1 332 -12 b 401 -83 390 -61 394 -66 b 406 -111 405 -93 406 -101 b 334 -184 406 -149 375 -184 b 319 -183 330 -184 325 -184 b 245 -131 302 -180 299 -177 l 202 -97 l 160 -131 b 85 -183 107 -177 103 -180 b 70 -184 80 -184 76 -184 b 0 -111 31 -184 0 -149 b 4 -83 0 -101 1 -93 b 58 -26 10 -66 16 -61 b 88 -1 74 -12 88 -1 b 58 24 88 0 74 11 b 10 69 23 54 17 59 b 0 109 2 81 0 95 b 55 181 0 142 21 173 m 83 133 b 72 136 78 136 76 136 b 57 131 66 136 61 134 b 46 109 49 126 46 117 b 50 93 46 104 47 98 b 107 45 51 91 77 70 b 160 0 137 20 160 0 b 107 -47 160 -1 137 -22 b 50 -94 77 -72 51 -93 b 46 -111 47 -99 46 -105 b 59 -134 46 -120 50 -130 b 72 -137 62 -136 68 -137 b 83 -136 76 -137 80 -136 b 144 -84 84 -134 107 -116 b 202 -36 176 -58 202 -36 b 261 -84 202 -36 230 -58 b 323 -136 299 -116 321 -134 b 334 -137 326 -136 330 -137 b 345 -134 338 -137 343 -136 b 360 -111 355 -130 360 -120 b 355 -94 360 -105 359 -99 b 299 -47 353 -93 329 -72 b 245 0 269 -22 245 -1 b 299 45 245 0 269 20 b 355 93 329 70 353 91 b 360 109 359 98 360 104 b 345 133 360 119 355 129 b 334 136 343 134 338 136 b 323 134 330 136 326 134 b 261 83 321 133 299 115 b 202 34 230 56 202 34 b 144 83 202 34 176 56 b 83 133 106 115 84 133 \"},\"v96\":{\"x_min\":0,\"x_max\":597.53125,\"ha\":610,\"o\":\"m 356 341 b 479 341 402 341 445 341 b 570 341 533 341 568 341 b 597 309 586 340 597 326 l 597 309 b 472 -320 597 305 475 -310 b 451 -341 469 -330 462 -337 b 242 -342 450 -342 347 -342 b 21 -341 134 -342 24 -342 b 0 -310 8 -337 0 -324 b 0 -310 0 -310 0 -310 b 123 316 0 -306 118 297 b 144 340 126 327 133 335 b 356 341 147 341 153 341 m 528 276 b 353 277 528 277 492 277 b 179 276 215 277 179 277 b 123 -1 179 276 153 151 l 68 -278 l 242 -278 b 310 -278 266 -278 289 -278 b 416 -278 372 -278 416 -278 b 528 276 417 -278 528 274 \"},\"v97\":{\"x_min\":-228.671875,\"x_max\":227.3125,\"ha\":232,\"o\":\"m -217 487 l -213 488 l 0 488 l 212 488 l 216 487 b 225 476 220 484 224 480 l 227 473 l 227 244 l 227 15 l 225 12 b 206 0 223 4 215 0 b 197 1 204 0 200 0 b 187 12 193 4 189 6 l 186 15 l 186 138 l 186 262 l -1 262 l -187 262 l -187 138 l -187 15 l -189 12 b -208 0 -193 4 -200 0 b -227 12 -216 0 -223 4 l -228 15 l -228 244 l -228 473 l -227 476 b -217 487 -225 480 -221 484 \"},\"v98\":{\"x_min\":-1.359375,\"x_max\":427.390625,\"ha\":436,\"o\":\"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 b 272 494 272 616 272 616 l 272 370 l 344 333 b 426 285 426 292 423 294 b 427 277 426 283 427 280 b 405 256 427 266 417 256 b 405 256 405 256 405 256 l 400 256 l 336 290 b 272 322 300 308 272 322 b 272 54 272 322 272 201 b 270 -216 272 -212 272 -212 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b -1 84 9 18 -1 52 b 111 199 -1 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 245 l 231 342 l 157 380 b 81 420 92 413 84 417 b 76 435 77 424 76 430 b 96 456 76 446 84 456 b 98 456 96 456 98 456 l 103 456 l 166 424 b 230 391 201 406 230 391 b 231 503 230 391 231 442 b 232 620 231 614 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 \"},\"v99\":{\"x_min\":0,\"x_max\":239.5625,\"ha\":244,\"o\":\"m 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 \"},\"v9a\":{\"x_min\":-21.78125,\"x_max\":367.5,\"ha\":375,\"o\":\"m 230 1031 b 238 1032 232 1032 235 1032 b 259 1014 245 1032 251 1027 b 367 662 330 906 367 782 b 364 602 367 641 367 621 b 232 317 352 488 304 384 b 57 120 155 245 103 187 b -1 18 31 84 6 40 b -19 4 -4 11 -12 4 l -21 4 l -21 159 l -21 315 l -16 315 b 96 335 10 315 62 324 b 315 695 227 380 315 527 b 313 738 315 709 314 724 b 224 991 304 825 273 916 b 216 1013 219 999 216 1007 b 230 1031 216 1021 220 1028 \"},\"v9b\":{\"x_min\":-24.5,\"x_max\":313.0625,\"ha\":319,\"o\":\"m -24 -133 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 142 -213 13 -61 74 -144 b 258 -376 196 -269 230 -315 b 313 -605 295 -449 313 -528 b 292 -742 313 -652 306 -699 b 288 -752 289 -748 288 -752 b 288 -752 288 -752 288 -752 b 292 -764 289 -753 291 -757 b 313 -907 306 -811 313 -860 b 292 -1045 313 -954 306 -1002 b 288 -1054 289 -1050 288 -1054 b 288 -1054 288 -1054 288 -1054 b 292 -1067 289 -1054 291 -1060 b 313 -1210 306 -1113 313 -1161 b 292 -1346 313 -1257 306 -1304 b 288 -1357 289 -1353 288 -1357 b 288 -1357 288 -1357 288 -1357 b 292 -1368 289 -1357 291 -1363 b 313 -1512 306 -1415 313 -1464 b 292 -1648 313 -1560 306 -1605 b 288 -1660 289 -1654 288 -1660 b 288 -1660 288 -1660 288 -1660 b 292 -1671 289 -1660 291 -1665 b 313 -1814 306 -1719 313 -1766 b 250 -2040 313 -1897 291 -1977 b 232 -2062 238 -2057 236 -2059 b 221 -2065 230 -2063 225 -2065 b 200 -2045 210 -2065 201 -2057 b 200 -2043 200 -2044 200 -2044 b 208 -2026 200 -2037 202 -2034 b 269 -1826 249 -1966 269 -1897 b 153 -1544 269 -1726 230 -1625 b -9 -1472 115 -1506 58 -1481 b -21 -1471 -14 -1471 -19 -1471 l -24 -1471 l -24 -1343 l -24 -1215 l -20 -1215 b -1 -1229 -12 -1215 -4 -1221 b 142 -1424 13 -1270 74 -1353 b 257 -1582 196 -1478 228 -1524 b 264 -1594 261 -1589 264 -1594 l 264 -1594 b 265 -1582 264 -1594 264 -1589 b 270 -1525 268 -1562 270 -1544 b 153 -1243 270 -1424 228 -1321 b -9 -1170 115 -1203 58 -1178 b -21 -1168 -14 -1170 -19 -1168 l -24 -1168 l -24 -1041 l -24 -913 l -20 -913 b -1 -927 -12 -913 -4 -918 b 142 -1121 13 -967 74 -1050 b 257 -1281 196 -1175 228 -1221 b 264 -1292 261 -1286 264 -1292 l 264 -1292 b 265 -1279 264 -1292 264 -1286 b 270 -1222 268 -1261 270 -1242 b 153 -941 270 -1121 228 -1018 b -9 -867 115 -900 58 -875 b -21 -866 -14 -867 -19 -866 l -24 -866 l -24 -738 l -24 -610 l -20 -610 b -1 -624 -12 -610 -4 -616 b 142 -818 13 -664 74 -749 b 257 -978 196 -873 228 -918 b 264 -989 261 -984 264 -989 l 264 -989 b 265 -977 264 -989 264 -984 b 270 -920 268 -959 270 -939 b 153 -638 270 -818 228 -716 b -9 -564 115 -598 58 -573 b -21 -563 -14 -564 -19 -563 l -24 -563 l -24 -435 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 142 -516 13 -363 74 -446 b 257 -675 196 -571 228 -616 b 264 -687 261 -681 264 -687 l 264 -687 b 265 -674 264 -687 264 -681 b 270 -617 268 -656 270 -637 b 153 -335 270 -516 228 -413 b -9 -262 115 -295 58 -270 b -21 -260 -14 -262 -19 -260 l -24 -260 l -24 -133 \"},\"v9c\":{\"x_min\":-166.0625,\"x_max\":-25.859375,\"ha\":0,\"o\":\"m -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 \"},\"v9d\":{\"x_min\":-1.359375,\"x_max\":326.671875,\"ha\":333,\"o\":\"m 99 692 b 107 694 102 692 104 694 b 121 688 112 694 117 691 b 126 673 123 685 125 682 b 209 460 141 598 172 519 l 215 451 l 215 445 l 215 445 b 197 426 215 434 206 426 b 186 430 194 426 190 427 b 133 449 170 440 152 446 b 127 451 130 449 129 451 b 126 449 126 451 126 451 b 127 446 126 449 127 448 b 127 324 127 444 127 424 b 129 205 127 259 129 205 b 215 227 129 205 167 215 b 308 249 283 244 300 249 b 315 247 311 249 313 248 b 325 237 319 245 323 241 l 326 233 l 326 -106 l 326 -448 l 325 -451 b 306 -463 321 -459 314 -463 b 287 -451 298 -463 291 -459 l 285 -448 l 285 -324 b 284 -201 285 -248 284 -201 b 197 -223 284 -201 245 -210 b 104 -245 129 -240 111 -245 b 98 -242 102 -245 100 -244 b 88 -233 93 -241 89 -237 l 87 -230 l 87 106 b 87 262 87 169 87 220 b 87 446 87 415 87 444 b 88 449 88 448 88 449 b 87 451 88 451 88 451 b 81 449 85 451 84 451 b 27 430 62 446 44 440 b 16 426 24 427 20 426 b -1 445 6 426 -1 434 b 0 445 -1 445 0 445 l 0 451 l 5 460 b 87 669 40 519 69 589 b 99 692 91 685 92 688 m 284 22 b 285 70 285 41 285 58 b 284 116 285 113 284 116 l 284 116 b 205 97 283 116 247 106 l 127 77 l 127 -18 b 129 -112 127 -69 129 -112 l 206 -93 l 284 -73 l 284 22 \"},\"v9e\":{\"x_min\":0,\"x_max\":607.0625,\"ha\":619,\"o\":\"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 \"},\"v9f\":{\"x_min\":-311.6875,\"x_max\":310.328125,\"ha\":317,\"o\":\"m -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 l 23 328 l 23 290 l 27 290 b 172 274 62 290 129 283 b 200 259 191 270 196 267 b 215 40 204 249 215 102 b 215 26 215 33 215 26 l 216 24 l 253 24 l 255 24 b 299 19 292 24 292 23 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 255 -27 292 -27 292 -27 l 253 -27 l 216 -27 l 215 -30 b 215 -55 215 -31 215 -43 b 202 -244 213 -111 209 -179 b 174 -277 200 -270 198 -273 b 40 -294 132 -285 87 -291 l 23 -294 l 23 -331 b 23 -340 23 -334 23 -337 b 17 -381 23 -376 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -376 b -27 -331 -27 -337 -27 -334 l -27 -294 l -44 -294 b -178 -277 -91 -291 -136 -285 b -205 -258 -198 -273 -204 -270 b -219 -44 -210 -215 -219 -94 b -219 -29 -219 -37 -219 -30 l -220 -27 l -255 -27 l -258 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -255 24 -291 23 -284 24 l -220 24 l -219 26 b -219 40 -219 26 -219 33 b -204 259 -219 104 -208 249 b -176 274 -200 267 -196 270 b -31 290 -133 283 -66 290 l -27 290 l -27 328 b -27 371 -27 360 -27 369 b -9 388 -24 378 -17 385 m -27 136 l -27 247 l -28 247 b -103 233 -46 245 -100 235 b -107 197 -103 233 -106 217 b -115 52 -111 147 -114 94 b -115 27 -115 40 -115 29 l -115 24 l -72 24 l -27 24 l -27 136 m 34 245 b 24 247 28 247 24 247 b 23 136 24 247 23 197 l 23 24 l 68 24 l 111 24 l 111 27 b 111 52 111 29 111 40 b 103 197 110 94 107 147 b 99 233 102 217 100 233 b 34 245 98 235 54 244 m -27 -140 l -27 -27 l -72 -27 l -115 -27 l -115 -30 b -115 -56 -115 -33 -115 -44 b -107 -201 -114 -98 -111 -151 b -103 -237 -106 -222 -103 -237 b -28 -251 -100 -240 -40 -251 b -27 -140 -28 -251 -27 -201 m 111 -30 l 111 -27 l 68 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 99 -237 36 -251 96 -240 b 103 -201 100 -237 102 -222 b 111 -56 107 -151 110 -98 b 111 -30 111 -44 111 -33 \"},\"va0\":{\"x_min\":0,\"x_max\":622.03125,\"ha\":635,\"o\":\"m 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 \"},\"va1\":{\"x_min\":0,\"x_max\":294,\"ha\":300,\"o\":\"m 138 381 b 147 381 141 381 144 381 b 221 299 191 381 221 341 b 194 238 221 278 213 255 b 159 210 190 234 161 212 b 78 148 157 209 81 151 b 78 148 78 148 78 148 b 95 106 78 144 88 119 b 121 77 103 88 108 83 b 156 69 132 72 144 69 b 259 127 193 69 232 91 b 273 140 266 137 269 138 b 279 141 274 141 276 141 b 294 124 287 141 294 134 b 292 117 294 123 294 120 b 255 66 289 113 261 72 b 126 -1 220 22 171 -1 b 47 27 96 -1 69 8 b 2 133 31 43 9 93 b 0 180 0 149 0 165 b 53 326 0 237 17 288 b 103 366 59 331 91 358 b 138 381 112 373 129 380 m 126 326 b 118 326 123 326 121 326 b 98 316 110 326 103 323 b 68 215 78 288 68 255 b 68 208 68 213 68 210 b 70 183 69 195 69 184 l 70 183 b 93 201 70 183 81 191 l 133 231 b 159 259 152 247 155 248 b 163 278 161 266 163 272 b 126 326 163 299 148 320 \"},\"va2\":{\"x_min\":0,\"x_max\":367.5,\"ha\":375,\"o\":\"m 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 \"},\"va3\":{\"x_min\":58.53125,\"x_max\":228.671875,\"ha\":294,\"o\":\"m 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 \"},\"va4\":{\"x_min\":-21.78125,\"x_max\":483.1875,\"ha\":493,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 \"},\"va5\":{\"x_min\":0,\"x_max\":349.8125,\"ha\":357,\"o\":\"m 88 302 b 103 303 93 302 98 303 b 202 224 149 303 191 270 b 205 199 204 216 205 208 b 178 129 205 173 196 147 l 175 126 l 182 127 b 307 249 236 142 284 190 b 313 259 308 254 311 258 b 329 267 317 265 323 267 b 349 247 340 267 349 259 b 201 -263 349 242 204 -258 b 182 -273 197 -270 190 -273 b 163 -260 174 -273 166 -269 b 161 -256 161 -259 161 -258 b 217 -59 161 -248 170 -220 b 272 129 247 43 272 127 b 272 129 272 129 272 129 b 264 122 272 129 268 126 b 140 80 227 94 183 80 b 36 115 102 80 65 91 b 0 194 10 136 0 165 b 88 302 0 244 32 292 \"},\"va6\":{\"x_min\":0,\"x_max\":462.78125,\"ha\":472,\"o\":\"m 8 595 b 14 596 10 596 12 596 b 50 591 21 596 29 595 b 455 248 255 544 420 405 b 462 191 460 229 462 209 b 321 0 462 94 404 9 b 300 -1 314 -1 307 -1 b 149 167 215 -1 149 69 b 294 387 149 258 201 337 b 296 390 295 388 296 388 b 289 398 296 391 294 392 b 21 560 225 477 130 535 b 2 569 9 563 5 566 b 0 580 0 573 0 576 b 8 595 0 587 2 592 m 325 348 b 321 353 322 351 322 353 b 313 348 319 353 317 351 b 223 167 255 306 223 237 b 227 124 223 154 224 138 b 289 31 236 79 261 40 b 295 31 291 31 294 31 b 355 104 315 31 338 59 b 368 191 364 129 368 159 b 364 241 368 208 367 224 b 325 348 357 277 344 313 \"},\"va7\":{\"x_min\":-155.171875,\"x_max\":153.8125,\"ha\":157,\"o\":\"m -9 24 b 0 26 -5 24 -2 26 b 25 2 12 26 21 16 l 29 -19 b 144 -303 54 -124 96 -229 b 153 -328 153 -319 153 -322 b 127 -355 153 -344 142 -355 b 100 -334 115 -355 111 -351 b 6 -130 62 -274 31 -206 b -1 -108 2 -117 0 -108 b -8 -130 -1 -108 -4 -117 b -102 -334 -32 -206 -63 -274 b -129 -355 -112 -351 -117 -355 b -155 -328 -144 -355 -155 -344 b -145 -303 -155 -322 -155 -319 b -31 -19 -98 -229 -55 -124 l -27 2 b -9 24 -24 13 -17 22 \"},\"va8\":{\"x_min\":-68.0625,\"x_max\":66.6875,\"ha\":68,\"o\":\"m -12 66 b -1 68 -9 68 -5 68 b 55 37 20 68 43 56 b 66 -1 62 26 66 12 b 36 -58 66 -23 55 -44 b 0 -69 25 -65 12 -69 b -57 -38 -21 -69 -43 -58 b -68 -1 -63 -27 -68 -13 b -12 66 -68 30 -46 61 \"},\"va9\":{\"x_min\":-24.5,\"x_max\":314.421875,\"ha\":321,\"o\":\"m -24 -145 l -24 -5 l -20 -5 b 0 -23 -9 -5 -2 -12 b 27 -87 4 -38 14 -66 b 138 -220 53 -136 88 -177 b 235 -328 179 -255 208 -288 b 314 -592 287 -409 314 -501 b 292 -732 314 -639 307 -687 l 289 -742 l 294 -756 b 314 -896 307 -802 314 -849 b 292 -1035 314 -943 307 -991 l 289 -1045 l 294 -1057 b 314 -1197 307 -1104 314 -1152 b 292 -1338 314 -1246 307 -1292 l 289 -1347 l 294 -1360 b 314 -1500 307 -1407 314 -1454 b 273 -1689 314 -1565 300 -1628 b 250 -1712 265 -1710 261 -1712 b 228 -1691 236 -1712 228 -1704 l 228 -1685 l 234 -1675 b 270 -1507 258 -1621 270 -1564 b 98 -1193 270 -1381 209 -1261 b 40 -1174 76 -1179 58 -1174 b -10 -1189 24 -1174 8 -1178 b -20 -1192 -14 -1192 -16 -1192 l -24 -1192 l -24 -1052 l -24 -913 l -20 -913 b 0 -931 -9 -913 -2 -920 b 27 -995 4 -946 14 -974 b 138 -1128 53 -1043 88 -1085 b 257 -1275 190 -1172 228 -1220 b 262 -1283 259 -1279 262 -1283 l 262 -1283 b 269 -1249 264 -1282 268 -1260 b 270 -1206 270 -1233 270 -1220 b 98 -891 270 -1075 206 -957 b 40 -871 76 -877 58 -871 b -10 -886 24 -871 8 -875 b -20 -889 -14 -889 -16 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 0 -628 -9 -610 -2 -617 b 27 -692 4 -644 14 -671 b 138 -825 53 -741 88 -782 b 257 -973 190 -870 228 -917 b 262 -981 259 -977 262 -981 l 262 -981 b 269 -946 264 -979 268 -957 b 270 -903 270 -931 270 -917 b 98 -588 270 -774 206 -655 b 40 -569 76 -574 58 -569 b -10 -584 24 -569 8 -574 b -20 -587 -14 -587 -16 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 0 -326 -9 -308 -2 -315 b 27 -390 4 -341 14 -369 b 138 -523 53 -438 88 -480 b 257 -670 190 -567 228 -614 b 262 -678 259 -674 262 -678 b 262 -678 262 -678 262 -678 b 269 -644 264 -677 268 -656 b 270 -601 270 -628 270 -614 b 98 -285 270 -471 206 -352 b 40 -266 76 -273 58 -266 b -10 -281 24 -266 8 -272 b -20 -284 -14 -284 -16 -284 l -24 -284 l -24 -145 \"},\"vaa\":{\"x_min\":-1.359375,\"x_max\":752.703125,\"ha\":768,\"o\":\"m 490 985 b 504 986 495 986 500 986 b 604 907 551 986 593 954 b 607 884 607 900 607 892 b 581 813 607 857 597 831 l 578 810 l 583 811 b 710 932 638 827 687 873 b 714 943 711 936 713 942 b 730 952 720 949 725 952 b 752 931 741 952 752 943 b 200 -946 752 927 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 538 314 477 300 508 b 318 598 300 559 306 580 b 404 645 340 630 372 645 b 494 592 439 645 475 627 b 507 541 502 577 507 559 b 480 471 507 516 498 489 l 477 467 l 483 470 b 608 589 537 485 586 531 b 675 811 611 595 675 810 b 675 811 675 811 675 811 b 666 806 675 811 671 809 b 543 763 628 777 585 763 b 438 799 504 763 468 775 b 401 878 412 820 401 849 b 490 985 401 928 434 977 \"},\"vab\":{\"x_min\":0,\"x_max\":272.21875,\"ha\":278,\"o\":\"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 \"},\"vac\":{\"x_min\":-390.640625,\"x_max\":389.28125,\"ha\":397,\"o\":\"m -9 650 b -1 652 -6 650 -4 652 b 19 639 6 652 13 648 l 23 631 b 28 623 24 628 27 626 l 34 614 l 39 606 l 43 598 l 49 588 l 54 580 l 59 571 l 65 563 l 69 555 l 74 546 l 80 537 l 85 528 b 89 520 87 526 89 523 l 95 512 l 100 503 l 106 494 l 111 487 l 115 478 l 121 470 l 126 462 l 130 453 l 136 445 l 141 437 l 147 427 l 151 419 l 156 410 l 161 402 l 167 394 l 172 385 l 176 376 b 182 367 179 374 181 370 l 187 359 l 193 351 l 198 342 l 202 334 l 208 326 l 212 317 l 217 309 l 223 301 l 228 292 l 234 284 l 238 274 l 243 266 l 249 258 l 254 249 l 259 241 l 264 233 l 269 224 b 274 216 270 222 273 217 l 280 206 l 285 198 l 295 180 l 299 174 l 304 165 l 310 156 l 315 148 l 321 140 l 325 131 l 330 123 l 336 113 l 341 105 l 347 97 l 351 88 l 356 80 l 360 72 b 364 66 362 70 363 68 b 370 58 366 65 368 61 l 379 41 b 389 19 386 31 389 24 b 382 4 389 13 386 8 b 347 0 377 0 378 0 b 337 0 344 0 340 0 b 336 0 336 0 336 0 b 287 11 294 0 294 0 l 281 19 l 276 27 l 272 37 l 266 45 l 261 54 l 255 62 l 250 70 l 246 79 l 240 87 l 235 97 l 230 105 l 224 113 l 220 122 l 215 130 l 209 140 l 204 148 l 200 155 l 194 163 b 189 172 193 165 191 169 l 185 180 l 179 188 l 174 198 l 168 206 l 163 215 l 159 223 l 153 231 l 148 240 l 142 249 l 138 258 l 133 266 l 127 274 l 122 283 l 117 292 l 111 301 l 107 308 l 102 316 b 98 324 102 317 99 322 l 92 333 l 87 341 l 81 349 l 77 359 l 72 367 l 66 376 l 61 384 l 55 392 l 51 401 l 46 410 l 40 419 l 35 427 l 31 435 l 24 444 l 20 453 l 14 460 l 10 469 b 5 477 9 470 6 474 l 0 485 l -5 494 l -9 502 l -14 512 b -20 519 -16 513 -19 517 l -24 526 l -28 534 b -31 537 -29 535 -31 537 b -35 533 -32 537 -32 535 l -88 444 l -187 280 l -285 117 l -343 23 b -362 1 -352 6 -356 2 b -368 0 -364 0 -367 0 b -390 20 -381 0 -390 8 l -390 20 b -359 77 -390 27 -390 27 l -80 539 l -25 631 b -9 650 -17 644 -13 648 m -13 133 b -1 134 -9 133 -5 134 b 50 105 19 134 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 70 -57 40 -62 55 b -13 133 -62 98 -44 126 \"},\"vad\":{\"x_min\":0,\"x_max\":873.828125,\"ha\":892,\"o\":\"m 0 0 l 0 703 l 81 703 l 164 703 l 164 0 l 164 -705 l 81 -705 l 0 -705 l 0 0 m 225 0 l 225 703 l 246 703 l 268 703 l 268 366 l 268 30 l 274 36 b 314 79 284 44 302 63 b 413 302 357 137 392 213 b 432 327 419 324 421 327 b 449 306 443 327 447 322 b 611 115 457 195 529 115 b 651 122 624 115 638 117 b 728 316 705 140 724 188 b 729 388 728 342 729 366 b 671 635 729 533 711 602 b 581 662 649 652 616 662 b 477 637 545 662 510 653 l 475 635 l 477 634 b 503 627 488 632 495 631 b 545 556 532 612 545 584 b 491 480 545 524 526 491 b 465 474 481 476 473 474 b 379 563 417 474 379 516 b 389 602 379 576 382 588 b 541 691 409 641 479 681 b 582 694 555 692 568 694 b 865 462 714 694 834 598 b 873 392 871 440 873 416 b 865 317 873 367 871 341 b 639 84 839 194 748 101 b 612 83 630 83 620 83 b 511 116 577 83 543 94 b 504 120 509 119 506 120 b 504 120 504 120 504 120 b 469 59 504 120 488 93 l 432 -1 l 469 -61 b 504 -122 488 -94 504 -122 b 504 -122 504 -122 504 -122 b 511 -117 506 -122 509 -120 b 612 -84 543 -95 577 -84 b 665 -91 630 -84 647 -87 b 869 -338 771 -122 850 -216 b 873 -392 872 -356 873 -374 b 798 -595 873 -469 847 -539 b 581 -695 741 -662 660 -695 b 406 -626 517 -695 454 -671 b 381 -563 389 -607 381 -585 b 465 -477 381 -519 413 -477 b 545 -559 514 -477 545 -519 b 503 -628 545 -587 532 -613 b 477 -635 495 -632 488 -634 l 475 -637 l 477 -638 b 581 -663 510 -655 545 -663 b 671 -637 616 -663 649 -653 b 729 -391 711 -603 729 -534 b 728 -317 729 -367 728 -344 b 623 -117 722 -173 698 -124 b 611 -116 619 -116 615 -116 b 449 -308 528 -116 457 -198 b 432 -328 447 -323 443 -328 b 413 -303 421 -328 419 -326 b 314 -80 392 -215 357 -138 b 274 -37 302 -65 284 -45 l 268 -31 l 268 -367 l 268 -705 l 246 -705 l 225 -705 l 225 0 \"},\"vae\":{\"x_min\":-108.890625,\"x_max\":251.8125,\"ha\":257,\"o\":\"m -8 863 b 0 864 -5 864 -2 864 b 12 859 4 864 9 863 b 19 843 16 856 16 853 b 102 631 34 768 65 689 l 107 621 l 107 616 l 107 616 b 89 596 107 605 99 596 b 78 601 85 596 83 598 b 47 614 69 606 55 612 b 19 621 39 617 21 621 b 19 621 19 621 19 621 b 19 619 19 621 19 620 b 20 383 20 616 20 585 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 93 -148 206 -40 179 -70 l 38 -199 l 23 -215 l 20 -217 l 20 -241 b 19 -267 20 -260 20 -266 b 19 -270 19 -269 19 -270 b 19 -270 19 -270 19 -270 b 47 -263 21 -270 39 -266 b 78 -249 55 -260 69 -255 b 89 -247 83 -247 85 -247 b 107 -265 99 -247 107 -254 l 107 -265 l 107 -270 l 102 -280 b 19 -492 65 -338 34 -417 b 0 -513 14 -508 10 -513 b -20 -488 -12 -513 -16 -508 b -103 -280 -38 -409 -66 -338 l -108 -270 l -108 -265 l -108 -265 b -91 -247 -108 -254 -100 -247 b -80 -249 -87 -247 -84 -247 b -49 -263 -70 -255 -57 -260 b -20 -270 -40 -266 -23 -270 b -20 -270 -20 -270 -20 -270 b -20 -267 -20 -270 -20 -269 b -21 174 -21 -266 -21 -208 b -20 619 -21 559 -21 616 b -20 621 -20 620 -20 621 b -20 621 -20 621 -20 621 b -49 614 -23 621 -40 617 b -80 601 -57 612 -70 606 b -91 596 -84 598 -87 596 b -108 616 -100 596 -108 605 l -108 616 l -108 621 l -103 631 b -20 839 -66 689 -38 760 b -8 863 -17 856 -14 859 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 \"},\"vaf\":{\"x_min\":-209.609375,\"x_max\":208.25,\"ha\":213,\"o\":\"m -197 19 b 1 20 -194 19 -96 20 b 196 19 98 20 193 19 b 208 -1 204 15 208 6 b 202 -15 208 -5 206 -11 b 95 -22 197 -20 212 -22 b -1 -22 69 -22 38 -22 b -96 -22 -39 -22 -70 -22 b -204 -15 -213 -22 -198 -20 b -209 -1 -208 -11 -209 -5 b -197 19 -209 6 -205 15 m -12 -113 b -1 -113 -9 -113 -5 -113 b 55 -144 20 -113 43 -124 b 66 -181 62 -155 66 -169 b 27 -244 66 -208 53 -233 b 0 -251 19 -248 9 -251 b -57 -220 -21 -251 -43 -240 b -68 -181 -63 -208 -68 -195 b -12 -113 -68 -151 -46 -120 \"},\"vb0\":{\"x_min\":0,\"x_max\":438.28125,\"ha\":447,\"o\":\"m 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 \"},\"vb1\":{\"x_min\":78.9375,\"x_max\":485.921875,\"ha\":417,\"o\":\"m 362 378 b 378 380 367 380 372 380 b 472 348 415 380 453 367 b 485 315 481 338 485 327 b 462 273 485 298 477 281 b 439 267 454 269 446 267 b 398 290 424 267 409 274 b 344 319 385 309 364 319 b 281 269 315 319 289 301 b 279 262 280 266 279 262 b 276 256 279 260 277 258 b 274 249 276 254 274 251 b 238 127 273 248 257 192 b 201 4 217 61 201 5 b 166 -1 198 -1 200 -1 b 153 -1 163 -1 157 -1 b 141 -1 148 -1 144 -1 b 104 4 106 -1 107 -1 b 104 6 104 5 104 5 b 142 144 104 13 110 34 b 182 278 164 219 181 276 b 183 288 182 281 182 285 b 185 302 185 292 185 298 b 164 330 185 317 176 328 b 159 330 163 330 161 330 b 102 302 140 330 119 320 b 91 294 95 295 93 294 b 88 294 91 294 89 294 b 78 303 83 294 78 298 b 81 312 78 306 78 309 b 200 373 106 347 160 373 b 215 371 205 373 209 371 b 266 335 235 367 254 353 b 269 331 268 333 269 331 b 269 331 269 331 269 331 b 273 335 269 331 270 334 b 362 378 298 359 330 376 \"},\"vb2\":{\"x_min\":-80.3125,\"x_max\":78.9375,\"ha\":81,\"o\":\"m 23 191 b 32 192 27 192 29 192 b 78 145 57 192 78 172 b 78 140 78 142 78 141 b -10 -72 78 133 70 116 l -50 -165 b -70 -194 -63 -194 -63 -194 b -80 -184 -77 -194 -80 -192 b -76 -159 -80 -179 -78 -172 l -68 -116 b -12 159 -51 -31 -13 156 b 23 191 -6 176 6 188 \"},\"vb3\":{\"x_min\":0,\"x_max\":227.3125,\"ha\":232,\"o\":\"m 91 213 b 100 215 93 215 96 215 b 227 58 167 215 224 144 b 227 52 227 56 227 54 b 61 -201 227 -43 164 -138 b 29 -216 44 -212 36 -216 b 23 -210 27 -216 24 -213 b 21 -205 21 -208 21 -206 b 34 -192 21 -201 25 -197 b 122 -55 89 -161 122 -106 b 104 6 122 -33 117 -12 l 103 9 l 96 9 b 4 79 57 9 17 38 b 0 112 1 90 0 101 b 91 213 0 163 36 209 \"},\"vb4\":{\"x_min\":-597.53125,\"x_max\":596.171875,\"ha\":608,\"o\":\"m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 80 86 -5 172 13 151 b 166 -1 127 37 166 -1 b 235 84 166 -1 197 37 b 311 173 306 173 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 152 -86 221 -1 190 -38 b 76 -176 81 -174 83 -173 b 70 -176 74 -176 73 -176 b 61 -174 66 -176 62 -174 b -27 -87 58 -173 38 -152 b -114 -1 -74 -38 -112 -1 b -182 -86 -114 -1 -145 -38 b -258 -176 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 \"},\"vb5\":{\"x_min\":-170.140625,\"x_max\":168.78125,\"ha\":172,\"o\":\"m -160 -1 b -122 -1 -159 -1 -149 -1 l -87 -1 l -84 -2 b -74 -15 -78 -4 -77 -6 b -20 -201 -73 -18 -49 -102 b 31 -383 8 -301 31 -383 b 85 -197 31 -383 55 -299 b 140 -9 114 -95 138 -11 b 153 0 141 -4 148 0 b 168 -9 159 0 166 -4 b 168 -12 168 -11 168 -11 b 92 -287 168 -20 159 -55 b 14 -555 50 -434 14 -555 b 0 -569 14 -562 6 -569 b -17 -553 -8 -569 -17 -560 b -93 -285 -17 -552 -51 -433 b -170 -16 -166 -36 -170 -20 b -170 -15 -170 -15 -170 -15 b -160 -1 -170 -8 -167 -4 \"},\"vb6\":{\"x_min\":0,\"x_max\":556.6875,\"ha\":568,\"o\":\"m 289 545 b 298 546 292 545 295 546 b 318 533 306 546 315 541 b 319 428 319 530 319 528 l 319 327 l 334 327 b 526 223 412 326 485 285 b 543 172 537 206 543 190 b 447 76 543 122 503 76 b 445 76 446 76 446 76 b 359 165 394 77 359 119 b 368 205 359 179 362 192 b 441 251 382 233 412 251 b 455 249 446 251 451 251 b 460 248 458 249 460 248 b 460 248 460 248 460 248 b 454 254 460 249 458 251 b 334 295 419 280 378 294 l 319 295 l 319 4 l 319 -287 l 321 -285 b 328 -285 322 -285 325 -285 b 524 -99 424 -277 507 -198 b 541 -79 526 -84 530 -79 b 556 -97 551 -79 556 -84 b 548 -133 556 -105 553 -117 b 334 -317 521 -233 434 -306 b 322 -319 329 -317 323 -317 l 319 -319 l 319 -424 b 319 -471 319 -444 319 -459 b 313 -541 319 -544 318 -535 b 298 -548 308 -545 303 -548 b 279 -534 289 -548 281 -542 b 277 -424 277 -531 277 -530 l 277 -317 l 273 -317 b 13 -95 153 -305 51 -217 b 0 2 4 -62 0 -29 b 182 295 0 126 66 238 b 274 324 210 309 249 320 l 277 324 l 277 427 b 279 533 277 528 277 530 b 289 545 281 538 285 542 m 277 2 b 277 291 277 161 277 291 b 268 288 277 291 273 290 b 144 1 179 265 144 184 b 276 -284 144 -199 175 -267 l 277 -285 l 277 2 \"},\"vb7\":{\"x_min\":-176.9375,\"x_max\":251.8125,\"ha\":257,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 \"},\"vb8\":{\"x_min\":0,\"x_max\":175.578125,\"ha\":179,\"o\":\"m 72 231 b 87 233 77 233 81 233 b 175 142 137 233 175 191 b 164 102 175 130 171 116 b 87 54 149 70 118 54 b 24 80 63 54 42 62 b 0 142 6 98 0 120 b 72 231 0 184 27 224 \"},\"vb9\":{\"x_min\":-122.5,\"x_max\":121.140625,\"ha\":124,\"o\":\"m -16 145 b 0 147 -10 147 -5 147 b 121 -1 66 147 121 77 b 114 -49 121 -16 118 -33 b -1 -148 95 -112 47 -148 b -85 -106 -31 -148 -61 -134 b -122 -1 -110 -76 -122 -38 b -16 145 -122 68 -81 134 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -70 0 -69 15 -70 6 b -13 -113 -70 -49 -47 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 \"},\"vba\":{\"x_min\":-118.421875,\"x_max\":597.53125,\"ha\":381,\"o\":\"m 460 574 b 464 574 461 574 462 574 b 488 574 470 574 481 574 b 500 573 491 574 498 574 b 594 503 543 570 588 538 b 597 488 596 498 597 494 b 528 417 597 449 564 417 b 502 423 519 417 510 419 b 465 481 477 434 465 458 b 488 528 465 499 472 516 b 490 530 490 530 490 530 b 490 530 490 530 490 530 b 468 517 488 530 475 523 b 349 340 419 485 377 420 b 347 330 348 334 347 330 b 383 328 347 328 363 328 b 428 326 423 328 424 328 b 442 302 438 320 442 312 b 430 281 442 294 438 285 b 385 276 424 277 426 276 l 377 276 l 332 276 l 330 269 b 178 -117 303 126 250 -9 b 1 -249 129 -194 69 -237 b -20 -251 -6 -251 -13 -251 b -114 -187 -65 -251 -100 -227 b -118 -156 -117 -177 -118 -166 b -51 -84 -118 -116 -91 -84 b -31 -87 -46 -84 -39 -86 b 16 -152 0 -95 16 -124 b -12 -205 16 -173 8 -194 b -16 -208 -14 -206 -16 -208 b -14 -208 -16 -208 -14 -208 b -9 -206 -14 -208 -12 -208 b 74 -124 23 -197 54 -166 b 172 224 98 -79 125 22 b 185 276 178 252 183 274 b 185 276 185 276 185 276 b 141 276 185 276 181 276 b 91 280 96 276 96 276 b 77 302 83 285 77 294 b 91 326 77 312 83 320 b 148 328 95 328 96 328 l 198 330 l 202 341 b 460 574 249 473 351 566 \"},\"vbb\":{\"x_min\":0,\"x_max\":288.5625,\"ha\":294,\"o\":\"m 202 341 b 235 341 213 341 225 341 b 261 341 249 341 259 341 b 288 309 276 340 288 326 l 288 309 b 163 -320 288 305 166 -310 b 142 -341 160 -330 153 -337 b 83 -342 140 -342 111 -342 b 21 -341 54 -342 24 -342 b 0 -310 8 -337 0 -324 b 0 -310 0 -310 0 -310 b 123 316 0 -306 118 297 b 144 340 126 327 133 335 b 202 341 147 341 151 341 \"},\"vbc\":{\"x_min\":-155.171875,\"x_max\":153.8125,\"ha\":158,\"o\":\"m -8 24 b -1 26 -6 24 -4 26 b 21 12 8 26 17 20 b 27 -8 24 9 24 9 b 144 -303 50 -115 93 -227 b 153 -322 151 -315 152 -317 b 153 -330 153 -324 153 -327 b 129 -355 153 -344 142 -355 b 111 -351 123 -355 117 -353 b 0 -319 76 -330 38 -319 b -100 -344 -35 -319 -69 -327 b -112 -351 -104 -345 -110 -348 b -129 -355 -119 -355 -123 -355 b -155 -328 -144 -355 -155 -344 b -145 -303 -155 -322 -155 -319 b -28 -6 -95 -226 -53 -119 b -8 24 -24 13 -20 19 \"},\"vbd\":{\"x_min\":-390.640625,\"x_max\":389.28125,\"ha\":397,\"o\":\"m -378 -2 b -368 -1 -375 -1 -374 -1 b -349 -13 -360 -1 -353 -5 l -348 -16 l -348 -212 l -348 -408 l 0 -408 l 347 -408 l 347 -212 l 347 -16 l 348 -13 b 367 0 352 -5 360 0 b 387 -13 375 0 383 -5 l 389 -16 l 389 -288 l 389 -560 l 387 -564 b 377 -574 385 -569 381 -573 l 372 -577 l 0 -577 l -374 -577 l -378 -574 b -389 -564 -382 -573 -386 -569 l -390 -560 l -390 -288 l -390 -16 l -389 -13 b -378 -2 -386 -8 -382 -4 m -274 -2 b -266 -1 -272 -1 -270 -1 b -246 -13 -257 -1 -250 -5 l -245 -16 l -245 -109 l -245 -202 l 0 -202 l 243 -202 l 243 -109 l 245 -16 l 245 -13 b 265 0 249 -5 257 0 b 284 -13 272 0 280 -5 l 285 -16 l 285 -170 l 285 -324 l 284 -327 b 273 -338 281 -331 279 -335 l 269 -340 l 0 -340 l -270 -340 l -274 -338 b -285 -327 -280 -335 -283 -331 l -287 -324 l -287 -170 l -287 -16 l -285 -13 b -274 -2 -283 -8 -280 -4 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -58 -102 -62 -87 b -13 -9 -62 -44 -44 -16 \"},\"vbe\":{\"x_min\":-122.5,\"x_max\":121.140625,\"ha\":124,\"o\":\"m -16 145 b -1 147 -10 147 -5 147 b 119 20 58 147 111 93 b 121 0 119 13 121 6 b 32 -142 121 -66 84 -124 l 24 -144 l 24 -180 b 24 -187 24 -183 24 -184 b 19 -227 24 -222 24 -220 b 0 -237 14 -234 6 -237 b -20 -227 -8 -237 -16 -234 b -25 -187 -25 -220 -25 -222 b -25 -180 -25 -184 -25 -183 l -25 -144 l -34 -142 b -122 0 -85 -124 -122 -66 b -121 20 -122 6 -121 13 b -16 145 -114 84 -70 137 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -69 0 -69 15 -69 6 b -13 -113 -69 -49 -46 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 \"},\"vbf\":{\"x_min\":-53.078125,\"x_max\":513.140625,\"ha\":485,\"o\":\"m 185 383 b 196 384 187 383 191 384 b 277 334 230 384 259 365 b 288 301 281 324 288 306 b 288 297 288 298 288 297 b 294 302 289 297 291 299 b 394 370 323 338 367 367 b 404 371 398 370 401 371 b 510 272 453 371 498 328 b 513 237 513 262 513 251 b 507 172 513 217 511 192 b 326 -34 487 59 412 -26 b 314 -36 322 -36 318 -36 b 274 -24 298 -36 283 -31 l 265 -16 b 224 44 246 -1 232 20 b 223 49 224 47 223 49 b 223 49 223 49 223 49 b 149 -197 221 48 149 -194 b 149 -198 149 -197 149 -198 b 170 -210 149 -202 155 -205 b 187 -215 174 -210 175 -212 b 204 -231 201 -219 204 -222 b 197 -245 204 -240 202 -242 l 194 -248 l 76 -248 l -42 -248 l -46 -245 b -53 -231 -51 -242 -53 -240 b -35 -215 -53 -222 -49 -217 b -13 -210 -21 -212 -20 -212 b -6 -208 -10 -209 -8 -208 b 0 -206 -6 -208 -2 -206 b 25 -188 13 -201 21 -195 b 163 280 28 -183 163 276 b 166 291 163 283 164 287 b 167 302 167 295 167 299 b 155 324 167 315 161 324 b 155 324 155 324 155 324 b 65 230 125 322 85 280 b 53 215 61 217 58 215 b 51 215 53 215 51 215 b 42 224 46 215 42 217 b 57 263 42 231 47 244 b 140 360 77 305 104 337 b 152 370 144 365 149 369 b 185 383 157 376 172 381 m 374 306 b 366 308 371 308 368 308 b 300 273 348 308 321 294 b 284 254 288 262 287 259 b 280 242 283 249 281 245 b 257 169 279 240 270 213 l 236 98 l 236 93 b 251 48 238 77 243 61 b 279 27 258 37 272 27 b 281 27 279 27 280 27 b 291 31 281 27 287 30 b 396 170 334 52 378 109 b 406 247 402 197 406 224 b 401 277 406 259 405 270 b 374 306 397 290 383 303 \"},\"vc0\":{\"x_min\":-571.671875,\"x_max\":570.3125,\"ha\":582,\"o\":\"m 156 273 b 163 274 159 273 161 274 b 183 262 171 274 179 269 b 185 158 185 259 185 259 l 185 56 l 231 112 b 284 174 277 172 279 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 189 -6 194 0 191 -2 l 185 -12 l 185 -147 b 185 -210 185 -173 185 -194 b 179 -292 185 -297 185 -287 b 164 -299 175 -297 170 -299 b 145 -287 156 -299 148 -295 b 144 -174 144 -284 144 -284 l 142 -63 l 100 -117 b 46 -176 57 -170 54 -176 b 42 -176 44 -176 43 -176 b -54 -87 32 -174 38 -180 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -393 170 -566 -43 -398 165 b -379 174 -389 173 -383 174 b -370 173 -375 174 -372 174 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 127 11 -32 172 16 123 l 138 -1 l 141 1 l 144 4 l 144 130 b 145 260 144 256 144 258 b 156 273 147 266 151 270 \"},\"vc1\":{\"x_min\":-525.390625,\"x_max\":524.03125,\"ha\":535,\"o\":\"m -42 1067 b 1 1068 -27 1068 -13 1068 b 524 534 285 1068 524 831 b 0 0 524 231 283 0 b -118 12 -38 0 -77 4 b -487 335 -284 51 -424 174 b -525 534 -513 402 -525 469 b -42 1067 -525 802 -325 1042 m 38 1038 b 0 1039 25 1039 12 1039 b -460 725 -198 1039 -386 914 l -461 721 l 0 721 l 460 721 l 458 725 b 38 1038 390 899 224 1022 m 472 685 l 470 692 l 0 692 l -470 692 l -473 685 b -496 535 -488 638 -496 587 b -472 377 -496 483 -488 428 l -470 374 l 0 374 l 470 374 l 470 377 b 495 535 487 428 495 483 b 472 685 495 587 488 638 m 458 344 l 460 345 l 0 345 l -461 345 l -460 344 b -402 238 -454 323 -424 269 b 0 27 -303 98 -152 27 b 401 238 151 27 302 98 b 458 344 423 269 453 323 \"},\"vc2\":{\"x_min\":0,\"x_max\":337.5625,\"ha\":344,\"o\":\"m 230 535 b 239 537 232 537 234 537 b 258 524 247 537 254 533 l 259 521 l 259 390 l 259 258 l 285 265 b 318 270 302 269 311 270 b 336 259 328 270 332 267 b 337 208 336 256 337 233 b 336 158 337 184 336 159 b 302 140 332 148 329 147 b 259 130 266 131 259 130 b 259 65 259 130 259 104 b 259 20 259 51 259 36 l 259 -88 l 285 -81 b 318 -76 302 -77 311 -76 b 332 -81 325 -76 328 -77 b 337 -123 336 -87 337 -86 l 337 -138 l 337 -154 b 332 -195 337 -191 336 -190 b 281 -210 328 -199 328 -199 b 262 -216 272 -213 264 -216 l 259 -216 l 259 -349 l 259 -483 l 258 -487 b 239 -499 254 -495 246 -499 b 220 -487 231 -499 223 -495 l 219 -483 l 217 -355 l 217 -227 l 216 -227 l 194 -233 l 152 -244 b 129 -249 140 -247 130 -249 b 127 -410 127 -249 127 -258 b 127 -576 127 -548 127 -573 b 126 -578 126 -577 126 -578 b 127 -580 126 -578 126 -580 b 133 -578 129 -580 130 -578 b 186 -557 152 -576 170 -569 b 197 -555 190 -556 194 -555 b 215 -573 206 -555 215 -562 l 215 -574 l 215 -580 l 209 -588 b 126 -802 172 -648 141 -727 b 107 -823 123 -817 118 -823 b 87 -798 95 -823 91 -817 b 5 -588 69 -718 40 -648 l 0 -580 l 0 -574 b 0 -573 0 -574 0 -574 b 16 -555 0 -562 6 -555 b 27 -557 20 -555 24 -556 b 81 -578 44 -569 62 -576 b 87 -580 84 -578 85 -580 b 88 -578 88 -580 88 -580 b 87 -576 88 -578 88 -577 b 87 -416 87 -573 87 -549 b 85 -260 87 -270 87 -260 b 85 -260 85 -260 85 -260 b 32 -273 74 -263 35 -273 b 13 -260 24 -273 16 -267 b 12 -209 12 -256 12 -256 l 12 -162 l 13 -158 b 74 -134 17 -148 17 -148 l 87 -131 l 87 -22 b 85 86 87 79 87 86 b 85 86 85 86 85 86 b 32 74 74 83 35 74 b 13 86 24 74 16 79 b 12 137 12 90 12 90 l 12 184 l 13 188 b 73 212 17 198 17 198 l 87 215 l 87 348 l 87 481 l 88 485 b 107 498 92 492 99 498 b 117 495 110 498 114 496 b 126 485 121 494 125 489 l 127 481 l 127 353 l 127 226 l 133 226 b 172 235 136 227 153 231 l 212 247 l 217 248 l 217 384 l 219 521 l 220 524 b 230 535 221 528 225 533 m 217 9 b 217 119 217 70 217 119 l 217 119 b 194 113 217 119 206 116 l 152 102 b 129 97 140 99 130 97 b 127 -12 127 97 127 91 l 127 -122 l 133 -120 b 172 -111 136 -119 153 -115 l 212 -101 l 217 -98 l 217 9 \"},\"vc3\":{\"x_min\":-10.890625,\"x_max\":299.4375,\"ha\":294,\"o\":\"m 136 460 b 142 462 137 462 140 462 b 166 449 152 462 161 456 b 171 428 168 446 168 445 b 288 131 194 322 238 209 b 298 115 295 120 296 117 b 299 106 298 112 299 109 b 273 81 299 91 287 81 b 255 86 268 81 261 83 b 155 116 225 104 183 116 l 152 116 l 149 108 b 141 83 148 102 144 91 b 134 48 137 69 134 58 b 149 9 134 34 140 24 b 153 -1 152 5 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 147 -11 b 122 2 138 -11 133 -6 b 95 61 104 20 95 38 b 107 108 95 74 99 90 b 108 113 107 111 108 112 b 107 113 108 113 108 113 b 102 113 106 113 104 113 b 31 86 76 108 53 98 b 14 80 24 81 20 80 b -10 106 0 80 -10 91 b 0 131 -10 115 -9 116 b 115 430 49 209 91 317 b 136 460 119 451 123 456 \"}},\"cssFontWeight\":\"normal\",\"ascender\":1903,\"underlinePosition\":-125,\"cssFontStyle\":\"normal\",\"boundingBox\":{\"yMin\":-2065.375,\"xMin\":-695.53125,\"yMax\":1901.578125,\"xMax\":1159.671875},\"resolution\":1000,\"original_font_information\":{\"postscript_name\":\"Gonville-18\",\"version_string\":\"Version 0.1.8904 \",\"vendor_url\":\"\",\"full_font_name\":\"Gonville-18\",\"font_family_name\":\"Gonville-18\",\"copyright\":\"No copyright is claimed on this font file.\",\"description\":\"\",\"trademark\":\"\",\"designer\":\"\",\"designer_url\":\"\",\"unique_font_identifier\":\"FontForge 2.0 :Gonville-18 :17-3-2010\",\"license_url\":\"\",\"license_description\":\"\",\"manufacturer_name\":\"\",\"font_sub_family_name\":\"18\"},\"descender\":-2066,\"familyName\":\"Gonville-18\",\"lineHeight\":4093,\"underlineThickness\":50};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Renderer = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// Support for different rendering contexts: Canvas, Raphael\n\t\n\t/* global document: false */\n\t\n\tvar _canvascontext = __webpack_require__(11);\n\t\n\tvar _raphaelcontext = __webpack_require__(12);\n\t\n\tvar _svgcontext = __webpack_require__(13);\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar lastContext = null;\n\t\n\tvar Renderer = exports.Renderer = function () {\n\t  _createClass(Renderer, null, [{\n\t    key: 'buildContext',\n\t    value: function buildContext(sel, backend, width, height, background) {\n\t      var renderer = new Renderer(sel, backend);\n\t      if (width && height) {\n\t        renderer.resize(width, height);\n\t      }\n\t\n\t      if (!background) background = '#FFF';\n\t      var ctx = renderer.getContext();\n\t      ctx.setBackgroundFillStyle(background);\n\t      Renderer.lastContext = ctx;\n\t      return ctx;\n\t    }\n\t  }, {\n\t    key: 'getCanvasContext',\n\t    value: function getCanvasContext(sel, width, height, background) {\n\t      return Renderer.buildContext(sel, Renderer.Backends.CANVAS, width, height, background);\n\t    }\n\t  }, {\n\t    key: 'getRaphaelContext',\n\t    value: function getRaphaelContext(sel, width, height, background) {\n\t      return Renderer.buildContext(sel, Renderer.Backends.RAPHAEL, width, height, background);\n\t    }\n\t  }, {\n\t    key: 'getSVGContext',\n\t    value: function getSVGContext(sel, width, height, background) {\n\t      return Renderer.buildContext(sel, Renderer.Backends.SVG, width, height, background);\n\t    }\n\t  }, {\n\t    key: 'bolsterCanvasContext',\n\t    value: function bolsterCanvasContext(ctx) {\n\t      if (Renderer.USE_CANVAS_PROXY) {\n\t        return new _canvascontext.CanvasContext(ctx);\n\t      }\n\t\n\t      var methodNames = ['clear', 'setFont', 'setRawFont', 'setFillStyle', 'setBackgroundFillStyle', 'setStrokeStyle', 'setShadowColor', 'setShadowBlur', 'setLineWidth', 'setLineCap', 'setLineDash', 'openGroup', 'closeGroup', 'getGroup'];\n\t\n\t      ctx.vexFlowCanvasContext = ctx;\n\t\n\t      methodNames.forEach(function (methodName) {\n\t        ctx[methodName] = ctx[methodName] || _canvascontext.CanvasContext.prototype[methodName];\n\t      });\n\t\n\t      return ctx;\n\t    }\n\t\n\t    // Draw a dashed line (horizontal, vertical or diagonal\n\t    // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n\t    // setting the second number to 0 draws a solid line.\n\t\n\t  }, {\n\t    key: 'drawDashedLine',\n\t    value: function drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\n\t      context.beginPath();\n\t\n\t      var dx = toX - fromX;\n\t      var dy = toY - fromY;\n\t      var angle = Math.atan2(dy, dx);\n\t      var x = fromX;\n\t      var y = fromY;\n\t      context.moveTo(fromX, fromY);\n\t      var idx = 0;\n\t      var draw = true;\n\t      while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n\t        var dashLength = dashPattern[idx++ % dashPattern.length];\n\t        var nx = x + Math.cos(angle) * dashLength;\n\t        x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n\t        var ny = y + Math.sin(angle) * dashLength;\n\t        y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n\t        if (draw) {\n\t          context.lineTo(x, y);\n\t        } else {\n\t          context.moveTo(x, y);\n\t        }\n\t        draw = !draw;\n\t      }\n\t\n\t      context.closePath();\n\t      context.stroke();\n\t    }\n\t  }, {\n\t    key: 'Backends',\n\t    get: function get() {\n\t      return {\n\t        CANVAS: 1,\n\t        RAPHAEL: 2,\n\t        SVG: 3,\n\t        VML: 4\n\t      };\n\t    }\n\t\n\t    // End of line types\n\t\n\t  }, {\n\t    key: 'LineEndType',\n\t    get: function get() {\n\t      return {\n\t        NONE: 1, // No leg\n\t        UP: 2, // Upward leg\n\t        DOWN: 3 };\n\t    }\n\t\n\t    // Set this to true if you're using VexFlow inside a runtime\n\t    // that does not allow modifiying canvas objects. There is a small\n\t    // performance degradation due to the extra indirection.\n\t\n\t  }, {\n\t    key: 'USE_CANVAS_PROXY',\n\t    get: function get() {\n\t      return false;\n\t    }\n\t  }, {\n\t    key: 'lastContext',\n\t    get: function get() {\n\t      return lastContext;\n\t    },\n\t    set: function set(ctx) {\n\t      lastContext = ctx;\n\t    }\n\t  }]);\n\t\n\t  function Renderer(sel, backend) {\n\t    _classCallCheck(this, Renderer);\n\t\n\t    // Verify selector\n\t    this.sel = sel;\n\t    if (!this.sel) {\n\t      throw new _vex.Vex.RERR('BadArgument', 'Invalid selector for renderer.');\n\t    }\n\t\n\t    // Get element from selector\n\t    this.element = document.getElementById(sel);\n\t    if (!this.element) this.element = sel;\n\t\n\t    // Verify backend and create context\n\t    this.ctx = null;\n\t    this.paper = null;\n\t    this.backend = backend;\n\t    if (this.backend === Renderer.Backends.CANVAS) {\n\t      // Create context.\n\t      if (!this.element.getContext) {\n\t        throw new _vex.Vex.RERR('BadElement', 'Can\\'t get canvas context from element: ' + sel);\n\t      }\n\t      this.ctx = Renderer.bolsterCanvasContext(this.element.getContext('2d'));\n\t    } else if (this.backend === Renderer.Backends.RAPHAEL) {\n\t      this.ctx = new _raphaelcontext.RaphaelContext(this.element);\n\t    } else if (this.backend === Renderer.Backends.SVG) {\n\t      this.ctx = new _svgcontext.SVGContext(this.element);\n\t    } else {\n\t      throw new _vex.Vex.RERR('InvalidBackend', 'No support for backend: ' + this.backend);\n\t    }\n\t  }\n\t\n\t  _createClass(Renderer, [{\n\t    key: 'resize',\n\t    value: function resize(width, height) {\n\t      if (this.backend === Renderer.Backends.CANVAS) {\n\t        if (!this.element.getContext) {\n\t          throw new _vex.Vex.RERR('BadElement', 'Can\\'t get canvas context from element: ' + this.sel);\n\t        }\n\t        this.element.width = width;\n\t        this.element.height = height;\n\t        this.ctx = Renderer.bolsterCanvasContext(this.element.getContext('2d'));\n\t      } else {\n\t        this.ctx.resize(width, height);\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getContext',\n\t    value: function getContext() {\n\t      return this.ctx;\n\t    }\n\t  }]);\n\n\t  return Renderer;\n\t}();\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Mohit Muthanna <mohit@muthanna.com>\n\t//\n\t// A rendering context for the Raphael backend.\n\t//\n\t// Copyright Mohit Cheppudira 2010\n\t\n\t/** @constructor */\n\tvar CanvasContext = exports.CanvasContext = function () {\n\t  _createClass(CanvasContext, null, [{\n\t    key: 'WIDTH',\n\t    get: function get() {\n\t      return 600;\n\t    }\n\t  }, {\n\t    key: 'HEIGHT',\n\t    get: function get() {\n\t      return 400;\n\t    }\n\t  }]);\n\t\n\t  function CanvasContext(context) {\n\t    _classCallCheck(this, CanvasContext);\n\t\n\t    // Use a name that is unlikely to clash with a canvas context\n\t    // property\n\t    this.vexFlowCanvasContext = context;\n\t    if (!context.canvas) {\n\t      this.canvas = {\n\t        width: CanvasContext.WIDTH,\n\t        height: CanvasContext.HEIGHT\n\t      };\n\t    } else {\n\t      this.canvas = context.canvas;\n\t    }\n\t  }\n\t\n\t  _createClass(CanvasContext, [{\n\t    key: 'clear',\n\t    value: function clear() {\n\t      this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\t    }\n\t\n\t    // Containers not implemented\n\t\n\t  }, {\n\t    key: 'openGroup',\n\t    value: function openGroup() {}\n\t  }, {\n\t    key: 'closeGroup',\n\t    value: function closeGroup() {}\n\t  }, {\n\t    key: 'add',\n\t    value: function add() {}\n\t  }, {\n\t    key: 'setFont',\n\t    value: function setFont(family, size, weight) {\n\t      this.vexFlowCanvasContext.font = (weight || '') + ' ' + size + 'pt ' + family;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setRawFont',\n\t    value: function setRawFont(font) {\n\t      this.vexFlowCanvasContext.font = font;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setFillStyle',\n\t    value: function setFillStyle(style) {\n\t      this.vexFlowCanvasContext.fillStyle = style;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setBackgroundFillStyle',\n\t    value: function setBackgroundFillStyle(style) {\n\t      this.background_fillStyle = style;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setStrokeStyle',\n\t    value: function setStrokeStyle(style) {\n\t      this.vexFlowCanvasContext.strokeStyle = style;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setShadowColor',\n\t    value: function setShadowColor(style) {\n\t      this.vexFlowCanvasContext.shadowColor = style;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setShadowBlur',\n\t    value: function setShadowBlur(blur) {\n\t      this.vexFlowCanvasContext.shadowBlur = blur;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setLineWidth',\n\t    value: function setLineWidth(width) {\n\t      this.vexFlowCanvasContext.lineWidth = width;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setLineCap',\n\t    value: function setLineCap(cap_type) {\n\t      this.vexFlowCanvasContext.lineCap = cap_type;\n\t      return this;\n\t    }\n\t\n\t    // setLineDash: is the one native method in a canvas context\n\t    // that begins with set, therefore we don't bolster the method\n\t    // if it already exists (see renderer.bolsterCanvasContext).\n\t    // If it doesn't exist, we bolster it and assume it's looking for\n\t    // a ctx.lineDash method, as previous versions of VexFlow\n\t    // expected.\n\t\n\t  }, {\n\t    key: 'setLineDash',\n\t    value: function setLineDash(dash) {\n\t      this.vexFlowCanvasContext.lineDash = dash;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'scale',\n\t    value: function scale(x, y) {\n\t      return this.vexFlowCanvasContext.scale(parseFloat(x), parseFloat(y));\n\t    }\n\t  }, {\n\t    key: 'resize',\n\t    value: function resize(width, height) {\n\t      return this.vexFlowCanvasContext.resize(parseInt(width, 10), parseInt(height, 10));\n\t    }\n\t  }, {\n\t    key: 'rect',\n\t    value: function rect(x, y, width, height) {\n\t      return this.vexFlowCanvasContext.rect(x, y, width, height);\n\t    }\n\t  }, {\n\t    key: 'fillRect',\n\t    value: function fillRect(x, y, width, height) {\n\t      return this.vexFlowCanvasContext.fillRect(x, y, width, height);\n\t    }\n\t  }, {\n\t    key: 'clearRect',\n\t    value: function clearRect(x, y, width, height) {\n\t      return this.vexFlowCanvasContext.clearRect(x, y, width, height);\n\t    }\n\t  }, {\n\t    key: 'beginPath',\n\t    value: function beginPath() {\n\t      return this.vexFlowCanvasContext.beginPath();\n\t    }\n\t  }, {\n\t    key: 'moveTo',\n\t    value: function moveTo(x, y) {\n\t      return this.vexFlowCanvasContext.moveTo(x, y);\n\t    }\n\t  }, {\n\t    key: 'lineTo',\n\t    value: function lineTo(x, y) {\n\t      return this.vexFlowCanvasContext.lineTo(x, y);\n\t    }\n\t  }, {\n\t    key: 'bezierCurveTo',\n\t    value: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n\t      return this.vexFlowCanvasContext.bezierCurveTo(x1, y1, x2, y2, x, y);\n\t    }\n\t  }, {\n\t    key: 'quadraticCurveTo',\n\t    value: function quadraticCurveTo(x1, y1, x, y) {\n\t      return this.vexFlowCanvasContext.quadraticCurveTo(x1, y1, x, y);\n\t    }\n\t\n\t    // This is an attempt (hack) to simulate the HTML5 canvas\n\t    // arc method.\n\t\n\t  }, {\n\t    key: 'arc',\n\t    value: function arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n\t      return this.vexFlowCanvasContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);\n\t    }\n\t\n\t    // Adapted from the source for Raphael's Element.glow\n\t\n\t  }, {\n\t    key: 'glow',\n\t    value: function glow() {\n\t      return this.vexFlowCanvasContext.glow();\n\t    }\n\t  }, {\n\t    key: 'fill',\n\t    value: function fill() {\n\t      return this.vexFlowCanvasContext.fill();\n\t    }\n\t  }, {\n\t    key: 'stroke',\n\t    value: function stroke() {\n\t      return this.vexFlowCanvasContext.stroke();\n\t    }\n\t  }, {\n\t    key: 'closePath',\n\t    value: function closePath() {\n\t      return this.vexFlowCanvasContext.closePath();\n\t    }\n\t  }, {\n\t    key: 'measureText',\n\t    value: function measureText(text) {\n\t      return this.vexFlowCanvasContext.measureText(text);\n\t    }\n\t  }, {\n\t    key: 'fillText',\n\t    value: function fillText(text, x, y) {\n\t      return this.vexFlowCanvasContext.fillText(text, x, y);\n\t    }\n\t  }, {\n\t    key: 'save',\n\t    value: function save() {\n\t      return this.vexFlowCanvasContext.save();\n\t    }\n\t  }, {\n\t    key: 'restore',\n\t    value: function restore() {\n\t      return this.vexFlowCanvasContext.restore();\n\t    }\n\t  }]);\n\n\t  return CanvasContext;\n\t}();\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// A rendering context for the Raphael backend.\n\t//\n\t// ## Warning: Deprecated for SVGContext\n\t// Except in instances where SVG support for IE < 9.0 is\n\t// needed, SVGContext is recommended.\n\t\n\tvar RaphaelContext = exports.RaphaelContext = function () {\n\t  function RaphaelContext(element) {\n\t    _classCallCheck(this, RaphaelContext);\n\t\n\t    this.element = element;\n\t    this.paper = Raphael(element); // eslint-disable-line\n\t    this.path = '';\n\t    this.pen = { x: 0, y: 0 };\n\t    this.lineWidth = 1.0;\n\t    this.state = {\n\t      scale: { x: 1, y: 1 },\n\t      font_family: 'Arial',\n\t      font_size: 8,\n\t      font_weight: 800\n\t    };\n\t\n\t    this.attributes = {\n\t      'stroke-width': 0.3,\n\t      'fill': 'black',\n\t      'stroke': 'black',\n\t      'font': '10pt Arial'\n\t    };\n\t\n\t    this.background_attributes = {\n\t      'stroke-width': 0,\n\t      'fill': 'white',\n\t      'stroke': 'white',\n\t      'font': '10pt Arial'\n\t    };\n\t\n\t    this.shadow_attributes = {\n\t      width: 0,\n\t      color: 'black'\n\t    };\n\t\n\t    this.state_stack = [];\n\t  }\n\t\n\t  // Containers not implemented\n\t\n\t\n\t  _createClass(RaphaelContext, [{\n\t    key: 'openGroup',\n\t    value: function openGroup() {}\n\t  }, {\n\t    key: 'closeGroup',\n\t    value: function closeGroup() {}\n\t  }, {\n\t    key: 'add',\n\t    value: function add() {}\n\t  }, {\n\t    key: 'setFont',\n\t    value: function setFont(family, size, weight) {\n\t      this.state.font_family = family;\n\t      this.state.font_size = size;\n\t      this.state.font_weight = weight;\n\t      this.attributes.font = (this.state.font_weight || '') + ' ' + this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setRawFont',\n\t    value: function setRawFont(font) {\n\t      this.attributes.font = font;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setFillStyle',\n\t    value: function setFillStyle(style) {\n\t      this.attributes.fill = style;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setBackgroundFillStyle',\n\t    value: function setBackgroundFillStyle(style) {\n\t      this.background_attributes.fill = style;\n\t      this.background_attributes.stroke = style;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setStrokeStyle',\n\t    value: function setStrokeStyle(style) {\n\t      this.attributes.stroke = style;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setShadowColor',\n\t    value: function setShadowColor(style) {\n\t      this.shadow_attributes.color = style;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setShadowBlur',\n\t    value: function setShadowBlur(blur) {\n\t      this.shadow_attributes.width = blur;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setLineWidth',\n\t    value: function setLineWidth(width) {\n\t      this.attributes['stroke-width'] = width;\n\t      this.lineWidth = width;\n\t    }\n\t\n\t    // Empty because there is no equivalent in SVG\n\t\n\t  }, {\n\t    key: 'setLineDash',\n\t    value: function setLineDash() {\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setLineCap',\n\t    value: function setLineCap() {\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'scale',\n\t    value: function scale(x, y) {\n\t      this.state.scale = { x: x, y: y };\n\t      // The scale() method is deprecated as of Raphael.JS 2.0, and\n\t      // can no longer be used as an option in an Element.attr() call.\n\t      // It is preserved here for users running earlier versions of\n\t      // Raphael.JS, though it has no effect on the SVG output in\n\t      // Raphael 2 and higher.\n\t      this.attributes.transform = 'S' + x + ',' + y + ',0,0';\n\t      this.attributes.scale = x + ',' + y + ',0,0';\n\t      this.attributes.font = this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;\n\t      this.background_attributes.transform = 'S' + x + ',' + y + ',0,0';\n\t      this.background_attributes.font = this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'clear',\n\t    value: function clear() {\n\t      this.paper.clear();\n\t    }\n\t  }, {\n\t    key: 'resize',\n\t    value: function resize(width, height) {\n\t      this.element.style.width = width;\n\t      this.paper.setSize(width, height);\n\t      return this;\n\t    }\n\t\n\t    // Sets the SVG `viewBox` property, which results in auto scaling images when its container\n\t    // is resized.\n\t    //\n\t    // Usage: `ctx.setViewBox(\"0 0 600 400\")`\n\t\n\t  }, {\n\t    key: 'setViewBox',\n\t    value: function setViewBox(viewBox) {\n\t      this.paper.canvas.setAttribute('viewBox', viewBox);\n\t    }\n\t  }, {\n\t    key: 'rect',\n\t    value: function rect(x, y, width, height) {\n\t      if (height < 0) {\n\t        y += height;\n\t        height = -height;\n\t      }\n\t\n\t      this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.attributes).attr('fill', 'none').attr('stroke-width', this.lineWidth);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'fillRect',\n\t    value: function fillRect(x, y, width, height) {\n\t      if (height < 0) {\n\t        y += height;\n\t        height = -height;\n\t      }\n\t\n\t      this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.attributes);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'clearRect',\n\t    value: function clearRect(x, y, width, height) {\n\t      if (height < 0) {\n\t        y += height;\n\t        height = -height;\n\t      }\n\t\n\t      this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.background_attributes);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'beginPath',\n\t    value: function beginPath() {\n\t      this.path = '';\n\t      this.pen.x = 0;\n\t      this.pen.y = 0;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'moveTo',\n\t    value: function moveTo(x, y) {\n\t      this.path += 'M' + x + ',' + y;\n\t      this.pen.x = x;\n\t      this.pen.y = y;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'lineTo',\n\t    value: function lineTo(x, y) {\n\t      this.path += 'L' + x + ',' + y;\n\t      this.pen.x = x;\n\t      this.pen.y = y;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'bezierCurveTo',\n\t    value: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n\t      this.path += 'C' + x1 + ',' + y1 + ',' + x2 + ',' + y2 + ',' + x + ',' + y;\n\t      this.pen.x = x;\n\t      this.pen.y = y;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'quadraticCurveTo',\n\t    value: function quadraticCurveTo(x1, y1, x, y) {\n\t      this.path += 'Q' + x1 + ',' + y1 + ',' + x + ',' + y;\n\t      this.pen.x = x;\n\t      this.pen.y = y;\n\t      return this;\n\t    }\n\t\n\t    // This is an attempt (hack) to simulate the HTML5 canvas\n\t    // arc method.\n\t\n\t  }, {\n\t    key: 'arc',\n\t    value: function arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n\t      function normalizeAngle(angle) {\n\t        while (angle < 0) {\n\t          angle += Math.PI * 2;\n\t        }\n\t\n\t        while (angle > Math.PI * 2) {\n\t          angle -= Math.PI * 2;\n\t        }\n\t        return angle;\n\t      }\n\t\n\t      startAngle = normalizeAngle(startAngle);\n\t      endAngle = normalizeAngle(endAngle);\n\t\n\t      if (startAngle > endAngle) {\n\t        var tmp = startAngle;\n\t        startAngle = endAngle;\n\t        endAngle = tmp;\n\t        antiClockwise = !antiClockwise;\n\t      }\n\t\n\t      var delta = endAngle - startAngle;\n\t\n\t      if (delta > Math.PI) {\n\t        this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);\n\t        this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);\n\t      } else {\n\t        this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'arcHelper',\n\t    value: function arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {\n\t      var x1 = x + radius * Math.cos(startAngle);\n\t      var y1 = y + radius * Math.sin(startAngle);\n\t\n\t      var x2 = x + radius * Math.cos(endAngle);\n\t      var y2 = y + radius * Math.sin(endAngle);\n\t\n\t      var largeArcFlag = 0;\n\t      var sweepFlag = 0;\n\t      if (antiClockwise) {\n\t        sweepFlag = 1;\n\t        if (endAngle - startAngle < Math.PI) {\n\t          largeArcFlag = 1;\n\t        }\n\t      } else if (endAngle - startAngle > Math.PI) {\n\t        largeArcFlag = 1;\n\t      }\n\t\n\t      this.path += 'M' + x1 + ',' + y1 + ',A' + radius + ',' + radius + ',0,' + largeArcFlag + ',' + sweepFlag + ',' + x2 + ',' + y2 + 'M' + this.pen.x + ',' + this.pen.y;\n\t    }\n\t\n\t    // Adapted from the source for Raphael's Element.glow\n\t\n\t  }, {\n\t    key: 'glow',\n\t    value: function glow() {\n\t      var out = this.paper.set();\n\t      if (this.shadow_attributes.width > 0) {\n\t        var sa = this.shadow_attributes;\n\t        var num_paths = sa.width / 2;\n\t        for (var i = 1; i <= num_paths; i++) {\n\t          out.push(this.paper.path(this.path).attr({\n\t            stroke: sa.color,\n\t            'stroke-linejoin': 'round',\n\t            'stroke-linecap': 'round',\n\t            'stroke-width': +(sa.width / num_paths * i).toFixed(3),\n\t            opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n\t            // See note in this.scale(): In Raphael the scale() method\n\t            // is deprecated and removed as of Raphael 2.0 and replaced\n\t            // by the transform() method.  It is preserved here for\n\t            // users with earlier versions of Raphael, but has no effect\n\t            // on the output SVG in Raphael 2.0+.\n\t            transform: this.attributes.transform,\n\t            scale: this.attributes.scale\n\t          }));\n\t        }\n\t      }\n\t      return out;\n\t    }\n\t  }, {\n\t    key: 'fill',\n\t    value: function fill() {\n\t      var elem = this.paper.path(this.path).attr(this.attributes).attr('stroke-width', 0);\n\t      this.glow(elem);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'stroke',\n\t    value: function stroke() {\n\t      // The first line of code below is, unfortunately, a bit of a hack:\n\t      // Raphael's transform() scaling does not scale the stroke-width, so\n\t      // in order to scale a stroke, we have to manually scale the\n\t      // stroke-width.\n\t      //\n\t      // This works well so long as the X & Y states for this.scale() are\n\t      // relatively similar.  However, if they are very different, we\n\t      // would expect horizontal and vertical lines to have different\n\t      // stroke-widths.\n\t      //\n\t      // In the future, if we want to support very divergent values for\n\t      // horizontal and vertical scaling, we may want to consider\n\t      // implementing SVG scaling with properties of the SVG viewBox &\n\t      // viewPort and removing it entirely from the Element.attr() calls.\n\t      // This would more closely parallel the approach taken in\n\t      // canvascontext.js as well.\n\t\n\t      var strokeWidth = this.lineWidth * (this.state.scale.x + this.state.scale.y) / 2;\n\t      var elem = this.paper.path(this.path).attr(this.attributes).attr('fill', 'none').attr('stroke-width', strokeWidth);\n\t      this.glow(elem);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'closePath',\n\t    value: function closePath() {\n\t      this.path += 'Z';\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'measureText',\n\t    value: function measureText(text) {\n\t      var txt = this.paper.text(0, 0, text).attr(this.attributes).attr('fill', 'none').attr('stroke', 'none');\n\t      var bounds = txt.getBBox();\n\t      txt.remove();\n\t\n\t      return {\n\t        width: bounds.width,\n\t        height: bounds.height\n\t      };\n\t    }\n\t  }, {\n\t    key: 'fillText',\n\t    value: function fillText(text, x, y) {\n\t      this.paper.text(x + this.measureText(text).width / 2, y - this.state.font_size / (2.25 * this.state.scale.y), text).attr(this.attributes);\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'save',\n\t    value: function save() {\n\t      // TODO(mmuthanna): State needs to be deep-copied.\n\t      this.state_stack.push({\n\t        state: {\n\t          font_family: this.state.font_family\n\t        },\n\t        attributes: {\n\t          font: this.attributes.font,\n\t          fill: this.attributes.fill,\n\t          stroke: this.attributes.stroke,\n\t          'stroke-width': this.attributes['stroke-width']\n\t        },\n\t        shadow_attributes: {\n\t          width: this.shadow_attributes.width,\n\t          color: this.shadow_attributes.color\n\t        }\n\t      });\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'restore',\n\t    value: function restore() {\n\t      // TODO(0xfe): State needs to be deep-restored.\n\t      var state = this.state_stack.pop();\n\t      this.state.font_family = state.state.font_family;\n\t      this.attributes.font = state.attributes.font;\n\t      this.attributes.fill = state.attributes.fill;\n\t      this.attributes.stroke = state.attributes.stroke;\n\t      this.attributes['stroke-width'] = state.attributes['stroke-width'];\n\t      this.shadow_attributes.width = state.shadow_attributes.width;\n\t      this.shadow_attributes.color = state.shadow_attributes.color;\n\t      return this;\n\t    }\n\t  }]);\n\n\t  return RaphaelContext;\n\t}();\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.SVGContext = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// @author Gregory Ristow (2015)\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar SVGContext = exports.SVGContext = function () {\n\t  function SVGContext(element) {\n\t    _classCallCheck(this, SVGContext);\n\t\n\t    // element is the parent DOM object\n\t    this.element = element;\n\t    // Create the SVG in the SVG namespace:\n\t    this.svgNS = 'http://www.w3.org/2000/svg';\n\t    var svg = this.create('svg');\n\t    // Add it to the canvas:\n\t    this.element.appendChild(svg);\n\t\n\t    // Point to it:\n\t    this.svg = svg;\n\t    this.groups = [this.svg]; // Create the group stack\n\t    this.parent = this.svg;\n\t\n\t    this.path = '';\n\t    this.pen = { x: 0, y: 0 };\n\t    this.lineWidth = 1.0;\n\t    this.state = {\n\t      scale: { x: 1, y: 1 },\n\t      'font-family': 'Arial',\n\t      'font-size': '8pt',\n\t      'font-weight': 'normal'\n\t    };\n\t\n\t    this.attributes = {\n\t      'stroke-width': 0.3,\n\t      'fill': 'black',\n\t      'stroke': 'black',\n\t      'stroke-dasharray': 'none',\n\t      'font-family': 'Arial',\n\t      'font-size': '10pt',\n\t      'font-weight': 'normal',\n\t      'font-style': 'normal'\n\t    };\n\t\n\t    this.background_attributes = {\n\t      'stroke-width': 0,\n\t      'fill': 'white',\n\t      'stroke': 'white',\n\t      'stroke-dasharray': 'none',\n\t      'font-family': 'Arial',\n\t      'font-size': '10pt',\n\t      'font-weight': 'normal',\n\t      'font-style': 'normal'\n\t    };\n\t\n\t    this.shadow_attributes = {\n\t      width: 0,\n\t      color: 'black'\n\t    };\n\t\n\t    this.state_stack = [];\n\t\n\t    // Test for Internet Explorer\n\t    this.iePolyfill();\n\t  }\n\t\n\t  _createClass(SVGContext, [{\n\t    key: 'create',\n\t    value: function create(svgElementType) {\n\t      return document.createElementNS(this.svgNS, svgElementType);\n\t    }\n\t\n\t    // Allow grouping elements in containers for interactivity.\n\t\n\t  }, {\n\t    key: 'openGroup',\n\t    value: function openGroup(cls, id, attrs) {\n\t      var group = this.create('g');\n\t      this.groups.push(group);\n\t      this.parent.appendChild(group);\n\t      this.parent = group;\n\t      if (cls) group.setAttribute('class', _vex.Vex.Prefix(cls));\n\t      if (id) group.setAttribute('id', _vex.Vex.Prefix(id));\n\t\n\t      if (attrs && attrs.pointerBBox) {\n\t        group.setAttribute('pointer-events', 'bounding-box');\n\t      }\n\t      return group;\n\t    }\n\t  }, {\n\t    key: 'closeGroup',\n\t    value: function closeGroup() {\n\t      this.groups.pop();\n\t      this.parent = this.groups[this.groups.length - 1];\n\t    }\n\t  }, {\n\t    key: 'add',\n\t    value: function add(elem) {\n\t      this.parent.appendChild(elem);\n\t    }\n\t\n\t    // Tests if the browser is Internet Explorer; if it is,\n\t    // we do some tricks to improve text layout.  See the\n\t    // note at ieMeasureTextFix() for details.\n\t\n\t  }, {\n\t    key: 'iePolyfill',\n\t    value: function iePolyfill() {\n\t      if (typeof navigator !== 'undefined') {\n\t        this.ie = /MSIE 9/i.test(navigator.userAgent) || /MSIE 10/i.test(navigator.userAgent) || /rv:11\\.0/i.test(navigator.userAgent) || /Trident/i.test(navigator.userAgent);\n\t      }\n\t    }\n\t\n\t    // ### Styling & State Methods:\n\t\n\t  }, {\n\t    key: 'setFont',\n\t    value: function setFont(family, size, weight) {\n\t      // Unlike canvas, in SVG italic is handled by font-style,\n\t      // not weight. So: we search the weight argument and\n\t      // apply bold and italic to weight and style respectively.\n\t      var bold = false;\n\t      var italic = false;\n\t      var style = 'normal';\n\t      // Weight might also be a number (200, 400, etc...) so we\n\t      // test its type to be sure we have access to String methods.\n\t      if (typeof weight === 'string') {\n\t        // look for \"italic\" in the weight:\n\t        if (weight.indexOf('italic') !== -1) {\n\t          weight = weight.replace(/italic/g, '');\n\t          italic = true;\n\t        }\n\t        // look for \"bold\" in weight\n\t        if (weight.indexOf('bold') !== -1) {\n\t          weight = weight.replace(/bold/g, '');\n\t          bold = true;\n\t        }\n\t        // remove any remaining spaces\n\t        weight = weight.replace(/ /g, '');\n\t      }\n\t      weight = bold ? 'bold' : weight;\n\t      weight = typeof weight === 'undefined' || weight === '' ? 'normal' : weight;\n\t\n\t      style = italic ? 'italic' : style;\n\t\n\t      var fontAttributes = {\n\t        'font-family': family,\n\t        'font-size': size + 'pt',\n\t        'font-weight': weight,\n\t        'font-style': style\n\t      };\n\t\n\t      // Store the font size so that if the browser is Internet\n\t      // Explorer we can fix its calculations of text width.\n\t      this.fontSize = Number(size);\n\t\n\t      _vex.Vex.Merge(this.attributes, fontAttributes);\n\t      _vex.Vex.Merge(this.state, fontAttributes);\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setRawFont',\n\t    value: function setRawFont(font) {\n\t      font = font.trim();\n\t      // Assumes size first, splits on space -- which is presently\n\t      // how all existing modules are calling this.\n\t      var fontArray = font.split(' ');\n\t\n\t      this.attributes['font-family'] = fontArray[1];\n\t      this.state['font-family'] = fontArray[1];\n\t\n\t      this.attributes['font-size'] = fontArray[0];\n\t      this.state['font-size'] = fontArray[0];\n\t\n\t      // Saves fontSize for IE polyfill\n\t      this.fontSize = Number(fontArray[0].match(/\\d+/));\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setFillStyle',\n\t    value: function setFillStyle(style) {\n\t      this.attributes.fill = style;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setBackgroundFillStyle',\n\t    value: function setBackgroundFillStyle(style) {\n\t      this.background_attributes.fill = style;\n\t      this.background_attributes.stroke = style;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setStrokeStyle',\n\t    value: function setStrokeStyle(style) {\n\t      this.attributes.stroke = style;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setShadowColor',\n\t    value: function setShadowColor(style) {\n\t      this.shadow_attributes.color = style;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setShadowBlur',\n\t    value: function setShadowBlur(blur) {\n\t      this.shadow_attributes.width = blur;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setLineWidth',\n\t    value: function setLineWidth(width) {\n\t      this.attributes['stroke-width'] = width;\n\t      this.lineWidth = width;\n\t    }\n\t\n\t    // @param array {lineDash} as [dashInt, spaceInt, dashInt, spaceInt, etc...]\n\t\n\t  }, {\n\t    key: 'setLineDash',\n\t    value: function setLineDash(lineDash) {\n\t      if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n\t        lineDash = lineDash.join(', ');\n\t        this.attributes['stroke-dasharray'] = lineDash;\n\t        return this;\n\t      } else {\n\t        throw new _vex.Vex.RERR('ArgumentError', 'lineDash must be an array of integers.');\n\t      }\n\t    }\n\t  }, {\n\t    key: 'setLineCap',\n\t    value: function setLineCap(lineCap) {\n\t      this.attributes['stroke-linecap'] = lineCap;\n\t      return this;\n\t    }\n\t\n\t    // ### Sizing & Scaling Methods:\n\t\n\t    // TODO (GCR): See note at scale() -- seperate our internal\n\t    // conception of pixel-based width/height from the style.width\n\t    // and style.height properties eventually to allow users to\n\t    // apply responsive sizing attributes to the SVG.\n\t\n\t  }, {\n\t    key: 'resize',\n\t    value: function resize(width, height) {\n\t      this.width = width;\n\t      this.height = height;\n\t      this.element.style.width = width;\n\t      var attributes = {\n\t        width: width,\n\t        height: height\n\t      };\n\t      this.applyAttributes(this.svg, attributes);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'scale',\n\t    value: function scale(x, y) {\n\t      // uses viewBox to scale\n\t      // TODO (GCR): we may at some point want to distinguish the\n\t      // style.width / style.height properties that are applied to\n\t      // the SVG object from our internal conception of the SVG\n\t      // width/height.  This would allow us to create automatically\n\t      // scaling SVG's that filled their containers, for instance.\n\t      //\n\t      // As this isn't implemented in Canvas or Raphael contexts,\n\t      // I've left as is for now, but in using the viewBox to\n\t      // handle internal scaling, am trying to make it possible\n\t      // for us to eventually move in that direction.\n\t\n\t      this.state.scale = { x: x, y: y };\n\t      var visibleWidth = this.width / x;\n\t      var visibleHeight = this.height / y;\n\t      this.setViewBox(0, 0, visibleWidth, visibleHeight);\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setViewBox',\n\t    value: function setViewBox() {\n\t      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t        args[_key] = arguments[_key];\n\t      }\n\t\n\t      // Override for \"x y w h\" style:\n\t      if (args.length === 1) {\n\t        var viewBox = args[0];\n\t\n\t        this.svg.setAttribute('viewBox', viewBox);\n\t      } else {\n\t        var xMin = args[0];\n\t        var yMin = args[1];\n\t        var width = args[2];\n\t        var height = args[3];\n\t\n\t        var viewBoxString = xMin + ' ' + yMin + ' ' + width + ' ' + height;\n\t        this.svg.setAttribute('viewBox', viewBoxString);\n\t      }\n\t    }\n\t\n\t    // ### Drawing helper methods:\n\t\n\t  }, {\n\t    key: 'applyAttributes',\n\t    value: function applyAttributes(element, attributes) {\n\t      Object.keys(attributes).forEach(function (propertyName) {\n\t        return element.setAttributeNS(null, propertyName, attributes[propertyName]);\n\t      });\n\t\n\t      return element;\n\t    }\n\t\n\t    // ### Shape & Path Methods:\n\t\n\t  }, {\n\t    key: 'clear',\n\t    value: function clear() {\n\t      // Clear the SVG by removing all inner children.\n\t\n\t      // (This approach is usually slightly more efficient\n\t      // than removing the old SVG & adding a new one to\n\t      // the container element, since it does not cause the\n\t      // container to resize twice.  Also, the resize\n\t      // triggered by removing the entire SVG can trigger\n\t      // a touchcancel event when the element resizes away\n\t      // from a touch point.)\n\t\n\t      while (this.svg.lastChild) {\n\t        this.svg.removeChild(this.svg.lastChild);\n\t      }\n\t\n\t      // Replace the viewbox attribute we just removed:\n\t      this.scale(this.state.scale.x, this.state.scale.y);\n\t    }\n\t\n\t    // ## Rectangles:\n\t\n\t  }, {\n\t    key: 'rect',\n\t    value: function rect(x, y, width, height, attributes) {\n\t      // Avoid invalid negative height attribs by\n\t      // flipping the rectangle on its head:\n\t      if (height < 0) {\n\t        y += height;\n\t        height *= -1;\n\t      }\n\t\n\t      // Create the rect & style it:\n\t      var rectangle = this.create('rect');\n\t      if (typeof attributes === 'undefined') {\n\t        attributes = {\n\t          fill: 'none',\n\t          'stroke-width': this.lineWidth,\n\t          stroke: 'black'\n\t        };\n\t      }\n\t\n\t      _vex.Vex.Merge(attributes, {\n\t        x: x,\n\t        y: y,\n\t        width: width,\n\t        height: height\n\t      });\n\t\n\t      this.applyAttributes(rectangle, attributes);\n\t\n\t      this.add(rectangle);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'fillRect',\n\t    value: function fillRect(x, y, width, height) {\n\t      if (height < 0) {\n\t        y += height;\n\t        height *= -1;\n\t      }\n\t\n\t      this.rect(x, y, width, height, this.attributes);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'clearRect',\n\t    value: function clearRect(x, y, width, height) {\n\t      // TODO(GCR): Improve implementation of this...\n\t      // Currently it draws a box of the background color, rather\n\t      // than creating alpha through lower z-levels.\n\t      //\n\t      // See the implementation of this in SVGKit:\n\t      // http://sourceforge.net/projects/svgkit/\n\t      // as a starting point.\n\t      //\n\t      // Adding a large number of transform paths (as we would\n\t      // have to do) could be a real performance hit.  Since\n\t      // tabNote seems to be the only module that makes use of this\n\t      // it may be worth creating a seperate tabStave that would\n\t      // draw lines around locations of tablature fingering.\n\t      //\n\t\n\t      this.rect(x, y, width, height, this.background_attributes);\n\t      return this;\n\t    }\n\t\n\t    // ## Paths:\n\t\n\t  }, {\n\t    key: 'beginPath',\n\t    value: function beginPath() {\n\t      this.path = '';\n\t      this.pen.x = 0;\n\t      this.pen.y = 0;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'moveTo',\n\t    value: function moveTo(x, y) {\n\t      this.path += 'M' + x + ' ' + y;\n\t      this.pen.x = x;\n\t      this.pen.y = y;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'lineTo',\n\t    value: function lineTo(x, y) {\n\t      this.path += 'L' + x + ' ' + y;\n\t      this.pen.x = x;\n\t      this.pen.y = y;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'bezierCurveTo',\n\t    value: function bezierCurveTo(x1, y1, x2, y2, x, y) {\n\t      this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n\t      this.pen.x = x;\n\t      this.pen.y = y;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'quadraticCurveTo',\n\t    value: function quadraticCurveTo(x1, y1, x, y) {\n\t      this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n\t      this.pen.x = x;\n\t      this.pen.y = y;\n\t      return this;\n\t    }\n\t\n\t    // This is an attempt (hack) to simulate the HTML5 canvas\n\t    // arc method.\n\t\n\t  }, {\n\t    key: 'arc',\n\t    value: function arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n\t      function normalizeAngle(angle) {\n\t        while (angle < 0) {\n\t          angle += Math.PI * 2;\n\t        }\n\t\n\t        while (angle > Math.PI * 2) {\n\t          angle -= Math.PI * 2;\n\t        }\n\t        return angle;\n\t      }\n\t\n\t      startAngle = normalizeAngle(startAngle);\n\t      endAngle = normalizeAngle(endAngle);\n\t\n\t      if (startAngle > endAngle) {\n\t        var tmp = startAngle;\n\t        startAngle = endAngle;\n\t        endAngle = tmp;\n\t        antiClockwise = !antiClockwise;\n\t      }\n\t\n\t      var delta = endAngle - startAngle;\n\t\n\t      if (delta > Math.PI) {\n\t        this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);\n\t        this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);\n\t      } else {\n\t        this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'arcHelper',\n\t    value: function arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {\n\t      var x1 = x + radius * Math.cos(startAngle);\n\t      var y1 = y + radius * Math.sin(startAngle);\n\t\n\t      var x2 = x + radius * Math.cos(endAngle);\n\t      var y2 = y + radius * Math.sin(endAngle);\n\t\n\t      var largeArcFlag = 0;\n\t      var sweepFlag = 0;\n\t      if (antiClockwise) {\n\t        sweepFlag = 1;\n\t        if (endAngle - startAngle < Math.PI) {\n\t          largeArcFlag = 1;\n\t        }\n\t      } else if (endAngle - startAngle > Math.PI) {\n\t        largeArcFlag = 1;\n\t      }\n\t\n\t      this.path += 'M' + x1 + ' ' + y1 + ' A' + radius + ' ' + radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' + x2 + ' ' + y2 + 'M' + this.pen.x + ' ' + this.pen.y;\n\t    }\n\t  }, {\n\t    key: 'closePath',\n\t    value: function closePath() {\n\t      this.path += 'Z';\n\t\n\t      return this;\n\t    }\n\t\n\t    // Adapted from the source for Raphael's Element.glow\n\t\n\t  }, {\n\t    key: 'glow',\n\t    value: function glow() {\n\t      // Calculate the width & paths of the glow:\n\t      if (this.shadow_attributes.width > 0) {\n\t        var sa = this.shadow_attributes;\n\t        var num_paths = sa.width / 2;\n\t        // Stroke at varying widths to create effect of gaussian blur:\n\t        for (var i = 1; i <= num_paths; i++) {\n\t          var attributes = {\n\t            stroke: sa.color,\n\t            'stroke-linejoin': 'round',\n\t            'stroke-linecap': 'round',\n\t            'stroke-width': +(sa.width * 0.4 / num_paths * i).toFixed(3),\n\t            opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3)\n\t          };\n\t\n\t          var path = this.create('path');\n\t          attributes.d = this.path;\n\t          this.applyAttributes(path, attributes);\n\t          this.add(path);\n\t        }\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'fill',\n\t    value: function fill(attributes) {\n\t      // If our current path is set to glow, make it glow\n\t      this.glow();\n\t\n\t      var path = this.create('path');\n\t      if (typeof attributes === 'undefined') {\n\t        attributes = {};\n\t        _vex.Vex.Merge(attributes, this.attributes);\n\t        attributes.stroke = 'none';\n\t      }\n\t\n\t      attributes.d = this.path;\n\t\n\t      this.applyAttributes(path, attributes);\n\t      this.add(path);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'stroke',\n\t    value: function stroke() {\n\t      // If our current path is set to glow, make it glow.\n\t      this.glow();\n\t\n\t      var path = this.create('path');\n\t      var attributes = {};\n\t      _vex.Vex.Merge(attributes, this.attributes);\n\t      attributes.fill = 'none';\n\t      attributes['stroke-width'] = this.lineWidth;\n\t      attributes.d = this.path;\n\t\n\t      this.applyAttributes(path, attributes);\n\t      this.add(path);\n\t      return this;\n\t    }\n\t\n\t    // ## Text Methods:\n\t\n\t  }, {\n\t    key: 'measureText',\n\t    value: function measureText(text) {\n\t      var txt = this.create('text');\n\t      if (typeof txt.getBBox !== 'function') {\n\t        return { x: 0, y: 0, width: 0, height: 0 };\n\t      }\n\t\n\t      txt.textContent = text;\n\t      this.applyAttributes(txt, this.attributes);\n\t\n\t      // Temporarily add it to the document for measurement.\n\t      this.svg.appendChild(txt);\n\t\n\t      var bbox = txt.getBBox();\n\t      if (this.ie && text !== '' && this.attributes['font-style'] === 'italic') {\n\t        bbox = this.ieMeasureTextFix(bbox, text);\n\t      }\n\t\n\t      this.svg.removeChild(txt);\n\t      return bbox;\n\t    }\n\t  }, {\n\t    key: 'ieMeasureTextFix',\n\t    value: function ieMeasureTextFix(bbox) {\n\t      // Internet Explorer over-pads text in italics,\n\t      // resulting in giant width estimates for measureText.\n\t      // To fix this, we use this formula, tested against\n\t      // ie 11:\n\t      // overestimate (in pixels) = FontSize(in pt) * 1.196 + 1.96\n\t      // And then subtract the overestimate from calculated width.\n\t\n\t      var fontSize = Number(this.fontSize);\n\t      var m = 1.196;\n\t      var b = 1.9598;\n\t      var widthCorrection = m * fontSize + b;\n\t      var width = bbox.width - widthCorrection;\n\t      var height = bbox.height - 1.5;\n\t\n\t      // Get non-protected copy:\n\t      var box = {\n\t        x: bbox.x,\n\t        y: bbox.y,\n\t        width: width,\n\t        height: height\n\t      };\n\t\n\t      return box;\n\t    }\n\t  }, {\n\t    key: 'fillText',\n\t    value: function fillText(text, x, y) {\n\t      var attributes = {};\n\t      _vex.Vex.Merge(attributes, this.attributes);\n\t      attributes.stroke = 'none';\n\t      attributes.x = x;\n\t      attributes.y = y;\n\t\n\t      var txt = this.create('text');\n\t      txt.textContent = text;\n\t      this.applyAttributes(txt, attributes);\n\t      this.add(txt);\n\t    }\n\t  }, {\n\t    key: 'save',\n\t    value: function save() {\n\t      // TODO(mmuthanna): State needs to be deep-copied.\n\t      this.state_stack.push({\n\t        state: {\n\t          'font-family': this.state['font-family'],\n\t          'font-weight': this.state['font-weight'],\n\t          'font-style': this.state['font-style'],\n\t          'font-size': this.state['font-size']\n\t        },\n\t        attributes: {\n\t          'font-family': this.attributes['font-family'],\n\t          'font-weight': this.attributes['font-weight'],\n\t          'font-style': this.attributes['font-style'],\n\t          'font-size': this.attributes['font-size'],\n\t          fill: this.attributes.fill,\n\t          stroke: this.attributes.stroke,\n\t          'stroke-width': this.attributes['stroke-width'],\n\t          'stroke-dasharray': this.attributes['stroke-dasharray']\n\t        },\n\t        shadow_attributes: {\n\t          width: this.shadow_attributes.width,\n\t          color: this.shadow_attributes.color\n\t        }\n\t      });\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'restore',\n\t    value: function restore() {\n\t      // TODO(0xfe): State needs to be deep-restored.\n\t      var state = this.state_stack.pop();\n\t      this.state['font-family'] = state.state['font-family'];\n\t      this.state['font-weight'] = state.state['font-weight'];\n\t      this.state['font-style'] = state.state['font-style'];\n\t      this.state['font-size'] = state.state['font-size'];\n\t\n\t      this.attributes['font-family'] = state.attributes['font-family'];\n\t      this.attributes['font-weight'] = state.attributes['font-weight'];\n\t      this.attributes['font-style'] = state.attributes['font-style'];\n\t      this.attributes['font-size'] = state.attributes['font-size'];\n\t\n\t      this.attributes.fill = state.attributes.fill;\n\t      this.attributes.stroke = state.attributes.stroke;\n\t      this.attributes['stroke-width'] = state.attributes['stroke-width'];\n\t      this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n\t\n\t      this.shadow_attributes.width = state.shadow_attributes.width;\n\t      this.shadow_attributes.color = state.shadow_attributes.color;\n\t      return this;\n\t    }\n\t  }]);\n\n\t  return SVGContext;\n\t}();\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Formatter = undefined;\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This file implements the formatting and layout algorithms that are used\n\t// to position notes in a voice. The algorithm can align multiple voices both\n\t// within a stave, and across multiple staves.\n\t//\n\t// To do this, the formatter breaks up voices into a grid of rational-valued\n\t// `ticks`, to which each note is assigned. Then, minimum widths are assigned\n\t// to each tick based on the widths of the notes and modifiers in that tick. This\n\t// establishes the smallest amount of space required for each tick.\n\t//\n\t// Finally, the formatter distributes the left over space proportionally to\n\t// all the ticks, setting the `x` values of the notes in each tick.\n\t//\n\t// See `tests/formatter_tests.js` for usage examples. The helper functions included\n\t// here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _beam = __webpack_require__(15);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _fraction = __webpack_require__(3);\n\t\n\tvar _voice = __webpack_require__(18);\n\t\n\tvar _staveconnector = __webpack_require__(19);\n\t\n\tvar _stavenote = __webpack_require__(20);\n\t\n\tvar _note = __webpack_require__(22);\n\t\n\tvar _modifiercontext = __webpack_require__(27);\n\t\n\tvar _tickcontext = __webpack_require__(39);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (Formatter.DEBUG) _vex.Vex.L('Vex.Flow.Formatter', args);\n\t}\n\t\n\t// Helper function to locate the next non-rest note(s).\n\tfunction lookAhead(notes, restLine, i, compare) {\n\t  // If no valid next note group, nextRestLine is same as current.\n\t  var nextRestLine = restLine;\n\t\n\t  // Get the rest line for next valid non-rest note group.\n\t  for (i += 1; i < notes.length; i += 1) {\n\t    var note = notes[i];\n\t    if (!note.isRest() && !note.shouldIgnoreTicks()) {\n\t      nextRestLine = note.getLineForRest();\n\t      break;\n\t    }\n\t  }\n\t\n\t  // Locate the mid point between two lines.\n\t  if (compare && restLine !== nextRestLine) {\n\t    var top = Math.max(restLine, nextRestLine);\n\t    var bot = Math.min(restLine, nextRestLine);\n\t    nextRestLine = _vex.Vex.MidLine(top, bot);\n\t  }\n\t  return nextRestLine;\n\t}\n\t\n\t// Take an array of `voices` and place aligned tickables in the same context. Returns\n\t// a mapping from `tick` to `ContextType`, a list of `tick`s, and the resolution\n\t// multiplier.\n\t//\n\t// Params:\n\t// * `voices`: Array of `Voice` instances.\n\t// * `ContextType`: A context class (e.g., `ModifierContext`, `TickContext`)\n\t// * `addToContext`: Function to add tickable to context.\n\tfunction createContexts(voices, ContextType, addToContext) {\n\t  if (!voices || !voices.length) {\n\t    throw new _vex.Vex.RERR('BadArgument', 'No voices to format');\n\t  }\n\t\n\t  // Find out highest common multiple of resolution multipliers.\n\t  // The purpose of this is to find out a common denominator\n\t  // for all fractional tick values in all tickables of all voices,\n\t  // so that the values can be expanded and the numerator used\n\t  // as an integer tick value.\n\t  var totalTicks = voices[0].getTotalTicks();\n\t  var resolutionMultiplier = voices.reduce(function (resolutionMultiplier, voice) {\n\t    if (!voice.getTotalTicks().equals(totalTicks)) {\n\t      throw new _vex.Vex.RERR('TickMismatch', 'Voices should have same total note duration in ticks.');\n\t    }\n\t\n\t    if (voice.getMode() === _voice.Voice.Mode.STRICT && !voice.isComplete()) {\n\t      throw new _vex.Vex.RERR('IncompleteVoice', 'Voice does not have enough notes.');\n\t    }\n\t\n\t    return Math.max(resolutionMultiplier, _fraction.Fraction.LCM(resolutionMultiplier, voice.getResolutionMultiplier()));\n\t  }, 1);\n\t\n\t  // Initialize tick maps.\n\t  var tickToContextMap = {};\n\t  var tickList = [];\n\t  var contexts = [];\n\t\n\t  // For each voice, extract notes and create a context for every\n\t  // new tick that hasn't been seen before.\n\t  voices.forEach(function (voice) {\n\t    // Use resolution multiplier as denominator to expand ticks\n\t    // to suitable integer values, so that no additional expansion\n\t    // of fractional tick values is needed.\n\t    var ticksUsed = new _fraction.Fraction(0, resolutionMultiplier);\n\t\n\t    voice.getTickables().forEach(function (tickable) {\n\t      var integerTicks = ticksUsed.numerator;\n\t\n\t      // If we have no tick context for this tick, create one.\n\t      if (!tickToContextMap[integerTicks]) {\n\t        var newContext = new ContextType();\n\t        contexts.push(newContext);\n\t        tickToContextMap[integerTicks] = newContext;\n\t      }\n\t\n\t      // Add this tickable to the TickContext.\n\t      addToContext(tickable, tickToContextMap[integerTicks]);\n\t\n\t      // Maintain a sorted list of tick contexts.\n\t      tickList.push(integerTicks);\n\t      ticksUsed.add(tickable.getTicks());\n\t    });\n\t  });\n\t\n\t  return {\n\t    map: tickToContextMap,\n\t    array: contexts,\n\t    list: _vex.Vex.SortAndUnique(tickList, function (a, b) {\n\t      return a - b;\n\t    }, function (a, b) {\n\t      return a === b;\n\t    }),\n\t    resolutionMultiplier: resolutionMultiplier\n\t  };\n\t}\n\t\n\tvar Formatter = exports.Formatter = function () {\n\t  _createClass(Formatter, null, [{\n\t    key: 'SimpleFormat',\n\t\n\t    // Helper function to layout \"notes\" one after the other without\n\t    // regard for proportions. Useful for tests and debugging.\n\t    value: function SimpleFormat(notes) {\n\t      var x = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\t\n\t      var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t\n\t      var _ref$paddingBetween = _ref.paddingBetween;\n\t      var paddingBetween = _ref$paddingBetween === undefined ? 10 : _ref$paddingBetween;\n\t\n\t      notes.reduce(function (x, note) {\n\t        note.addToModifierContext(new _modifiercontext.ModifierContext());\n\t        var tick = new _tickcontext.TickContext().addTickable(note).preFormat();\n\t        var extra = tick.getExtraPx();\n\t        tick.setX(x + extra.left);\n\t\n\t        return x + tick.getWidth() + extra.right + paddingBetween;\n\t      }, x);\n\t    }\n\t\n\t    // Helper function to plot formatter debug info.\n\t\n\t  }, {\n\t    key: 'plotDebugging',\n\t    value: function plotDebugging(ctx, formatter, xPos, y1, y2) {\n\t      var x = xPos + _note.Note.STAVEPADDING;\n\t      var contextGaps = formatter.contextGaps;\n\t      function stroke(x1, x2, color) {\n\t        ctx.beginPath();\n\t        ctx.setStrokeStyle(color);\n\t        ctx.setFillStyle(color);\n\t        ctx.setLineWidth(1);\n\t        ctx.fillRect(x1, y1, x2 - x1, y2 - y1);\n\t      }\n\t\n\t      ctx.save();\n\t      ctx.setFont('Arial', 8, '');\n\t\n\t      contextGaps.gaps.forEach(function (gap) {\n\t        stroke(x + gap.x1, x + gap.x2, '#aaa');\n\t        // Vex.drawDot(ctx, xPos + gap.x1, yPos, 'blue');\n\t        ctx.fillText(Math.round(gap.x2 - gap.x1), x + gap.x1, y2 + 12);\n\t      });\n\t\n\t      ctx.fillText(Math.round(contextGaps.total) + 'px', x - 20, y2 + 12);\n\t      ctx.setFillStyle('red');\n\t\n\t      ctx.fillText('Loss: ' + formatter.lossHistory.map(function (loss) {\n\t        return Math.round(loss);\n\t      }), x - 20, y2 + 22);\n\t      ctx.restore();\n\t    }\n\t\n\t    // Helper function to format and draw a single voice. Returns a bounding\n\t    // box for the notation.\n\t    //\n\t    // Parameters:\n\t    // * `ctx` - The rendering context\n\t    // * `stave` - The stave to which to draw (`Stave` or `TabStave`)\n\t    // * `notes` - Array of `Note` instances (`StaveNote`, `TextNote`, `TabNote`, etc.)\n\t    // * `params` - One of below:\n\t    //    * Setting `autobeam` only `(context, stave, notes, true)` or\n\t    //      `(ctx, stave, notes, {autobeam: true})`\n\t    //    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`\n\t    //    * Setting both a struct is needed `(context, stave, notes, {\n\t    //      autobeam: true, align_rests: true})`\n\t    //\n\t    // `autobeam` automatically generates beams for the notes.\n\t    // `align_rests` aligns rests with nearby notes.\n\t\n\t  }, {\n\t    key: 'FormatAndDraw',\n\t    value: function FormatAndDraw(ctx, stave, notes, params) {\n\t      var options = {\n\t        auto_beam: false,\n\t        align_rests: false\n\t      };\n\t\n\t      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {\n\t        _vex.Vex.Merge(options, params);\n\t      } else if (typeof params === 'boolean') {\n\t        options.auto_beam = params;\n\t      }\n\t\n\t      // Start by creating a voice and adding all the notes to it.\n\t      var voice = new _voice.Voice(_tables.Flow.TIME4_4).setMode(_voice.Voice.Mode.SOFT).addTickables(notes);\n\t\n\t      // Then create beams, if requested.\n\t      var beams = options.auto_beam ? _beam.Beam.applyAndGetBeams(voice) : [];\n\t\n\t      // Instantiate a `Formatter` and format the notes.\n\t      new Formatter().joinVoices([voice], { align_rests: options.align_rests }).formatToStave([voice], stave, { align_rests: options.align_rests, stave: stave });\n\t\n\t      // Render the voice and beams to the stave.\n\t      voice.setStave(stave).draw(ctx, stave);\n\t      beams.forEach(function (beam) {\n\t        return beam.setContext(ctx).draw();\n\t      });\n\t\n\t      // Return the bounding box of the voice.\n\t      return voice.getBoundingBox();\n\t    }\n\t\n\t    // Helper function to format and draw aligned tab and stave notes in two\n\t    // separate staves.\n\t    //\n\t    // Parameters:\n\t    // * `ctx` - The rendering context\n\t    // * `tabstave` - A `TabStave` instance on which to render `TabNote`s.\n\t    // * `stave` - A `Stave` instance on which to render `Note`s.\n\t    // * `notes` - Array of `Note` instances for the stave (`StaveNote`, `BarNote`, etc.)\n\t    // * `tabnotes` - Array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n\t    // * `autobeam` - Automatically generate beams.\n\t    // * `params` - A configuration object:\n\t    //    * `autobeam` automatically generates beams for the notes.\n\t    //    * `align_rests` aligns rests with nearby notes.\n\t\n\t  }, {\n\t    key: 'FormatAndDrawTab',\n\t    value: function FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {\n\t      var opts = {\n\t        auto_beam: autobeam,\n\t        align_rests: false\n\t      };\n\t\n\t      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {\n\t        _vex.Vex.Merge(opts, params);\n\t      } else if (typeof params === 'boolean') {\n\t        opts.auto_beam = params;\n\t      }\n\t\n\t      // Create a `4/4` voice for `notes`.\n\t      var notevoice = new _voice.Voice(_tables.Flow.TIME4_4).setMode(_voice.Voice.Mode.SOFT).addTickables(notes);\n\t\n\t      // Create a `4/4` voice for `tabnotes`.\n\t      var tabvoice = new _voice.Voice(_tables.Flow.TIME4_4).setMode(_voice.Voice.Mode.SOFT).addTickables(tabnotes);\n\t\n\t      // Then create beams, if requested.\n\t      var beams = opts.auto_beam ? _beam.Beam.applyAndGetBeams(notevoice) : [];\n\t\n\t      // Instantiate a `Formatter` and align tab and stave notes.\n\t      new Formatter().joinVoices([notevoice], { align_rests: opts.align_rests }).joinVoices([tabvoice]).formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\n\t\n\t      // Render voices and beams to staves.\n\t      notevoice.draw(ctx, stave);\n\t      tabvoice.draw(ctx, tabstave);\n\t      beams.forEach(function (beam) {\n\t        return beam.setContext(ctx).draw();\n\t      });\n\t\n\t      // Draw a connector between tab and note staves.\n\t      new _staveconnector.StaveConnector(stave, tabstave).setContext(ctx).draw();\n\t    }\n\t\n\t    // Auto position rests based on previous/next note positions.\n\t    //\n\t    // Params:\n\t    // * `notes`: An array of notes.\n\t    // * `alignAllNotes`: If set to false, only aligns non-beamed notes.\n\t    // * `alignTuplets`: If set to false, ignores tuplets.\n\t\n\t  }, {\n\t    key: 'AlignRestsToNotes',\n\t    value: function AlignRestsToNotes(notes, alignAllNotes, alignTuplets) {\n\t      notes.forEach(function (note, index) {\n\t        if (note instanceof _stavenote.StaveNote && note.isRest()) {\n\t          if (note.tuplet && !alignTuplets) return;\n\t\n\t          // If activated rests not on default can be rendered as specified.\n\t          var position = note.getGlyph().position.toUpperCase();\n\t          if (position !== 'R/4' && position !== 'B/4') return;\n\t\n\t          if (alignAllNotes || note.beam != null) {\n\t            // Align rests with previous/next notes.\n\t            var props = note.getKeyProps()[0];\n\t            if (index === 0) {\n\t              props.line = lookAhead(notes, props.line, index, false);\n\t              note.setKeyLine(0, props.line);\n\t            } else if (index > 0 && index < notes.length) {\n\t              // If previous note is a rest, use its line number.\n\t              var restLine = void 0;\n\t              if (notes[index - 1].isRest()) {\n\t                restLine = notes[index - 1].getKeyProps()[0].line;\n\t                props.line = restLine;\n\t              } else {\n\t                restLine = notes[index - 1].getLineForRest();\n\t                // Get the rest line for next valid non-rest note group.\n\t                props.line = lookAhead(notes, restLine, index, true);\n\t              }\n\t              note.setKeyLine(0, props.line);\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  function Formatter() {\n\t    _classCallCheck(this, Formatter);\n\t\n\t    // Minimum width required to render all the notes in the voices.\n\t    this.minTotalWidth = 0;\n\t\n\t    // This is set to `true` after `minTotalWidth` is calculated.\n\t    this.hasMinTotalWidth = false;\n\t\n\t    // Total number of ticks in the voice.\n\t    this.totalTicks = new _fraction.Fraction(0, 1);\n\t\n\t    // Arrays of tick and modifier contexts.\n\t    this.tickContexts = null;\n\t    this.modiferContexts = null;\n\t\n\t    // Gaps between contexts, for free movement of notes post\n\t    // formatting.\n\t    this.contextGaps = {\n\t      total: 0,\n\t      gaps: []\n\t    };\n\t\n\t    this.voices = [];\n\t  }\n\t\n\t  // Find all the rests in each of the `voices` and align them\n\t  // to neighboring notes. If `alignAllNotes` is `false`, then only\n\t  // align non-beamed notes.\n\t\n\t\n\t  _createClass(Formatter, [{\n\t    key: 'alignRests',\n\t    value: function alignRests(voices, alignAllNotes) {\n\t      if (!voices || !voices.length) {\n\t        throw new _vex.Vex.RERR('BadArgument', 'No voices to format rests');\n\t      }\n\t\n\t      voices.forEach(function (voice) {\n\t        return Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes);\n\t      });\n\t    }\n\t\n\t    // Calculate the minimum width required to align and format `voices`.\n\t\n\t  }, {\n\t    key: 'preCalculateMinTotalWidth',\n\t    value: function preCalculateMinTotalWidth(voices) {\n\t      // Cache results.\n\t      if (this.hasMinTotalWidth) return this.minTotalWidth;\n\t\n\t      // Create tick contexts if not already created.\n\t      if (!this.tickContexts) {\n\t        if (!voices) {\n\t          throw new _vex.Vex.RERR('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n\t        }\n\t\n\t        this.createTickContexts(voices);\n\t      }\n\t\n\t      var _tickContexts = this.tickContexts;\n\t      var contextList = _tickContexts.list;\n\t      var contextMap = _tickContexts.map;\n\t\n\t      // Go through each tick context and calculate total width.\n\t\n\t      this.minTotalWidth = contextList.map(function (tick) {\n\t        var context = contextMap[tick];\n\t        context.preFormat();\n\t        return context.getWidth();\n\t      }).reduce(function (a, b) {\n\t        return a + b;\n\t      }, 0);\n\t\n\t      this.hasMinTotalWidth = true;\n\t\n\t      return this.minTotalWidth;\n\t    }\n\t\n\t    // Get minimum width required to render all voices. Either `format` or\n\t    // `preCalculateMinTotalWidth` must be called before this method.\n\t\n\t  }, {\n\t    key: 'getMinTotalWidth',\n\t    value: function getMinTotalWidth() {\n\t      if (!this.hasMinTotalWidth) {\n\t        throw new _vex.Vex.RERR('NoMinTotalWidth', \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\");\n\t      }\n\t\n\t      return this.minTotalWidth;\n\t    }\n\t\n\t    // Create `ModifierContext`s for each tick in `voices`.\n\t\n\t  }, {\n\t    key: 'createModifierContexts',\n\t    value: function createModifierContexts(voices) {\n\t      var contexts = createContexts(voices, _modifiercontext.ModifierContext, function (tickable, context) {\n\t        return tickable.addToModifierContext(context);\n\t      });\n\t\n\t      this.modiferContexts = contexts;\n\t      return contexts;\n\t    }\n\t\n\t    // Create `TickContext`s for each tick in `voices`. Also calculate the\n\t    // total number of ticks in voices.\n\t\n\t  }, {\n\t    key: 'createTickContexts',\n\t    value: function createTickContexts(voices) {\n\t      var contexts = createContexts(voices, _tickcontext.TickContext, function (tickable, context) {\n\t        return context.addTickable(tickable);\n\t      });\n\t\n\t      contexts.array.forEach(function (context) {\n\t        context.tContexts = contexts.array;\n\t      });\n\t\n\t      this.totalTicks = voices[0].getTicksUsed().clone();\n\t      this.tickContexts = contexts;\n\t      return contexts;\n\t    }\n\t\n\t    // This is the core formatter logic. Format voices and justify them\n\t    // to `justifyWidth` pixels. `renderingContext` is required to justify elements\n\t    // that can't retreive widths without a canvas. This method sets the `x` positions\n\t    // of all the tickables/notes in the formatter.\n\t\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      var justifyWidth = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\t      var renderingContext = arguments[1];\n\t\n\t      var _this = this;\n\t\n\t      var voices = arguments[2];\n\t      var stave = arguments[3];\n\t\n\t      // Initialize context maps.\n\t      var contexts = this.tickContexts;\n\t      var contextList = contexts.list;\n\t      var contextMap = contexts.map;\n\t      var resolutionMultiplier = contexts.resolutionMultiplier;\n\t\n\t      // If voices and a stave were provided, set the Stave for each voice\n\t      // and preFormat to apply Y values to the notes;\n\t\n\t      if (voices && stave) {\n\t        voices.forEach(function (voice) {\n\t          return voice.setStave(stave).preFormat();\n\t        });\n\t      }\n\t\n\t      // Now distribute the ticks to each tick context, and assign them their\n\t      // own X positions.\n\t      var x = 0;\n\t      var shift = 0;\n\t      var centerX = justifyWidth / 2;\n\t      this.minTotalWidth = 0;\n\t\n\t      // Pass 1: Give each note maximum width requested by context.\n\t      contextList.forEach(function (tick) {\n\t        var context = contextMap[tick];\n\t        if (renderingContext) context.setContext(renderingContext);\n\t\n\t        // Make sure that all tickables in this context have calculated their\n\t        // space requirements.\n\t        context.preFormat();\n\t\n\t        var width = context.getWidth();\n\t        _this.minTotalWidth += width;\n\t\n\t        var metrics = context.getMetrics();\n\t        x = x + shift + metrics.extraLeftPx;\n\t        context.setX(x);\n\t\n\t        // Calculate shift for the next tick.\n\t        shift = width - metrics.extraLeftPx;\n\t      });\n\t\n\t      this.minTotalWidth = x + shift;\n\t      this.hasMinTotalWidth = true;\n\t\n\t      // No justification needed. End formatting.\n\t      if (justifyWidth <= 0) return;\n\t\n\t      // Pass 2: Take leftover width, and distribute it to proportionately to\n\t      // all notes.\n\t      var remainingX = justifyWidth - this.minTotalWidth;\n\t      var leftoverPxPerTick = remainingX / (this.totalTicks.value() * resolutionMultiplier);\n\t      var spaceAccum = 0;\n\t\n\t      contextList.forEach(function (tick, index) {\n\t        var prevTick = contextList[index - 1] || 0;\n\t        var context = contextMap[tick];\n\t        var tickSpace = (tick - prevTick) * leftoverPxPerTick;\n\t\n\t        spaceAccum += tickSpace;\n\t        context.setX(context.getX() + spaceAccum);\n\t\n\t        // Move center aligned tickables to middle\n\t        context.getCenterAlignedTickables().forEach(function (tickable) {\n\t          // eslint-disable-line\n\t          tickable.center_x_shift = centerX - context.getX();\n\t        });\n\t      });\n\t\n\t      // Just one context. Done formatting.\n\t      if (contextList.length === 1) return;\n\t\n\t      this.justifyWidth = justifyWidth;\n\t      this.lossHistory = [];\n\t      this.evaluate();\n\t    }\n\t\n\t    // Calculate the total cost of this formatting decision.\n\t\n\t  }, {\n\t    key: 'evaluate',\n\t    value: function evaluate() {\n\t      var _this2 = this;\n\t\n\t      var justifyWidth = this.justifyWidth;\n\t      // Calculate available slack per tick context. This works out how much freedom\n\t      // to move a context has in either direction, without affecting other notes.\n\t      this.contextGaps = { total: 0, gaps: [] };\n\t      this.tickContexts.list.forEach(function (tick, index) {\n\t        if (index === 0) return;\n\t        var prevTick = _this2.tickContexts.list[index - 1];\n\t        var prevContext = _this2.tickContexts.map[prevTick];\n\t        var context = _this2.tickContexts.map[tick];\n\t        var prevMetrics = prevContext.getMetrics();\n\t\n\t        var insideRightEdge = prevContext.getX() + prevMetrics.width;\n\t        var insideLeftEdge = context.getX();\n\t        var gap = insideLeftEdge - insideRightEdge;\n\t        _this2.contextGaps.total += gap;\n\t        _this2.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n\t\n\t        // Tell the tick contexts how much they can reposition themselves.\n\t        context.getFormatterMetrics().freedom.left = gap;\n\t        prevContext.getFormatterMetrics().freedom.right = gap;\n\t      });\n\t\n\t      // Calculate mean distance in each voice for each duration type, then calculate\n\t      // how far each note is from the mean.\n\t      var durationStats = this.durationStats = {};\n\t\n\t      function updateStats(duration, space) {\n\t        var stats = durationStats[duration];\n\t        if (stats === undefined) {\n\t          durationStats[duration] = { mean: space, count: 1 };\n\t        } else {\n\t          stats.count += 1;\n\t          stats.mean = (stats.mean + space) / 2;\n\t        }\n\t      }\n\t\n\t      this.voices.forEach(function (voice) {\n\t        voice.getTickables().forEach(function (note, i, notes) {\n\t          var duration = note.getTicks().clone().simplify().toString();\n\t          var metrics = note.getMetrics();\n\t          var formatterMetrics = note.getFormatterMetrics();\n\t          var leftNoteEdge = note.getX() + metrics.noteWidth + metrics.modRightPx + metrics.extraRightPx;\n\t          var space = 0;\n\t\n\t          if (i < notes.length - 1) {\n\t            var rightNote = notes[i + 1];\n\t            var rightMetrics = rightNote.getMetrics();\n\t            var rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.extraLeftPx;\n\t\n\t            space = rightNoteEdge - leftNoteEdge;\n\t            formatterMetrics.space.used = rightNote.getX() - note.getX();\n\t            rightNote.getFormatterMetrics().freedom.left = space;\n\t          } else {\n\t            space = justifyWidth - leftNoteEdge;\n\t            formatterMetrics.space.used = justifyWidth - note.getX();\n\t          }\n\t\n\t          formatterMetrics.freedom.right = space;\n\t          updateStats(duration, formatterMetrics.space.used);\n\t        });\n\t      });\n\t\n\t      // Calculate how much each note deviates from the mean. Loss function is square\n\t      // root of the sum of squared deviations.\n\t      var totalDeviation = 0;\n\t      this.voices.forEach(function (voice) {\n\t        voice.getTickables().forEach(function (note) {\n\t          var duration = note.getTicks().clone().simplify().toString();\n\t          var metrics = note.getFormatterMetrics();\n\t          metrics.iterations += 1;\n\t          metrics.space.deviation = metrics.space.used - durationStats[duration].mean;\n\t          metrics.duration = duration;\n\t          metrics.space.mean = durationStats[duration].mean;\n\t\n\t          totalDeviation += Math.pow(durationStats[duration].mean, 2);\n\t        });\n\t      });\n\t\n\t      this.totalCost = Math.sqrt(totalDeviation);\n\t      this.lossHistory.push(this.totalCost);\n\t      return this;\n\t    }\n\t\n\t    // Run a single iteration of rejustification. At a high level, this method calculates\n\t    // the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n\t    // attempt to reduce the cost. You can call this method multiple times until it finds\n\t    // and oscillates around a global minimum.\n\t\n\t  }, {\n\t    key: 'tune',\n\t    value: function tune() {\n\t      var _this3 = this;\n\t\n\t      var sum = function sum(means) {\n\t        return means.reduce(function (a, b) {\n\t          return a + b;\n\t        });\n\t      };\n\t\n\t      // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n\t      // on adjacent tickcontexts.\n\t      function move(current, prev, next, shift) {\n\t        current.setX(current.getX() + shift);\n\t        current.getFormatterMetrics().freedom.left += shift;\n\t        current.getFormatterMetrics().freedom.right -= shift;\n\t\n\t        if (prev) prev.getFormatterMetrics().freedom.right += shift;\n\t        if (next) next.getFormatterMetrics().freedom.left -= shift;\n\t      }\n\t\n\t      var shift = 0;\n\t      this.tickContexts.list.forEach(function (tick, index, list) {\n\t        var context = _this3.tickContexts.map[tick];\n\t        var prevContext = index > 0 ? _this3.tickContexts.map[list[index - 1]] : null;\n\t        var nextContext = index < list.length - 1 ? _this3.tickContexts.map[list[index + 1]] : null;\n\t\n\t        move(context, prevContext, nextContext, shift);\n\t\n\t        var cost = -sum(context.getTickables().map(function (t) {\n\t          return t.getFormatterMetrics().space.deviation;\n\t        }));\n\t\n\t        if (cost > 0) {\n\t          shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n\t        } else if (cost < 0) {\n\t          if (nextContext) {\n\t            shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n\t          } else {\n\t            shift = 0;\n\t          }\n\t        }\n\t\n\t        var minShift = Math.min(5, Math.abs(shift));\n\t        shift = shift > 0 ? minShift : -minShift;\n\t      });\n\t\n\t      return this.evaluate();\n\t    }\n\t\n\t    // This is the top-level call for all formatting logic completed\n\t    // after `x` *and* `y` values have been computed for the notes\n\t    // in the voices.\n\t\n\t  }, {\n\t    key: 'postFormat',\n\t    value: function postFormat() {\n\t      var postFormatContexts = function postFormatContexts(contexts) {\n\t        return contexts.list.forEach(function (tick) {\n\t          return contexts.map[tick].postFormat();\n\t        });\n\t      };\n\t\n\t      postFormatContexts(this.modiferContexts);\n\t      postFormatContexts(this.tickContexts);\n\t\n\t      return this;\n\t    }\n\t\n\t    // Take all `voices` and create `ModifierContext`s out of them. This tells\n\t    // the formatters that the voices belong on a single stave.\n\t\n\t  }, {\n\t    key: 'joinVoices',\n\t    value: function joinVoices(voices) {\n\t      this.createModifierContexts(voices);\n\t      this.hasMinTotalWidth = false;\n\t      return this;\n\t    }\n\t\n\t    // Align rests in voices, justify the contexts, and position the notes\n\t    // so voices are aligned and ready to render onto the stave. This method\n\t    // mutates the `x` positions of all tickables in `voices`.\n\t    //\n\t    // Voices are full justified to fit in `justifyWidth` pixels.\n\t    //\n\t    // Set `options.context` to the rendering context. Set `options.align_rests`\n\t    // to true to enable rest alignment.\n\t\n\t  }, {\n\t    key: 'format',\n\t    value: function format(voices, justifyWidth, options) {\n\t      var opts = {\n\t        align_rests: false,\n\t        context: null,\n\t        stave: null\n\t      };\n\t\n\t      _vex.Vex.Merge(opts, options);\n\t      this.voices = voices;\n\t      this.alignRests(voices, opts.align_rests);\n\t      this.createTickContexts(voices);\n\t      this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n\t\n\t      // Only postFormat if a stave was supplied for y value formatting\n\t      if (opts.stave) this.postFormat();\n\t\n\t      return this;\n\t    }\n\t\n\t    // This method is just like `format` except that the `justifyWidth` is inferred\n\t    // from the `stave`.\n\t\n\t  }, {\n\t    key: 'formatToStave',\n\t    value: function formatToStave(voices, stave, options) {\n\t      var justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - 10;\n\t      L('Formatting voices to width: ', justifyWidth);\n\t      var opts = { context: stave.getContext() };\n\t      _vex.Vex.Merge(opts, options);\n\t      return this.format(voices, justifyWidth, opts);\n\t    }\n\t  }]);\n\n\t  return Formatter;\n\t}();\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Beam = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _fraction = __webpack_require__(3);\n\t\n\tvar _tuplet = __webpack_require__(16);\n\t\n\tvar _stem = __webpack_require__(17);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This file implements `Beams` that span over a set of `StemmableNotes`.\n\t\n\tfunction calculateStemDirection(notes) {\n\t  var lineSum = 0;\n\t  notes.forEach(function (note) {\n\t    if (note.keyProps) {\n\t      note.keyProps.forEach(function (keyProp) {\n\t        lineSum += keyProp.line - 3;\n\t      });\n\t    }\n\t  });\n\t\n\t  if (lineSum >= 0) {\n\t    return _stem.Stem.DOWN;\n\t  }\n\t  return _stem.Stem.UP;\n\t}\n\t\n\tvar getStemSlope = function getStemSlope(firstNote, lastNote) {\n\t  var firstStemTipY = firstNote.getStemExtents().topY;\n\t  var firstStemX = firstNote.getStemX();\n\t  var lastStemTipY = lastNote.getStemExtents().topY;\n\t  var lastStemX = lastNote.getStemX();\n\t  return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n\t};\n\t\n\tvar Beam = exports.Beam = function (_Element) {\n\t  _inherits(Beam, _Element);\n\t\n\t  _createClass(Beam, null, [{\n\t    key: 'getDefaultBeamGroups',\n\t\n\t    // Gets the default beam groups for a provided time signature.\n\t    // Attempts to guess if the time signature is not found in table.\n\t    // Currently this is fairly naive.\n\t    value: function getDefaultBeamGroups(time_sig) {\n\t      if (!time_sig || time_sig === 'c') {\n\t        time_sig = '4/4';\n\t      }\n\t\n\t      var defaults = {\n\t        '1/2': ['1/2'],\n\t        '2/2': ['1/2'],\n\t        '3/2': ['1/2'],\n\t        '4/2': ['1/2'],\n\t\n\t        '1/4': ['1/4'],\n\t        '2/4': ['1/4'],\n\t        '3/4': ['1/4'],\n\t        '4/4': ['1/4'],\n\t\n\t        '1/8': ['1/8'],\n\t        '2/8': ['2/8'],\n\t        '3/8': ['3/8'],\n\t        '4/8': ['2/8'],\n\t\n\t        '1/16': ['1/16'],\n\t        '2/16': ['2/16'],\n\t        '3/16': ['3/16'],\n\t        '4/16': ['2/16']\n\t      };\n\t\n\t      var groups = defaults[time_sig];\n\t\n\t      if (groups === undefined) {\n\t        // If no beam groups found, naively determine\n\t        // the beam groupings from the time signature\n\t        var beatTotal = parseInt(time_sig.split('/')[0], 10);\n\t        var beatValue = parseInt(time_sig.split('/')[1], 10);\n\t\n\t        var tripleMeter = beatTotal % 3 === 0;\n\t\n\t        if (tripleMeter) {\n\t          return [new _fraction.Fraction(3, beatValue)];\n\t        } else if (beatValue > 4) {\n\t          return [new _fraction.Fraction(2, beatValue)];\n\t        } else if (beatValue <= 4) {\n\t          return [new _fraction.Fraction(1, beatValue)];\n\t        }\n\t      } else {\n\t        return groups.map(function (group) {\n\t          return new _fraction.Fraction().parse(group);\n\t        });\n\t      }\n\t\n\t      return [new _fraction.Fraction(1, 4)];\n\t    }\n\t\n\t    // A helper function to automatically build basic beams for a voice. For more\n\t    // complex auto-beaming use `Beam.generateBeams()`.\n\t    //\n\t    // Parameters:\n\t    // * `voice` - The voice to generate the beams for\n\t    // * `stem_direction` - A stem direction to apply to the entire voice\n\t    // * `groups` - An array of `Fraction` representing beat groupings for the beam\n\t\n\t  }, {\n\t    key: 'applyAndGetBeams',\n\t    value: function applyAndGetBeams(voice, stem_direction, groups) {\n\t      return Beam.generateBeams(voice.getTickables(), {\n\t        groups: groups,\n\t        stem_direction: stem_direction\n\t      });\n\t    }\n\t\n\t    // A helper function to autimatically build beams for a voice with\n\t    // configuration options.\n\t    //\n\t    // Example configuration object:\n\t    //\n\t    // ```\n\t    // config = {\n\t    //   groups: [new Vex.Flow.Fraction(2, 8)],\n\t    //   stem_direction: -1,\n\t    //   beam_rests: true,\n\t    //   beam_middle_only: true,\n\t    //   show_stemlets: false\n\t    // };\n\t    // ```\n\t    //\n\t    // Parameters:\n\t    // * `notes` - An array of notes to create the beams for\n\t    // * `config` - The configuration object\n\t    //    * `groups` - Array of `Fractions` that represent the beat structure to beam the notes\n\t    //    * `stem_direction` - Set to apply the same direction to all notes\n\t    //    * `beam_rests` - Set to `true` to include rests in the beams\n\t    //    * `beam_middle_only` - Set to `true` to only beam rests in the middle of the beat\n\t    //    * `show_stemlets` - Set to `true` to draw stemlets for rests\n\t    //    * `maintain_stem_directions` - Set to `true` to not apply new stem directions\n\t    //\n\t\n\t  }, {\n\t    key: 'generateBeams',\n\t    value: function generateBeams(notes, config) {\n\t      if (!config) config = {};\n\t\n\t      if (!config.groups || !config.groups.length) {\n\t        config.groups = [new _fraction.Fraction(2, 8)];\n\t      }\n\t\n\t      // Convert beam groups to tick amounts\n\t      var tickGroups = config.groups.map(function (group) {\n\t        if (!group.multiply) {\n\t          throw new _vex.Vex.RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\n\t        }\n\t        return group.clone().multiply(_tables.Flow.RESOLUTION, 1);\n\t      });\n\t\n\t      var unprocessedNotes = notes;\n\t      var currentTickGroup = 0;\n\t      var noteGroups = [];\n\t      var currentGroup = [];\n\t\n\t      function getTotalTicks(vf_notes) {\n\t        return vf_notes.reduce(function (memo, note) {\n\t          return note.getTicks().clone().add(memo);\n\t        }, new _fraction.Fraction(0, 1));\n\t      }\n\t\n\t      function nextTickGroup() {\n\t        if (tickGroups.length - 1 > currentTickGroup) {\n\t          currentTickGroup += 1;\n\t        } else {\n\t          currentTickGroup = 0;\n\t        }\n\t      }\n\t\n\t      function createGroups() {\n\t        var nextGroup = [];\n\t\n\t        unprocessedNotes.forEach(function (unprocessedNote) {\n\t          nextGroup = [];\n\t          if (unprocessedNote.shouldIgnoreTicks()) {\n\t            noteGroups.push(currentGroup);\n\t            currentGroup = nextGroup;\n\t            return; // Ignore untickables (like bar notes)\n\t          }\n\t\n\t          currentGroup.push(unprocessedNote);\n\t          var ticksPerGroup = tickGroups[currentTickGroup].clone();\n\t          var totalTicks = getTotalTicks(currentGroup);\n\t\n\t          // Double the amount of ticks in a group, if it's an unbeamable tuplet\n\t          var unbeamable = _tables.Flow.durationToNumber(unprocessedNote.duration) < 8;\n\t          if (unbeamable && unprocessedNote.tuplet) {\n\t            ticksPerGroup.numerator *= 2;\n\t          }\n\t\n\t          // If the note that was just added overflows the group tick total\n\t          if (totalTicks.greaterThan(ticksPerGroup)) {\n\t            // If the overflow note can be beamed, start the next group\n\t            // with it. Unbeamable notes leave the group overflowed.\n\t            if (!unbeamable) {\n\t              nextGroup.push(currentGroup.pop());\n\t            }\n\t            noteGroups.push(currentGroup);\n\t            currentGroup = nextGroup;\n\t            nextTickGroup();\n\t          } else if (totalTicks.equals(ticksPerGroup)) {\n\t            noteGroups.push(currentGroup);\n\t            currentGroup = nextGroup;\n\t            nextTickGroup();\n\t          }\n\t        });\n\t\n\t        // Adds any remainder notes\n\t        if (currentGroup.length > 0) {\n\t          noteGroups.push(currentGroup);\n\t        }\n\t      }\n\t\n\t      function getBeamGroups() {\n\t        return noteGroups.filter(function (group) {\n\t          if (group.length > 1) {\n\t            var beamable = true;\n\t            group.forEach(function (note) {\n\t              if (note.getIntrinsicTicks() >= _tables.Flow.durationToTicks('4')) {\n\t                beamable = false;\n\t              }\n\t            });\n\t            return beamable;\n\t          }\n\t          return false;\n\t        });\n\t      }\n\t\n\t      // Splits up groups by Rest\n\t      function sanitizeGroups() {\n\t        var sanitizedGroups = [];\n\t        noteGroups.forEach(function (group) {\n\t          var tempGroup = [];\n\t          group.forEach(function (note, index, group) {\n\t            var isFirstOrLast = index === 0 || index === group.length - 1;\n\t            var prevNote = group[index - 1];\n\t\n\t            var breaksOnEachRest = !config.beam_rests && note.isRest();\n\t            var breaksOnFirstOrLastRest = config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;\n\t\n\t            var breakOnStemChange = false;\n\t            if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {\n\t              var prevDirection = prevNote.getStemDirection();\n\t              var currentDirection = note.getStemDirection();\n\t              breakOnStemChange = currentDirection !== prevDirection;\n\t            }\n\t\n\t            var isUnbeamableDuration = parseInt(note.duration, 10) < 8;\n\t\n\t            // Determine if the group should be broken at this note\n\t            var shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n\t\n\t            if (shouldBreak) {\n\t              // Add current group\n\t              if (tempGroup.length > 0) {\n\t                sanitizedGroups.push(tempGroup);\n\t              }\n\t\n\t              // Start a new group. Include the current note if the group\n\t              // was broken up by stem direction, as that note needs to start\n\t              // the next group of notes\n\t              tempGroup = breakOnStemChange ? [note] : [];\n\t            } else {\n\t              // Add note to group\n\t              tempGroup.push(note);\n\t            }\n\t          });\n\t\n\t          // If there is a remaining group, add it as well\n\t          if (tempGroup.length > 0) {\n\t            sanitizedGroups.push(tempGroup);\n\t          }\n\t        });\n\t\n\t        noteGroups = sanitizedGroups;\n\t      }\n\t\n\t      function formatStems() {\n\t        noteGroups.forEach(function (group) {\n\t          var stemDirection = void 0;\n\t          if (config.maintain_stem_directions) {\n\t            var note = findFirstNote(group);\n\t            stemDirection = note ? note.getStemDirection() : _stem.Stem.UP;\n\t          } else {\n\t            if (config.stem_direction) {\n\t              stemDirection = config.stem_direction;\n\t            } else {\n\t              stemDirection = calculateStemDirection(group);\n\t            }\n\t          }\n\t          applyStemDirection(group, stemDirection);\n\t        });\n\t      }\n\t\n\t      function findFirstNote(group) {\n\t        for (var i = 0; i < group.length; i++) {\n\t          var note = group[i];\n\t          if (!note.isRest()) {\n\t            return note;\n\t          }\n\t        }\n\t\n\t        return false;\n\t      }\n\t\n\t      function applyStemDirection(group, direction) {\n\t        group.forEach(function (note) {\n\t          note.setStemDirection(direction);\n\t        });\n\t      }\n\t\n\t      // Get all of the tuplets in all of the note groups\n\t      function getTuplets() {\n\t        var uniqueTuplets = [];\n\t\n\t        // Go through all of the note groups and inspect for tuplets\n\t        noteGroups.forEach(function (group) {\n\t          var tuplet = null;\n\t          group.forEach(function (note) {\n\t            if (note.tuplet && tuplet !== note.tuplet) {\n\t              tuplet = note.tuplet;\n\t              uniqueTuplets.push(tuplet);\n\t            }\n\t          });\n\t        });\n\t        return uniqueTuplets;\n\t      }\n\t\n\t      // Using closures to store the variables throughout the various functions\n\t      // IMO Keeps it this process lot cleaner - but not super consistent with\n\t      // the rest of the API's style - Silverwolf90 (Cyril)\n\t      createGroups();\n\t      sanitizeGroups();\n\t      formatStems();\n\t\n\t      // Get the notes to be beamed\n\t      var beamedNoteGroups = getBeamGroups();\n\t\n\t      // Get the tuplets in order to format them accurately\n\t      var allTuplets = getTuplets();\n\t\n\t      // Create a Vex.Flow.Beam from each group of notes to be beamed\n\t      var beams = [];\n\t      beamedNoteGroups.forEach(function (group) {\n\t        var beam = new Beam(group);\n\t\n\t        if (config.show_stemlets) {\n\t          beam.render_options.show_stemlets = true;\n\t        }\n\t        if (config.secondary_breaks) {\n\t          beam.render_options.secondary_break_ticks = _tables.Flow.durationToTicks(config.secondary_breaks);\n\t        }\n\t        if (config.flat_beams === true) {\n\t          beam.render_options.flat_beams = true;\n\t          beam.render_options.flat_beam_offset = config.flat_beam_offset;\n\t        }\n\t        beams.push(beam);\n\t      });\n\t\n\t      // Reformat tuplets\n\t      allTuplets.forEach(function (tuplet) {\n\t        // Set the tuplet location based on the stem direction\n\t        var direction = tuplet.notes[0].stem_direction === _stem.Stem.DOWN ? _tuplet.Tuplet.LOCATION_BOTTOM : _tuplet.Tuplet.LOCATION_TOP;\n\t        tuplet.setTupletLocation(direction);\n\t\n\t        // If any of the notes in the tuplet are not beamed, draw a bracket.\n\t        var bracketed = false;\n\t        for (var i = 0; i < tuplet.notes.length; i++) {\n\t          var note = tuplet.notes[i];\n\t          if (note.beam === null) {\n\t            bracketed = true;\n\t            break;\n\t          }\n\t        }\n\t        tuplet.setBracketed(bracketed);\n\t      });\n\t\n\t      return beams;\n\t    }\n\t  }]);\n\t\n\t  function Beam(notes, auto_stem) {\n\t    _classCallCheck(this, Beam);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Beam).call(this));\n\t\n\t    _this.setAttribute('type', 'Beam');\n\t\n\t    if (!notes || notes === []) {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'No notes provided for beam.');\n\t    }\n\t\n\t    if (notes.length === 1) {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'Too few notes for beam.');\n\t    }\n\t\n\t    // Validate beam line, direction and ticks.\n\t    _this.ticks = notes[0].getIntrinsicTicks();\n\t\n\t    if (_this.ticks >= _tables.Flow.durationToTicks('4')) {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n\t    }\n\t\n\t    var i = void 0; // shared iterator\n\t    var note = void 0;\n\t\n\t    _this.stem_direction = _stem.Stem.UP;\n\t\n\t    for (i = 0; i < notes.length; ++i) {\n\t      note = notes[i];\n\t      if (note.hasStem()) {\n\t        _this.stem_direction = note.getStemDirection();\n\t        break;\n\t      }\n\t    }\n\t\n\t    var stem_direction = _this.stem_direction;\n\t    // Figure out optimal stem direction based on given notes\n\t    if (auto_stem && notes[0].getCategory() === 'stavenotes') {\n\t      stem_direction = calculateStemDirection(notes);\n\t    } else if (auto_stem && notes[0].getCategory() === 'tabnotes') {\n\t      // Auto Stem TabNotes\n\t      var stem_weight = notes.reduce(function (memo, note) {\n\t        return memo + note.stem_direction;\n\t      }, 0);\n\t\n\t      stem_direction = stem_weight > -1 ? _stem.Stem.UP : _stem.Stem.DOWN;\n\t    }\n\t\n\t    // Apply stem directions and attach beam to notes\n\t    for (i = 0; i < notes.length; ++i) {\n\t      note = notes[i];\n\t      if (auto_stem) {\n\t        note.setStemDirection(stem_direction);\n\t        _this.stem_direction = stem_direction;\n\t      }\n\t      note.setBeam(_this);\n\t    }\n\t\n\t    _this.postFormatted = false;\n\t    _this.notes = notes;\n\t    _this.beam_count = _this.getBeamCount();\n\t    _this.break_on_indices = [];\n\t    _this.render_options = {\n\t      beam_width: 5,\n\t      max_slope: 0.25,\n\t      min_slope: -0.25,\n\t      slope_iterations: 20,\n\t      slope_cost: 100,\n\t      show_stemlets: false,\n\t      stemlet_extension: 7,\n\t      partial_beam_length: 10,\n\t      flat_beams: false,\n\t      min_flat_beam_offset: 15\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  // Get the notes in this beam\n\t\n\t\n\t  _createClass(Beam, [{\n\t    key: 'getNotes',\n\t    value: function getNotes() {\n\t      return this.notes;\n\t    }\n\t\n\t    // Get the max number of beams in the set of notes\n\t\n\t  }, {\n\t    key: 'getBeamCount',\n\t    value: function getBeamCount() {\n\t      var beamCounts = this.notes.map(function (note) {\n\t        return note.getGlyph().beam_count;\n\t      });\n\t\n\t      var maxBeamCount = beamCounts.reduce(function (max, beamCount) {\n\t        return beamCount > max ? beamCount : max;\n\t      });\n\t\n\t      return maxBeamCount;\n\t    }\n\t\n\t    // Set which note `indices` to break the secondary beam at\n\t\n\t  }, {\n\t    key: 'breakSecondaryAt',\n\t    value: function breakSecondaryAt(indices) {\n\t      this.break_on_indices = indices;\n\t      return this;\n\t    }\n\t\n\t    // Return the y coordinate for linear function\n\t\n\t  }, {\n\t    key: 'getSlopeY',\n\t    value: function getSlopeY(x, first_x_px, first_y_px, slope) {\n\t      return first_y_px + (x - first_x_px) * slope;\n\t    }\n\t\n\t    // Calculate the best possible slope for the provided notes\n\t\n\t  }, {\n\t    key: 'calculateSlope',\n\t    value: function calculateSlope() {\n\t      var notes = this.notes;\n\t      var stemDirection = this.stem_direction;\n\t      var _render_options = this.render_options;\n\t      var max_slope = _render_options.max_slope;\n\t      var min_slope = _render_options.min_slope;\n\t      var slope_iterations = _render_options.slope_iterations;\n\t      var slope_cost = _render_options.slope_cost;\n\t\n\t\n\t      var firstNote = notes[0];\n\t      var initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n\t      var increment = (max_slope - min_slope) / slope_iterations;\n\t      var minCost = Number.MAX_VALUE;\n\t      var bestSlope = 0;\n\t      var yShift = 0;\n\t\n\t      // iterate through slope values to find best weighted fit\n\t      for (var slope = min_slope; slope <= max_slope; slope += increment) {\n\t        var totalStemExtension = 0;\n\t        var yShiftTemp = 0;\n\t\n\t        // iterate through notes, calculating y shift and stem extension\n\t        for (var i = 1; i < notes.length; ++i) {\n\t          var note = notes[i];\n\t          var adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n\t\n\t          var stemTipY = note.getStemExtents().topY;\n\t          // beam needs to be shifted up to accommodate note\n\t          if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n\t            var diff = Math.abs(stemTipY - adjustedStemTipY);\n\t            yShiftTemp += diff * -stemDirection;\n\t            totalStemExtension += diff * i;\n\t          } else {\n\t            // beam overshoots note, account for the difference\n\t            totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n\t          }\n\t        }\n\t\n\t        // most engraving books suggest aiming for a slope about half the angle of the\n\t        // difference between the first and last notes' stem length;\n\t        var idealSlope = initialSlope / 2;\n\t        var distanceFromIdeal = Math.abs(idealSlope - slope);\n\t\n\t        // This tries to align most beams to something closer to the idealSlope, but\n\t        // doesn't go crazy. To disable, set this.render_options.slope_cost = 0\n\t        var cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);\n\t\n\t        // update state when a more ideal slope is found\n\t        if (cost < minCost) {\n\t          minCost = cost;\n\t          bestSlope = slope;\n\t          yShift = yShiftTemp;\n\t        }\n\t      }\n\t\n\t      this.slope = bestSlope;\n\t      this.y_shift = yShift;\n\t    }\n\t\n\t    // Calculate a slope and y-shift for flat beams\n\t\n\t  }, {\n\t    key: 'calculateFlatSlope',\n\t    value: function calculateFlatSlope() {\n\t      var notes = this.notes;\n\t      var stem_direction = this.stem_direction;\n\t      var _render_options2 = this.render_options;\n\t      var beam_width = _render_options2.beam_width;\n\t      var min_flat_beam_offset = _render_options2.min_flat_beam_offset;\n\t      var flat_beam_offset = _render_options2.flat_beam_offset;\n\t\n\t      // If a flat beam offset has not yet been supplied or calculated,\n\t      // generate one based on the notes in this particular note group\n\t\n\t      var total = 0;\n\t      var extremeY = 0; // Store the highest or lowest note here\n\t      var extremeBeamCount = 0; // The beam count of the extreme note\n\t      var currentExtreme = 0;\n\t      for (var i = 0; i < notes.length; i++) {\n\t        // Total up all of the offsets so we can average them out later\n\t        var note = notes[i];\n\t        var stemTipY = note.getStemExtents().topY;\n\t        total += stemTipY;\n\t\n\t        // Store the highest (stems-up) or lowest (stems-down) note so the\n\t        //  offset can be adjusted in case the average isn't enough\n\t        if (stem_direction === _stem.Stem.DOWN && currentExtreme < stemTipY) {\n\t          currentExtreme = stemTipY;\n\t          extremeY = Math.max.apply(Math, _toConsumableArray(note.getYs()));\n\t          extremeBeamCount = note.getBeamCount();\n\t        } else if (stem_direction === _stem.Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n\t          currentExtreme = stemTipY;\n\t          extremeY = Math.min.apply(Math, _toConsumableArray(note.getYs()));\n\t          extremeBeamCount = note.getBeamCount();\n\t        }\n\t      }\n\t\n\t      // Average the offsets to try and come up with a reasonable one that\n\t      //  works for all of the notes in the beam group.\n\t      var offset = total / notes.length;\n\t\n\t      // In case the average isn't long enough, add or subtract some more\n\t      //  based on the highest or lowest note (again, based on the stem\n\t      //  direction). This also takes into account the added height due to\n\t      //  the width of the beams.\n\t      var beamWidth = beam_width * 1.5;\n\t      var extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;\n\t      var newOffset = extremeY + extremeTest * -stem_direction;\n\t      if (stem_direction === _stem.Stem.DOWN && offset < newOffset) {\n\t        offset = extremeY + extremeTest;\n\t      } else if (stem_direction === _stem.Stem.UP && offset > newOffset) {\n\t        offset = extremeY - extremeTest;\n\t      }\n\t\n\t      if (!flat_beam_offset) {\n\t        // Set the offset for the group based on the calculations above.\n\t        this.render_options.flat_beam_offset = offset;\n\t      } else if (stem_direction === _stem.Stem.DOWN && offset > flat_beam_offset) {\n\t        this.render_options.flat_beam_offset = offset;\n\t      } else if (stem_direction === _stem.Stem.UP && offset < flat_beam_offset) {\n\t        this.render_options.flat_beam_offset = offset;\n\t      }\n\t\n\t      // for flat beams, the slope and y_shift are simply 0\n\t      this.slope = 0;\n\t      this.y_shift = 0;\n\t    }\n\t\n\t    // Create new stems for the notes in the beam, so that each stem\n\t    // extends into the beams.\n\t\n\t  }, {\n\t    key: 'applyStemExtensions',\n\t    value: function applyStemExtensions() {\n\t      var notes = this.notes;\n\t      var slope = this.slope;\n\t      var y_shift = this.y_shift;\n\t      var stem_direction = this.stem_direction;\n\t      var beam_count = this.beam_count;\n\t      var _render_options3 = this.render_options;\n\t      var show_stemlets = _render_options3.show_stemlets;\n\t      var flat_beam_offset = _render_options3.flat_beam_offset;\n\t      var flat_beams = _render_options3.flat_beams;\n\t      var stemlet_extension = _render_options3.stemlet_extension;\n\t      var beam_width = _render_options3.beam_width;\n\t\n\t\n\t      var firstNote = notes[0];\n\t      var firstStemTipY = firstNote.getStemExtents().topY;\n\t\n\t      // If rendering flat beams, and an offset exists, set the y-coordinat`e to\n\t      //  the offset so the stems all end at the beam offset.\n\t      if (flat_beams && flat_beam_offset) {\n\t        firstStemTipY = flat_beam_offset;\n\t      }\n\t      var firstStemX = firstNote.getStemX();\n\t\n\t      for (var i = 0; i < notes.length; ++i) {\n\t        var note = notes[i];\n\t        var stemX = note.getStemX();\n\t\n\t        var _note$getStemExtents = note.getStemExtents();\n\t\n\t        var stemTipY = _note$getStemExtents.topY;\n\t\n\t        var beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;\n\t        var preBeamExtension = note.getStem().getExtension();\n\t        var beamExtension = stem_direction === _stem.Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n\t\n\t        note.stem.setExtension(preBeamExtension + beamExtension);\n\t        note.stem.renderHeightAdjustment = -_stem.Stem.WIDTH / 2;\n\t\n\t        if (note.isRest() && show_stemlets) {\n\t          var beamWidth = beam_width;\n\t          var totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;\n\t          note.stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);\n\t        }\n\t      }\n\t    }\n\t\n\t    // Get the x coordinates for the beam lines of specific `duration`\n\t\n\t  }, {\n\t    key: 'getBeamLines',\n\t    value: function getBeamLines(duration) {\n\t      var beam_lines = [];\n\t      var beam_started = false;\n\t      var current_beam = null;\n\t      var partial_beam_length = this.render_options.partial_beam_length;\n\t      var previous_should_break = false;\n\t      var tick_tally = 0;\n\t      for (var i = 0; i < this.notes.length; ++i) {\n\t        var note = this.notes[i];\n\t\n\t        // See if we need to break secondary beams on this note.\n\t        var ticks = note.ticks.value();\n\t        tick_tally += ticks;\n\t        var should_break = false;\n\t\n\t        // 8th note beams are always drawn.\n\t        if (parseInt(duration, 10) >= 8) {\n\t          // First, check to see if any indices were set up through breakSecondaryAt()\n\t          should_break = this.break_on_indices.indexOf(i) !== -1;\n\t\n\t          // If the secondary breaks were auto-configured in the render options,\n\t          //  handle that as well.\n\t          if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {\n\t            tick_tally = 0;\n\t            should_break = true;\n\t          }\n\t        }\n\t        var note_gets_beam = note.getIntrinsicTicks() < _tables.Flow.durationToTicks(duration);\n\t\n\t        var stem_x = note.getStemX() - _stem.Stem.WIDTH / 2;\n\t\n\t        // Check to see if the next note in the group will get a beam at this\n\t        //  level. This will help to inform the partial beam logic below.\n\t        var next_note = this.notes[i + 1];\n\t        var beam_next = next_note && next_note.getIntrinsicTicks() < _tables.Flow.durationToTicks(duration);\n\t        if (note_gets_beam) {\n\t          // This note gets a beam at the current level\n\t          if (beam_started) {\n\t            // We're currently in the middle of a beam. Just continue it on to\n\t            //  the stem X of the current note.\n\t            current_beam = beam_lines[beam_lines.length - 1];\n\t            current_beam.end = stem_x;\n\t\n\t            // If a secondary beam break is set up, end the beam right now.\n\t            if (should_break) {\n\t              beam_started = false;\n\t              if (next_note && !beam_next && current_beam.end === null) {\n\t                // This note gets a beam,.but the next one does not. This means\n\t                //  we need a partial pointing right.\n\t                current_beam.end = current_beam.start - partial_beam_length;\n\t              }\n\t            }\n\t          } else {\n\t            // No beam started yet. Start a new one.\n\t            current_beam = { start: stem_x, end: null };\n\t            beam_started = true;\n\t            if (!beam_next) {\n\t              // The next note doesn't get a beam. Draw a partial.\n\t              if ((previous_should_break || i === 0) && next_note) {\n\t                // This is the first note (but not the last one), or it is\n\t                //  following a secondary break. Draw a partial to the right.\n\t                current_beam.end = current_beam.start + partial_beam_length;\n\t              } else {\n\t                // By default, draw a partial to the left.\n\t                current_beam.end = current_beam.start - partial_beam_length;\n\t              }\n\t            } else if (should_break) {\n\t              // This note should have a secondary break after it. Even though\n\t              //  we just started a beam, it needs to end immediately.\n\t              current_beam.end = current_beam.start - partial_beam_length;\n\t              beam_started = false;\n\t            }\n\t            beam_lines.push(current_beam);\n\t          }\n\t        } else {\n\t          // The current note does not get a beam.\n\t          beam_started = false;\n\t        }\n\t\n\t        // Store the secondary break flag to inform the partial beam logic in\n\t        //  the next iteration of the loop.\n\t        previous_should_break = should_break;\n\t      }\n\t\n\t      // Add a partial beam pointing left if this is the last note in the group\n\t      var last_beam = beam_lines[beam_lines.length - 1];\n\t      if (last_beam && last_beam.end === null) {\n\t        last_beam.end = last_beam.start - partial_beam_length;\n\t      }\n\t      return beam_lines;\n\t    }\n\t\n\t    // Render the stems for each notes\n\t\n\t  }, {\n\t    key: 'drawStems',\n\t    value: function drawStems() {\n\t      var _this2 = this;\n\t\n\t      this.notes.forEach(function (note) {\n\t        if (note.getStem()) {\n\t          note.getStem().setContext(_this2.context).draw();\n\t        }\n\t      }, this);\n\t    }\n\t\n\t    // Render the beam lines\n\t\n\t  }, {\n\t    key: 'drawBeamLines',\n\t    value: function drawBeamLines() {\n\t      this.checkContext();\n\t\n\t      var valid_beam_durations = ['4', '8', '16', '32', '64'];\n\t\n\t      var firstNote = this.notes[0];\n\t\n\t      var firstStemTipY = firstNote.getStemExtents().topY;\n\t      var beamY = firstStemTipY;\n\t\n\t      // For flat beams, set the first and last Y to the offset, rather than\n\t      //  using the note's stem extents.\n\t      if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n\t        beamY = this.render_options.flat_beam_offset;\n\t      }\n\t\n\t      var firstStemX = firstNote.getStemX();\n\t      var beamThickness = this.render_options.beam_width * this.stem_direction;\n\t\n\t      // Draw the beams.\n\t      for (var i = 0; i < valid_beam_durations.length; ++i) {\n\t        var duration = valid_beam_durations[i];\n\t        var beamLines = this.getBeamLines(duration);\n\t\n\t        for (var j = 0; j < beamLines.length; ++j) {\n\t          var beam_line = beamLines[j];\n\t          var startBeamX = beam_line.start;\n\t\n\t          var startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n\t          var lastBeamX = beam_line.end;\n\t          var lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n\t\n\t          this.context.beginPath();\n\t          this.context.moveTo(startBeamX, startBeamY);\n\t          this.context.lineTo(startBeamX, startBeamY + beamThickness);\n\t          this.context.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n\t          this.context.lineTo(lastBeamX + 1, lastBeamY);\n\t          this.context.closePath();\n\t          this.context.fill();\n\t        }\n\t\n\t        beamY += beamThickness * 1.5;\n\t      }\n\t    }\n\t\n\t    // Pre-format the beam\n\t\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      return this;\n\t    }\n\t\n\t    // Post-format the beam. This can only be called after\n\t    // the notes in the beam have both `x` and `y` values. ie: they've\n\t    // been formatted and have staves\n\t\n\t  }, {\n\t    key: 'postFormat',\n\t    value: function postFormat() {\n\t      if (this.postFormatted) return;\n\t\n\t      // Calculate a smart slope if we're not forcing the beams to be flat.\n\t      if (this.notes[0].getCategory() === 'tabnotes' || this.render_options.flat_beams) {\n\t        this.calculateFlatSlope();\n\t      } else {\n\t        this.calculateSlope();\n\t      }\n\t      this.applyStemExtensions();\n\t\n\t      this.postFormatted = true;\n\t    }\n\t\n\t    // Render the beam to the canvas context\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      this.setRendered();\n\t      if (this.unbeamable) return;\n\t\n\t      if (!this.postFormatted) {\n\t        this.postFormat();\n\t      }\n\t      this.drawStems();\n\t      this.drawBeamLines();\n\t    }\n\t  }]);\n\n\t  return Beam;\n\t}(_element.Element);\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Tuplet = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _formatter = __webpack_require__(14);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tvar _stem = __webpack_require__(17);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t\n\t/**\n\t * ## Description\n\t *\n\t * Create a new tuplet from the specified notes. The notes must\n\t * be part of the same voice. If they are of different rhythmic\n\t * values, then options.num_notes must be set.\n\t *\n\t * @constructor\n\t * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n\t *   notes, etc... any class that inherits stemmableNote at some\n\t *   point in its prototype chain.\n\t * @param options: object {\n\t *\n\t *   num_notes: fit this many notes into...\n\t *   notes_occupied: ...the space of this many notes\n\t *\n\t *       Together, these two properties make up the tuplet ratio\n\t *     in the form of num_notes : notes_occupied.\n\t *       num_notes defaults to the number of notes passed in, so\n\t *     it is important that if you omit this property, all of\n\t *     the notes passed should be of the same note value.\n\t *       notes_occupied defaults to 2 -- so you should almost\n\t *     certainly pass this parameter for anything other than\n\t *     a basic triplet.\n\t *\n\t *   location:\n\t *     default 1, which is above the notes: ┌─── 3 ───┐\n\t *      -1 is below the notes └─── 3 ───┘\n\t *\n\t *   bracketed: boolean, draw a bracket around the tuplet number\n\t *     when true: ┌─── 3 ───┐   when false: 3\n\t *     defaults to true if notes are not beamed, false otherwise\n\t *\n\t *   ratioed: boolean\n\t *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n\t *     defaults to true if the difference between num_notes and\n\t *     notes_occupied is greater than 1.\n\t *\n\t *   y_offset: int, default 0\n\t *     manually offset a tuplet, for instance to avoid collisions\n\t *     with articulations, etc...\n\t * }\n\t */\n\t\n\tvar Tuplet = exports.Tuplet = function (_Element) {\n\t  _inherits(Tuplet, _Element);\n\t\n\t  _createClass(Tuplet, null, [{\n\t    key: 'LOCATION_TOP',\n\t    get: function get() {\n\t      return 1;\n\t    }\n\t  }, {\n\t    key: 'LOCATION_BOTTOM',\n\t    get: function get() {\n\t      return -1;\n\t    }\n\t  }, {\n\t    key: 'NESTING_OFFSET',\n\t    get: function get() {\n\t      return 15;\n\t    }\n\t  }]);\n\t\n\t  function Tuplet(notes, options) {\n\t    _classCallCheck(this, Tuplet);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Tuplet).call(this));\n\t\n\t    _this.setAttribute('type', 'Tuplet');\n\t    if (!notes || !notes.length) {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'No notes provided for tuplet.');\n\t    }\n\t\n\t    if (notes.length === 1) {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'Too few notes for tuplet.');\n\t    }\n\t\n\t    _this.options = _vex.Vex.Merge({}, options);\n\t    _this.notes = notes;\n\t    _this.num_notes = 'num_notes' in _this.options ? _this.options.num_notes : notes.length;\n\t\n\t    // We accept beats_occupied, but warn that it's deprecated:\n\t    // the preferred property name is now notes_occupied.\n\t    if (_this.options.beats_occupied) {\n\t      _this.beatsOccupiedDeprecationWarning();\n\t    }\n\t    _this.notes_occupied = _this.options.notes_occupied || _this.options.beats_occupied || 2;\n\t    if ('bracketed' in _this.options) {\n\t      _this.bracketed = _this.options.bracketed;\n\t    } else {\n\t      _this.bracketed = notes.some(function (note) {\n\t        return note.beam === null;\n\t      });\n\t    }\n\t\n\t    _this.ratioed = 'ratioed' in _this.options ? _this.options.ratioed : Math.abs(_this.notes_occupied - _this.num_notes) > 1;\n\t    _this.point = 28;\n\t    _this.y_pos = 16;\n\t    _this.x_pos = 100;\n\t    _this.width = 200;\n\t    _this.location = _this.options.location || Tuplet.LOCATION_TOP;\n\t\n\t    _formatter.Formatter.AlignRestsToNotes(notes, true, true);\n\t    _this.resolveGlyphs();\n\t    _this.attach();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tuplet, [{\n\t    key: 'attach',\n\t    value: function attach() {\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        var note = this.notes[i];\n\t        note.setTuplet(this);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'detach',\n\t    value: function detach() {\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        var note = this.notes[i];\n\t        note.resetTuplet(this);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Set whether or not the bracket is drawn.\n\t     */\n\t\n\t  }, {\n\t    key: 'setBracketed',\n\t    value: function setBracketed(bracketed) {\n\t      this.bracketed = !!bracketed;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Set whether or not the ratio is shown.\n\t     */\n\t\n\t  }, {\n\t    key: 'setRatioed',\n\t    value: function setRatioed(ratioed) {\n\t      this.ratioed = !!ratioed;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Set the tuplet to be displayed either on the top or bottom of the stave\n\t     */\n\t\n\t  }, {\n\t    key: 'setTupletLocation',\n\t    value: function setTupletLocation(location) {\n\t      if (!location) {\n\t        location = Tuplet.LOCATION_TOP;\n\t      } else if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n\t        throw new _vex.Vex.RERR('BadArgument', 'Invalid tuplet location: ' + location);\n\t      }\n\t\n\t      this.location = location;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getNotes',\n\t    value: function getNotes() {\n\t      return this.notes;\n\t    }\n\t  }, {\n\t    key: 'getNoteCount',\n\t    value: function getNoteCount() {\n\t      return this.num_notes;\n\t    }\n\t  }, {\n\t    key: 'beatsOccupiedDeprecationWarning',\n\t    value: function beatsOccupiedDeprecationWarning() {\n\t      var msg = ['beats_occupied has been deprecated as an ', 'option for tuplets. Please use notes_occupied ', 'instead. Calls to getBeatsOccupied and ', 'setBeatsOccupied should now be routed to ', 'getNotesOccupied and setNotesOccupied instead'].join('');\n\t\n\t      if (console && console.warn) {\n\t        // eslint-disable-line no-console\n\t        console.warn(msg); // eslint-disable-line no-console\n\t      } else if (console) {\n\t        console.log(msg); // eslint-disable-line no-console\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getBeatsOccupied',\n\t    value: function getBeatsOccupied() {\n\t      this.beatsOccupiedDeprecationWarning();\n\t      return this.getNotesOccupied();\n\t    }\n\t  }, {\n\t    key: 'setBeatsOccupied',\n\t    value: function setBeatsOccupied(beats) {\n\t      this.beatsOccupiedDeprecationWarning();\n\t      return this.setNotesOccupied(beats);\n\t    }\n\t  }, {\n\t    key: 'getNotesOccupied',\n\t    value: function getNotesOccupied() {\n\t      return this.notes_occupied;\n\t    }\n\t  }, {\n\t    key: 'setNotesOccupied',\n\t    value: function setNotesOccupied(notes) {\n\t      this.detach();\n\t      this.notes_occupied = notes;\n\t      this.resolveGlyphs();\n\t      this.attach();\n\t    }\n\t  }, {\n\t    key: 'resolveGlyphs',\n\t    value: function resolveGlyphs() {\n\t      this.num_glyphs = [];\n\t      var n = this.num_notes;\n\t      while (n >= 1) {\n\t        this.num_glyphs.push(new _glyph.Glyph('v' + n % 10, this.point));\n\t        n = parseInt(n / 10, 10);\n\t      }\n\t\n\t      this.denom_glyphs = [];\n\t      n = this.notes_occupied;\n\t      while (n >= 1) {\n\t        this.denom_glyphs.push(new _glyph.Glyph('v' + n % 10, this.point));\n\t        n = parseInt(n / 10, 10);\n\t      }\n\t    }\n\t\n\t    // determine how many tuplets are nested within this tuplet\n\t    // on the same side (above/below), to calculate a y\n\t    // offset for this tuplet:\n\t\n\t  }, {\n\t    key: 'getNestedTupletCount',\n\t    value: function getNestedTupletCount() {\n\t      var location = this.location;\n\t      var first_note = this.notes[0];\n\t      var maxTupletCount = countTuplets(first_note, location);\n\t      var minTupletCount = countTuplets(first_note, location);\n\t\n\t      // Count the tuplets that are on the same side (above/below)\n\t      // as this tuplet:\n\t      function countTuplets(note, location) {\n\t        return note.tupletStack.filter(function (tuplet) {\n\t          return tuplet.location === location;\n\t        }).length;\n\t      }\n\t\n\t      this.notes.forEach(function (note) {\n\t        var tupletCount = countTuplets(note, location);\n\t        maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n\t        minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n\t      });\n\t\n\t      return maxTupletCount - minTupletCount;\n\t    }\n\t\n\t    // determine the y position of the tuplet:\n\t\n\t  }, {\n\t    key: 'getYPosition',\n\t    value: function getYPosition() {\n\t      // offset the tuplet for any nested tuplets between\n\t      // it and the notes:\n\t      var nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n\t\n\t      // offset the tuplet for any manual y_offset:\n\t      var y_offset = this.options.y_offset || 0;\n\t\n\t      // now iterate through the notes and find our highest\n\t      // or lowest locations, to form a base y_pos\n\t      var first_note = this.notes[0];\n\t      var y_pos = void 0;\n\t      if (this.location === Tuplet.LOCATION_TOP) {\n\t        y_pos = first_note.getStave().getYForLine(0) - 15;\n\t        // y_pos = first_note.getStemExtents().topY - 10;\n\t\n\t        for (var i = 0; i < this.notes.length; ++i) {\n\t          var top_y = this.notes[i].getStemDirection() === _stem.Stem.UP ? this.notes[i].getStemExtents().topY - 10 : this.notes[i].getStemExtents().baseY - 20;\n\t\n\t          if (top_y < y_pos) {\n\t            y_pos = top_y;\n\t          }\n\t        }\n\t      } else {\n\t        y_pos = first_note.getStave().getYForLine(4) + 20;\n\t\n\t        for (var _i = 0; _i < this.notes.length; ++_i) {\n\t          var bottom_y = this.notes[_i].getStemDirection() === _stem.Stem.UP ? this.notes[_i].getStemExtents().baseY + 20 : this.notes[_i].getStemExtents().topY + 10;\n\t          if (bottom_y > y_pos) {\n\t            y_pos = bottom_y;\n\t          }\n\t        }\n\t      }\n\t\n\t      return y_pos + nested_tuplet_y_offset + y_offset;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var _this2 = this;\n\t\n\t      this.checkContext();\n\t      this.setRendered();\n\t\n\t      // determine x value of left bound of tuplet\n\t      var first_note = this.notes[0];\n\t      var last_note = this.notes[this.notes.length - 1];\n\t\n\t      if (!this.bracketed) {\n\t        this.x_pos = first_note.getStemX();\n\t        this.width = last_note.getStemX() - this.x_pos;\n\t      } else {\n\t        this.x_pos = first_note.getTieLeftX() - 5;\n\t        this.width = last_note.getTieRightX() - this.x_pos + 5;\n\t      }\n\t\n\t      // determine y value for tuplet\n\t      this.y_pos = this.getYPosition();\n\t\n\t      var addGlyphWidth = function addGlyphWidth(width, glyph) {\n\t        return width + glyph.getMetrics().width;\n\t      };\n\t\n\t      // calculate total width of tuplet notation\n\t      var width = this.num_glyphs.reduce(addGlyphWidth, 0);\n\t      if (this.ratioed) {\n\t        width = this.denom_glyphs.reduce(addGlyphWidth, width);\n\t        width += this.point * 0.32;\n\t      }\n\t\n\t      var notation_center_x = this.x_pos + this.width / 2;\n\t      var notation_start_x = notation_center_x - width / 2;\n\t\n\t      // draw bracket if the tuplet is not beamed\n\t      if (this.bracketed) {\n\t        var line_width = this.width / 2 - width / 2 - 5;\n\t\n\t        // only draw the bracket if it has positive length\n\t        if (line_width > 0) {\n\t          this.context.fillRect(this.x_pos, this.y_pos, line_width, 1);\n\t          this.context.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);\n\t          this.context.fillRect(this.x_pos, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM), 1, this.location * 10);\n\t          this.context.fillRect(this.x_pos + this.width, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM), 1, this.location * 10);\n\t        }\n\t      }\n\t\n\t      // draw numerator glyphs\n\t      var x_offset = 0;\n\t      this.num_glyphs.forEach(function (glyph) {\n\t        glyph.render(_this2.context, notation_start_x + x_offset, _this2.y_pos + _this2.point / 3 - 2);\n\t        x_offset += glyph.getMetrics().width;\n\t      });\n\t\n\t      // display colon and denominator if the ratio is to be shown\n\t      if (this.ratioed) {\n\t        var colon_x = notation_start_x + x_offset + this.point * 0.16;\n\t        var colon_radius = this.point * 0.06;\n\t        this.context.beginPath();\n\t        this.context.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);\n\t        this.context.closePath();\n\t        this.context.fill();\n\t        this.context.beginPath();\n\t        this.context.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);\n\t        this.context.closePath();\n\t        this.context.fill();\n\t        x_offset += this.point * 0.32;\n\t        this.denom_glyphs.forEach(function (glyph) {\n\t          glyph.render(_this2.context, notation_start_x + x_offset, _this2.y_pos + _this2.point / 3 - 2);\n\t          x_offset += glyph.getMetrics().width;\n\t        });\n\t      }\n\t    }\n\t  }]);\n\n\t  return Tuplet;\n\t}(_element.Element);\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Stem = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// This file implements the `Stem` object. Generally this object is handled\n\t// by its parent `StemmableNote`.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (Stem.DEBUG) _vex.Vex.L('Vex.Flow.Stem', args);\n\t}\n\t\n\tvar Stem = exports.Stem = function (_Element) {\n\t  _inherits(Stem, _Element);\n\t\n\t  _createClass(Stem, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'stem';\n\t    }\n\t\n\t    // Stem directions\n\t\n\t  }, {\n\t    key: 'UP',\n\t    get: function get() {\n\t      return 1;\n\t    }\n\t  }, {\n\t    key: 'DOWN',\n\t    get: function get() {\n\t      return -1;\n\t    }\n\t\n\t    // Theme\n\t\n\t  }, {\n\t    key: 'WIDTH',\n\t    get: function get() {\n\t      return _tables.Flow.STEM_WIDTH;\n\t    }\n\t  }, {\n\t    key: 'HEIGHT',\n\t    get: function get() {\n\t      return _tables.Flow.STEM_HEIGHT;\n\t    }\n\t  }]);\n\t\n\t  function Stem() {\n\t    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    _classCallCheck(this, Stem);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Stem).call(this));\n\t\n\t    _this.setAttribute('type', 'Stem');\n\t\n\t    // Default notehead x bounds\n\t    _this.x_begin = options.x_begin || 0;\n\t    _this.x_end = options.x_end || 0;\n\t\n\t    // Y bounds for top/bottom most notehead\n\t    _this.y_top = options.y_top || 0;\n\t    _this.y_bottom = options.y_bottom || 0;\n\t\n\t    // Stem top extension\n\t    _this.stem_extension = options.stem_extension || 0;\n\t\n\t    // Direction of the stem\n\t    _this.stem_direction = options.stem_direction || 0;\n\t\n\t    // Flag to override all draw calls\n\t    _this.hide = options.hide || false;\n\t\n\t    _this.isStemlet = options.isStemlet || false;\n\t    _this.stemletHeight = options.stemletHeight || 0;\n\t\n\t    // Use to adjust the rendered height without affecting\n\t    // the results of `.getExtents()`\n\t    _this.renderHeightAdjustment = 0;\n\t    return _this;\n\t  }\n\t\n\t  // Set the x bounds for the default notehead\n\t\n\t\n\t  _createClass(Stem, [{\n\t    key: 'setNoteHeadXBounds',\n\t    value: function setNoteHeadXBounds(x_begin, x_end) {\n\t      this.x_begin = x_begin;\n\t      this.x_end = x_end;\n\t      return this;\n\t    }\n\t\n\t    // Set the direction of the stem in relation to the noteheads\n\t\n\t  }, {\n\t    key: 'setDirection',\n\t    value: function setDirection(direction) {\n\t      this.stem_direction = direction;\n\t    }\n\t\n\t    // Set the extension for the stem, generally for flags or beams\n\t\n\t  }, {\n\t    key: 'setExtension',\n\t    value: function setExtension(ext) {\n\t      this.stem_extension = ext;\n\t    }\n\t  }, {\n\t    key: 'getExtension',\n\t    value: function getExtension() {\n\t      return this.stem_extension;\n\t    }\n\t\n\t    // The the y bounds for the top and bottom noteheads\n\t\n\t  }, {\n\t    key: 'setYBounds',\n\t    value: function setYBounds(y_top, y_bottom) {\n\t      this.y_top = y_top;\n\t      this.y_bottom = y_bottom;\n\t    }\n\t\n\t    // The category of the object\n\t\n\t  }, {\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Stem.CATEGORY;\n\t    }\n\t\n\t    // Gets the entire height for the stem\n\t\n\t  }, {\n\t    key: 'getHeight',\n\t    value: function getHeight() {\n\t      return (this.y_bottom - this.y_top) * this.stem_direction + (Stem.HEIGHT + this.stem_extension) * this.stem_direction;\n\t    }\n\t  }, {\n\t    key: 'getBoundingBox',\n\t    value: function getBoundingBox() {\n\t      throw new _vex.Vex.RERR('NotImplemented', 'getBoundingBox() not implemented.');\n\t    }\n\t\n\t    // Get the y coordinates for the very base of the stem to the top of\n\t    // the extension\n\t\n\t  }, {\n\t    key: 'getExtents',\n\t    value: function getExtents() {\n\t      var isStemUp = this.stem_direction === Stem.UP;\n\t      var ys = [this.y_top, this.y_bottom];\n\t      var stemHeight = Stem.HEIGHT + this.stem_extension;\n\t      var innerMostNoteheadY = (isStemUp ? Math.min : Math.max).apply(undefined, ys);\n\t      var outerMostNoteheadY = (isStemUp ? Math.max : Math.min).apply(undefined, ys);\n\t      var stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;\n\t\n\t      return { topY: stemTipY, baseY: outerMostNoteheadY };\n\t    }\n\t\n\t    // set the draw style of a stem:\n\t\n\t  }, {\n\t    key: 'setStyle',\n\t    value: function setStyle(style) {\n\t      this.style = style;return this;\n\t    }\n\t  }, {\n\t    key: 'getStyle',\n\t    value: function getStyle() {\n\t      return this.style;\n\t    }\n\t  }, {\n\t    key: 'setVisibility',\n\t    value: function setVisibility(isVisible) {\n\t      this.hide = !isVisible;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setStemlet',\n\t    value: function setStemlet(isStemlet, stemletHeight) {\n\t      this.isStemlet = isStemlet;\n\t      this.stemletHeight = stemletHeight;\n\t      return this;\n\t    }\n\t\n\t    // Apply current style to Canvas `context`\n\t\n\t  }, {\n\t    key: 'applyStyle',\n\t    value: function applyStyle(context) {\n\t      var style = this.getStyle();\n\t      if (style) {\n\t        if (style.shadowColor) context.setShadowColor(style.shadowColor);\n\t        if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n\t        if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n\t      }\n\t      return this;\n\t    }\n\t\n\t    // Render the stem onto the canvas\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.setRendered();\n\t      if (this.hide) return;\n\t      var ctx = this.checkContext();\n\t\n\t      var stem_x = void 0;\n\t      var stem_y = void 0;\n\t      var stem_direction = this.stem_direction;\n\t\n\t      if (stem_direction === Stem.DOWN) {\n\t        // Down stems are rendered to the left of the head.\n\t        stem_x = this.x_begin;\n\t        stem_y = this.y_top;\n\t      } else {\n\t        // Up stems are rendered to the right of the head.\n\t        stem_x = this.x_end;\n\t        stem_y = this.y_bottom;\n\t      }\n\t\n\t      var stemHeight = this.getHeight();\n\t\n\t      L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\n\t\n\t      // The offset from the stem's base which is required fo satisfy the stemlet height\n\t      var stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;\n\t\n\t      // Draw the stem\n\t      ctx.save();\n\t      this.applyStyle(ctx);\n\t      ctx.beginPath();\n\t      ctx.setLineWidth(Stem.WIDTH);\n\t      ctx.moveTo(stem_x, stem_y - stemletYOffset);\n\t      ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);\n\t      ctx.stroke();\n\t      ctx.restore();\n\t    }\n\t  }]);\n\n\t  return Stem;\n\t}(_element.Element);\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Voice = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _fraction = __webpack_require__(3);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This file implements the main Voice class. It's mainly a container\n\t// object to group `Tickables` for formatting.\n\t\n\tvar Voice = exports.Voice = function (_Element) {\n\t  _inherits(Voice, _Element);\n\t\n\t  _createClass(Voice, null, [{\n\t    key: 'Mode',\n\t\n\t    // Modes allow the addition of ticks in three different ways:\n\t    //\n\t    // STRICT: This is the default. Ticks must fill the voice.\n\t    // SOFT:   Ticks can be added without restrictions.\n\t    // FULL:   Ticks do not need to fill the voice, but can't exceed the maximum\n\t    //         tick length.\n\t    get: function get() {\n\t      return {\n\t        STRICT: 1,\n\t        SOFT: 2,\n\t        FULL: 3\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function Voice(time) {\n\t    _classCallCheck(this, Voice);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Voice).call(this));\n\t\n\t    _this.setAttribute('type', 'Voice');\n\t\n\t    // Time signature shortcut: \"4/4\", \"3/8\", etc.\n\t    if (typeof time === 'string') {\n\t      var match = time.match(/(\\d+)\\/(\\d+)/);\n\t      if (match) {\n\t        time = {\n\t          num_beats: match[1],\n\t          beat_value: match[2],\n\t          resolution: _tables.Flow.RESOLUTION\n\t        };\n\t      }\n\t    }\n\t\n\t    // Default time sig is 4/4\n\t    _this.time = _vex.Vex.Merge({\n\t      num_beats: 4,\n\t      beat_value: 4,\n\t      resolution: _tables.Flow.RESOLUTION\n\t    }, time);\n\t\n\t    // Recalculate total ticks.\n\t    _this.totalTicks = new _fraction.Fraction(_this.time.num_beats * (_this.time.resolution / _this.time.beat_value), 1);\n\t\n\t    _this.resolutionMultiplier = 1;\n\t\n\t    // Set defaults\n\t    _this.tickables = [];\n\t    _this.ticksUsed = new _fraction.Fraction(0, 1);\n\t    _this.smallestTickCount = _this.totalTicks.clone();\n\t    _this.largestTickWidth = 0;\n\t    _this.stave = null;\n\t    // Do we care about strictly timed notes\n\t    _this.mode = Voice.Mode.STRICT;\n\t\n\t    // This must belong to a VoiceGroup\n\t    _this.voiceGroup = null;\n\t    return _this;\n\t  }\n\t\n\t  // Get the total ticks in the voice\n\t\n\t\n\t  _createClass(Voice, [{\n\t    key: 'getTotalTicks',\n\t    value: function getTotalTicks() {\n\t      return this.totalTicks;\n\t    }\n\t\n\t    // Get the total ticks used in the voice by all the tickables\n\t\n\t  }, {\n\t    key: 'getTicksUsed',\n\t    value: function getTicksUsed() {\n\t      return this.ticksUsed;\n\t    }\n\t\n\t    // Get the largest width of all the tickables\n\t\n\t  }, {\n\t    key: 'getLargestTickWidth',\n\t    value: function getLargestTickWidth() {\n\t      return this.largestTickWidth;\n\t    }\n\t\n\t    // Get the tick count for the shortest tickable\n\t\n\t  }, {\n\t    key: 'getSmallestTickCount',\n\t    value: function getSmallestTickCount() {\n\t      return this.smallestTickCount;\n\t    }\n\t\n\t    // Get the tickables in the voice\n\t\n\t  }, {\n\t    key: 'getTickables',\n\t    value: function getTickables() {\n\t      return this.tickables;\n\t    }\n\t\n\t    // Get/set the voice mode, use a value from `Voice.Mode`\n\t\n\t  }, {\n\t    key: 'getMode',\n\t    value: function getMode() {\n\t      return this.mode;\n\t    }\n\t  }, {\n\t    key: 'setMode',\n\t    value: function setMode(mode) {\n\t      this.mode = mode;return this;\n\t    }\n\t\n\t    // Get the resolution multiplier for the voice\n\t\n\t  }, {\n\t    key: 'getResolutionMultiplier',\n\t    value: function getResolutionMultiplier() {\n\t      return this.resolutionMultiplier;\n\t    }\n\t\n\t    // Get the actual tick resolution for the voice\n\t\n\t  }, {\n\t    key: 'getActualResolution',\n\t    value: function getActualResolution() {\n\t      return this.resolutionMultiplier * this.time.resolution;\n\t    }\n\t\n\t    // Set the voice's stave\n\t\n\t  }, {\n\t    key: 'setStave',\n\t    value: function setStave(stave) {\n\t      this.stave = stave;\n\t      this.boundingBox = null; // Reset bounding box so we can reformat\n\t      return this;\n\t    }\n\t\n\t    // Get the bounding box for the voice\n\t\n\t  }, {\n\t    key: 'getBoundingBox',\n\t    value: function getBoundingBox() {\n\t      var stave = void 0;\n\t      var boundingBox = void 0;\n\t      var bb = void 0;\n\t      var i = void 0;\n\t\n\t      if (!this.boundingBox) {\n\t        if (!this.stave) throw new _vex.Vex.RERR('NoStave', \"Can't get bounding box without stave.\");\n\t        stave = this.stave;\n\t        boundingBox = null;\n\t\n\t        for (i = 0; i < this.tickables.length; ++i) {\n\t          this.tickables[i].setStave(stave);\n\t\n\t          bb = this.tickables[i].getBoundingBox();\n\t          if (!bb) continue;\n\t\n\t          boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n\t        }\n\t\n\t        this.boundingBox = boundingBox;\n\t      }\n\t      return this.boundingBox;\n\t    }\n\t\n\t    // Every tickable must be associated with a voiceGroup. This allows formatters\n\t    // and preformatters to associate them with the right modifierContexts.\n\t\n\t  }, {\n\t    key: 'getVoiceGroup',\n\t    value: function getVoiceGroup() {\n\t      if (!this.voiceGroup) {\n\t        throw new _vex.Vex.RERR('NoVoiceGroup', 'No voice group for voice.');\n\t      }\n\t\n\t      return this.voiceGroup;\n\t    }\n\t\n\t    // Set the voice group\n\t\n\t  }, {\n\t    key: 'setVoiceGroup',\n\t    value: function setVoiceGroup(g) {\n\t      this.voiceGroup = g;return this;\n\t    }\n\t\n\t    // Set the voice mode to strict or soft\n\t\n\t  }, {\n\t    key: 'setStrict',\n\t    value: function setStrict(strict) {\n\t      this.mode = strict ? Voice.Mode.STRICT : Voice.Mode.SOFT;\n\t      return this;\n\t    }\n\t\n\t    // Determine if the voice is complete according to the voice mode\n\t\n\t  }, {\n\t    key: 'isComplete',\n\t    value: function isComplete() {\n\t      if (this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) {\n\t        return this.ticksUsed.equals(this.totalTicks);\n\t      } else {\n\t        return true;\n\t      }\n\t    }\n\t\n\t    // Add a tickable to the voice\n\t\n\t  }, {\n\t    key: 'addTickable',\n\t    value: function addTickable(tickable) {\n\t      if (!tickable.shouldIgnoreTicks()) {\n\t        var ticks = tickable.getTicks();\n\t\n\t        // Update the total ticks for this line.\n\t        this.ticksUsed.add(ticks);\n\t\n\t        if ((this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) && this.ticksUsed.greaterThan(this.totalTicks)) {\n\t          this.totalTicks.subtract(ticks);\n\t          throw new _vex.Vex.RERR('BadArgument', 'Too many ticks.');\n\t        }\n\t\n\t        // Track the smallest tickable for formatting.\n\t        if (ticks.lessThan(this.smallestTickCount)) {\n\t          this.smallestTickCount = ticks.clone();\n\t        }\n\t\n\t        this.resolutionMultiplier = this.ticksUsed.denominator;\n\t\n\t        // Expand total ticks using denominator from ticks used.\n\t        this.totalTicks.add(0, this.ticksUsed.denominator);\n\t      }\n\t\n\t      // Add the tickable to the line.\n\t      this.tickables.push(tickable);\n\t      tickable.setVoice(this);\n\t      return this;\n\t    }\n\t\n\t    // Add an array of tickables to the voice.\n\t\n\t  }, {\n\t    key: 'addTickables',\n\t    value: function addTickables(tickables) {\n\t      for (var i = 0; i < tickables.length; ++i) {\n\t        this.addTickable(tickables[i]);\n\t      }\n\t\n\t      return this;\n\t    }\n\t\n\t    // Preformats the voice by applying the voice's stave to each note.\n\t\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      var _this2 = this;\n\t\n\t      if (this.preFormatted) return this;\n\t\n\t      this.tickables.forEach(function (tickable) {\n\t        if (!tickable.getStave()) {\n\t          tickable.setStave(_this2.stave);\n\t        }\n\t      });\n\t\n\t      this.preFormatted = true;\n\t      return this;\n\t    }\n\t\n\t    // Render the voice onto the canvas `context` and an optional `stave`.\n\t    // If `stave` is omitted, it is expected that the notes have staves\n\t    // already set.\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var context = arguments.length <= 0 || arguments[0] === undefined ? this.context : arguments[0];\n\t      var stave = arguments.length <= 1 || arguments[1] === undefined ? this.stave : arguments[1];\n\t\n\t      this.setRendered();\n\t      var boundingBox = null;\n\t      for (var i = 0; i < this.tickables.length; ++i) {\n\t        var tickable = this.tickables[i];\n\t\n\t        // Set the stave if provided\n\t        if (stave) tickable.setStave(stave);\n\t\n\t        if (!tickable.getStave()) {\n\t          throw new _vex.Vex.RuntimeError('MissingStave', 'The voice cannot draw tickables without staves.');\n\t        }\n\t\n\t        if (i === 0) boundingBox = tickable.getBoundingBox();\n\t\n\t        if (i > 0 && boundingBox) {\n\t          var tickable_bb = tickable.getBoundingBox();\n\t          if (tickable_bb) boundingBox.mergeWith(tickable_bb);\n\t        }\n\t\n\t        tickable.setContext(context);\n\t        tickable.draw();\n\t      }\n\t\n\t      this.boundingBox = boundingBox;\n\t    }\n\t  }]);\n\n\t  return Voice;\n\t}(_element.Element);\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.StaveConnector = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t\n\tfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n\t  if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n\t    throw new _vex.Vex.RERR('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n\t  }\n\t\n\t  var x_shift = 3;\n\t  var variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n\t  var thickLineOffset = 2; // For aesthetics\n\t\n\t  if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n\t    x_shift = -5; // Flips the side of the thin line\n\t    variableWidth = 3;\n\t  }\n\t\n\t  // Thin line\n\t  ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n\t  // Thick line\n\t  ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n\t}\n\t\n\tvar StaveConnector = exports.StaveConnector = function (_Element) {\n\t  _inherits(StaveConnector, _Element);\n\t\n\t  _createClass(StaveConnector, null, [{\n\t    key: 'type',\n\t\n\t    // SINGLE_LEFT and SINGLE are the same value for compatibility\n\t    // with older versions of vexflow which didn't have right sided\n\t    // stave connectors\n\t    get: function get() {\n\t      return {\n\t        SINGLE_RIGHT: 0,\n\t        SINGLE_LEFT: 1,\n\t        SINGLE: 1,\n\t        DOUBLE: 2,\n\t        BRACE: 3,\n\t        BRACKET: 4,\n\t        BOLD_DOUBLE_LEFT: 5,\n\t        BOLD_DOUBLE_RIGHT: 6,\n\t        THIN_DOUBLE: 7,\n\t        NONE: 8\n\t      };\n\t    }\n\t  }, {\n\t    key: 'typeString',\n\t    get: function get() {\n\t      return {\n\t        singleRight: StaveConnector.type.SINGLE_RIGHT,\n\t        singleLeft: StaveConnector.type.SINGLE_LEFT,\n\t        single: StaveConnector.type.SINGLE,\n\t        double: StaveConnector.type.DOUBLE,\n\t        brace: StaveConnector.type.BRACE,\n\t        bracket: StaveConnector.type.BRACKET,\n\t        boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n\t        boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n\t        thinDouble: StaveConnector.type.THIN_DOUBLE,\n\t        none: StaveConnector.type.NONE\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function StaveConnector(top_stave, bottom_stave) {\n\t    _classCallCheck(this, StaveConnector);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveConnector).call(this));\n\t\n\t    _this.setAttribute('type', 'StaveConnector');\n\t\n\t    _this.thickness = _tables.Flow.STAVE_LINE_THICKNESS;\n\t    _this.width = 3;\n\t    _this.top_stave = top_stave;\n\t    _this.bottom_stave = bottom_stave;\n\t    _this.type = StaveConnector.type.DOUBLE;\n\t    _this.font = {\n\t      family: 'times',\n\t      size: 16,\n\t      weight: 'normal'\n\t    };\n\t    // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n\t    // 2. Offset BRACE type not to overlap with another StaveConnector\n\t    _this.x_shift = 0;\n\t    _this.texts = [];\n\t    return _this;\n\t  }\n\t\n\t  _createClass(StaveConnector, [{\n\t    key: 'setType',\n\t    value: function setType(type) {\n\t      type = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n\t\n\t      if (type >= StaveConnector.type.SINGLE_RIGHT && type <= StaveConnector.type.NONE) {\n\t        this.type = type;\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setText',\n\t    value: function setText(text, options) {\n\t      this.texts.push({\n\t        content: text,\n\t        options: _vex.Vex.Merge({ shift_x: 0, shift_y: 0 }, options)\n\t      });\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setFont',\n\t    value: function setFont(font) {\n\t      _vex.Vex.Merge(this.font, font);\n\t    }\n\t  }, {\n\t    key: 'setXShift',\n\t    value: function setXShift(x_shift) {\n\t      if (typeof x_shift !== 'number') {\n\t        throw _vex.Vex.RERR('InvalidType', 'x_shift must be a Number');\n\t      }\n\t\n\t      this.x_shift = x_shift;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var ctx = this.checkContext();\n\t      this.setRendered();\n\t\n\t      var topY = this.top_stave.getYForLine(0);\n\t      var botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;\n\t      var width = this.width;\n\t      var topX = this.top_stave.getX();\n\t\n\t      var isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT || this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT || this.type === StaveConnector.type.THIN_DOUBLE;\n\t\n\t      if (isRightSidedConnector) {\n\t        topX = this.top_stave.getX() + this.top_stave.width;\n\t      }\n\t\n\t      var attachment_height = botY - topY;\n\t      switch (this.type) {\n\t        case StaveConnector.type.SINGLE:\n\t          width = 1;\n\t          break;\n\t        case StaveConnector.type.SINGLE_LEFT:\n\t          width = 1;\n\t          break;\n\t        case StaveConnector.type.SINGLE_RIGHT:\n\t          width = 1;\n\t          break;\n\t        case StaveConnector.type.DOUBLE:\n\t          topX -= this.width + 2;\n\t          break;\n\t        case StaveConnector.type.BRACE:\n\t          {\n\t            width = 12;\n\t            // May need additional code to draw brace\n\t            var x1 = this.top_stave.getX() - 2 + this.x_shift;\n\t            var y1 = topY;\n\t            var x3 = x1;\n\t            var y3 = botY;\n\t            var x2 = x1 - width;\n\t            var y2 = y1 + attachment_height / 2.0;\n\t            var cpx1 = x2 - 0.90 * width;\n\t            var cpy1 = y1 + 0.2 * attachment_height;\n\t            var cpx2 = x1 + 1.10 * width;\n\t            var cpy2 = y2 - 0.135 * attachment_height;\n\t            var cpx3 = cpx2;\n\t            var cpy3 = y2 + 0.135 * attachment_height;\n\t            var cpx4 = cpx1;\n\t            var cpy4 = y3 - 0.2 * attachment_height;\n\t            var cpx5 = x2 - width;\n\t            var cpy5 = cpy4;\n\t            var cpx6 = x1 + 0.40 * width;\n\t            var cpy6 = y2 + 0.135 * attachment_height;\n\t            var cpx7 = cpx6;\n\t            var cpy7 = y2 - 0.135 * attachment_height;\n\t            var cpx8 = cpx5;\n\t            var cpy8 = cpy1;\n\t            ctx.beginPath();\n\t            ctx.moveTo(x1, y1);\n\t            ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n\t            ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n\t            ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n\t            ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n\t            ctx.fill();\n\t            ctx.stroke();\n\t            break;\n\t          }case StaveConnector.type.BRACKET:\n\t          topY -= 4;\n\t          botY += 4;\n\t          attachment_height = botY - topY;\n\t          _glyph.Glyph.renderGlyph(ctx, topX - 5, topY - 3, 40, 'v1b', true);\n\t          _glyph.Glyph.renderGlyph(ctx, topX - 5, botY + 3, 40, 'v10', true);\n\t          topX -= this.width + 2;\n\t          break;\n\t        case StaveConnector.type.BOLD_DOUBLE_LEFT:\n\t          drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY);\n\t          break;\n\t        case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n\t          drawBoldDoubleLine(ctx, this.type, topX, topY, botY);\n\t          break;\n\t        case StaveConnector.type.THIN_DOUBLE:\n\t          width = 1;\n\t          break;\n\t        case StaveConnector.type.NONE:\n\t          break;\n\t        default:\n\t          throw new _vex.Vex.RERR('InvalidType', 'The provided StaveConnector.type (' + this.type + ') is invalid');\n\t      }\n\t\n\t      if (this.type !== StaveConnector.type.BRACE && this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT && this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT && this.type !== StaveConnector.type.NONE) {\n\t        ctx.fillRect(topX, topY, width, attachment_height);\n\t      }\n\t\n\t      // If the connector is a thin double barline, draw the paralell line\n\t      if (this.type === StaveConnector.type.THIN_DOUBLE) {\n\t        ctx.fillRect(topX - 3, topY, width, attachment_height);\n\t      }\n\t\n\t      ctx.save();\n\t      ctx.lineWidth = 2;\n\t      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\t      // Add stave connector text\n\t      for (var i = 0; i < this.texts.length; i++) {\n\t        var text = this.texts[i];\n\t        var text_width = ctx.measureText('' + text.content).width;\n\t        var x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n\t        var y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;\n\t\n\t        ctx.fillText('' + text.content, x, y + 4);\n\t      }\n\t      ctx.restore();\n\t    }\n\t  }]);\n\n\t  return StaveConnector;\n\t}(_element.Element);\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.StaveNote = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _boundingbox = __webpack_require__(8);\n\t\n\tvar _stem = __webpack_require__(17);\n\t\n\tvar _notehead = __webpack_require__(21);\n\t\n\tvar _stemmablenote = __webpack_require__(24);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _dot = __webpack_require__(26);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// This file implements notes for standard notation. This consists of one or\n\t// more `NoteHeads`, an optional stem, and an optional flag.\n\t//\n\t// *Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n\t// and a \"key\" refers to a specific pitch/notehead within a note.*\n\t//\n\t// See `tests/stavenote_tests.js` for usage examples.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (StaveNote.DEBUG) _vex.Vex.L('Vex.Flow.StaveNote', args);\n\t}\n\t\n\tvar getStemAdjustment = function getStemAdjustment(note) {\n\t  return _stem.Stem.WIDTH / (2 * -note.getStemDirection());\n\t};\n\t\n\tvar isInnerNoteIndex = function isInnerNoteIndex(note, index) {\n\t  return index === (note.getStemDirection() === _stem.Stem.UP ? note.keyProps.length - 1 : 0);\n\t};\n\t\n\t// Helper methods for rest positioning in ModifierContext.\n\tfunction shiftRestVertical(rest, note, dir) {\n\t  var delta = (note.isrest ? 0.0 : 1.0) * dir;\n\t\n\t  rest.line += delta;\n\t  rest.maxLine += delta;\n\t  rest.minLine += delta;\n\t  rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n\t}\n\t\n\t// Called from formatNotes :: center a rest between two notes\n\tfunction centerRest(rest, noteU, noteL) {\n\t  var delta = rest.line - _vex.Vex.MidLine(noteU.minLine, noteL.maxLine);\n\t  rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n\t  rest.line -= delta;\n\t  rest.maxLine -= delta;\n\t  rest.minLine -= delta;\n\t}\n\t\n\tvar StaveNote = exports.StaveNote = function (_StemmableNote) {\n\t  _inherits(StaveNote, _StemmableNote);\n\t\n\t  _createClass(StaveNote, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // ## Static Methods\n\t    //\n\t    // Format notes inside a ModifierContext.\n\t    value: function format(notes, state) {\n\t      if (!notes || notes.length < 2) return false;\n\t\n\t      if (notes[0].getStave() != null) return StaveNote.formatByY(notes, state);\n\t\n\t      var notesList = [];\n\t\n\t      for (var i = 0; i < notes.length; i++) {\n\t        var props = notes[i].getKeyProps();\n\t        var line = props[0].line;\n\t        var minL = props[props.length - 1].line;\n\t        var stemDirection = notes[i].getStemDirection();\n\t        var stemMax = notes[i].getStemLength() / 10;\n\t        var stemMin = notes[i].getStemMinumumLength() / 10;\n\t\n\t        var maxL = void 0;\n\t        if (notes[i].isRest()) {\n\t          maxL = line + notes[i].glyph.line_above;\n\t          minL = line - notes[i].glyph.line_below;\n\t        } else {\n\t          maxL = stemDirection === 1 ? props[props.length - 1].line + stemMax : props[props.length - 1].line;\n\t\n\t          minL = stemDirection === 1 ? props[0].line : props[0].line - stemMax;\n\t        }\n\t\n\t        notesList.push({\n\t          line: props[0].line, // note/rest base line\n\t          maxLine: maxL, // note/rest upper bounds line\n\t          minLine: minL, // note/rest lower bounds line\n\t          isrest: notes[i].isRest(),\n\t          stemDirection: stemDirection,\n\t          stemMax: stemMax, // Maximum (default) note stem length;\n\t          stemMin: stemMin, // minimum note stem length\n\t          voice_shift: notes[i].getVoiceShiftWidth(),\n\t          is_displaced: notes[i].isDisplaced(), // note manually displaced\n\t          note: notes[i]\n\t        });\n\t      }\n\t\n\t      var voices = notesList.length;\n\t\n\t      var noteU = notesList[0];\n\t      var noteM = voices > 2 ? notesList[1] : null;\n\t      var noteL = voices > 2 ? notesList[2] : notesList[1];\n\t\n\t      // for two voice backward compatibility, ensure upper voice is stems up\n\t      // for three voices, the voices must be in order (upper, middle, lower)\n\t      if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n\t        noteU = notesList[1];\n\t        noteL = notesList[0];\n\t      }\n\t\n\t      var voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);\n\t      var xShift = 0;\n\t      var stemDelta = void 0;\n\t\n\t      // Test for two voice note intersection\n\t      if (voices === 2) {\n\t        var lineSpacing = noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n\t        // if top voice is a middle voice, check stem intersection with lower voice\n\t        if (noteU.stemDirection === noteL.stemDirection && noteU.minLine <= noteL.maxLine) {\n\t          if (!noteU.isrest) {\n\t            stemDelta = Math.abs(noteU.line - (noteL.maxLine + 0.5));\n\t            stemDelta = Math.max(stemDelta, noteU.stemMin);\n\t            noteU.minLine = noteU.line - stemDelta;\n\t            noteU.note.setStemLength(stemDelta * 10);\n\t          }\n\t        }\n\t        if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n\t          if (noteU.isrest) {\n\t            // shift rest up\n\t            shiftRestVertical(noteU, noteL, 1);\n\t          } else if (noteL.isrest) {\n\t            // shift rest down\n\t            shiftRestVertical(noteL, noteU, -1);\n\t          } else {\n\t            xShift = voiceXShift;\n\t            if (noteU.stemDirection === noteL.stemDirection) {\n\t              // upper voice is middle voice, so shift it right\n\t              noteU.note.setXShift(xShift + 3);\n\t            } else {\n\t              // shift lower voice right\n\t              noteL.note.setXShift(xShift);\n\t            }\n\t          }\n\t        }\n\t\n\t        // format complete\n\t        return true;\n\t      }\n\t\n\t      // Check middle voice stem intersection with lower voice\n\t      if (noteM !== null && noteM.minLine < noteL.maxLine + 0.5) {\n\t        if (!noteM.isrest) {\n\t          stemDelta = Math.abs(noteM.line - (noteL.maxLine + 0.5));\n\t          stemDelta = Math.max(stemDelta, noteM.stemMin);\n\t          noteM.minLine = noteM.line - stemDelta;\n\t          noteM.note.setStemLength(stemDelta * 10);\n\t        }\n\t      }\n\t\n\t      // For three voices, test if rests can be repositioned\n\t      //\n\t      // Special case 1 :: middle voice rest between two notes\n\t      //\n\t      if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n\t        if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n\t          var restHeight = noteM.maxLine - noteM.minLine;\n\t          var space = noteU.minLine - noteL.maxLine;\n\t          if (restHeight < space) {\n\t            // center middle voice rest between the upper and lower voices\n\t            centerRest(noteM, noteU, noteL);\n\t          } else {\n\t            xShift = voiceXShift + 3; // shift middle rest right\n\t            noteM.note.setXShift(xShift);\n\t          }\n\t          // format complete\n\t          return true;\n\t        }\n\t      }\n\t\n\t      // Special case 2 :: all voices are rests\n\t      if (noteU.isrest && noteM.isrest && noteL.isrest) {\n\t        // Shift upper voice rest up\n\t        shiftRestVertical(noteU, noteM, 1);\n\t        // Shift lower voice rest down\n\t        shiftRestVertical(noteL, noteM, -1);\n\t        // format complete\n\t        return true;\n\t      }\n\t\n\t      // Test if any other rests can be repositioned\n\t      if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n\t        // Shift middle voice rest up\n\t        shiftRestVertical(noteM, noteL, 1);\n\t      }\n\t      if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n\t        // Shift middle voice rest down\n\t        shiftRestVertical(noteM, noteU, -1);\n\t      }\n\t      if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n\t        // shift upper voice rest up;\n\t        shiftRestVertical(noteU, noteM, 1);\n\t      }\n\t      if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n\t        // shift lower voice rest down\n\t        shiftRestVertical(noteL, noteM, -1);\n\t      }\n\t\n\t      // If middle voice intersects upper or lower voice\n\t      if (!noteU.isrest && !noteM.isrest && noteU.minLine <= noteM.maxLine + 0.5 || !noteM.isrest && !noteL.isrest && noteM.minLine <= noteL.maxLine) {\n\t        xShift = voiceXShift + 3; // shift middle note right\n\t        noteM.note.setXShift(xShift);\n\t      }\n\t\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'formatByY',\n\t    value: function formatByY(notes, state) {\n\t      // NOTE: this function does not support more than two voices per stave\n\t      // use with care.\n\t      var hasStave = true;\n\t\n\t      for (var i = 0; i < notes.length; i++) {\n\t        hasStave = hasStave && notes[i].getStave() != null;\n\t      }\n\t\n\t      if (!hasStave) {\n\t        throw new _vex.Vex.RERR('Stave Missing', 'All notes must have a stave - Vex.Flow.ModifierContext.formatMultiVoice!');\n\t      }\n\t\n\t      var xShift = 0;\n\t\n\t      for (var _i = 0; _i < notes.length - 1; _i++) {\n\t        var topNote = notes[_i];\n\t        var bottomNote = notes[_i + 1];\n\t\n\t        if (topNote.getStemDirection() === _stem.Stem.DOWN) {\n\t          topNote = notes[_i + 1];\n\t          bottomNote = notes[_i];\n\t        }\n\t\n\t        var topKeys = topNote.getKeyProps();\n\t        var bottomKeys = bottomNote.getKeyProps();\n\t\n\t        var HALF_NOTEHEAD_HEIGHT = 0.5;\n\t\n\t        // `keyProps` and `stave.getYForLine` have different notions of a `line`\n\t        // so we have to convert the keyProps value by subtracting 5.\n\t        // See https://github.com/0xfe/vexflow/wiki/Development-Gotchas\n\t        //\n\t        // We also extend the y for each note by a half notehead because the\n\t        // notehead's origin is centered\n\t        var topNotBottomY = topNote.getStave().getYForLine(5 - topKeys[0].line + HALF_NOTEHEAD_HEIGHT);\n\t\n\t        var bottomNoteTopY = bottomNote.getStave().getYForLine(5 - bottomKeys[bottomKeys.length - 1].line - HALF_NOTEHEAD_HEIGHT);\n\t\n\t        var areNotesColliding = bottomNoteTopY - topNotBottomY < 0;\n\t\n\t        if (areNotesColliding) {\n\t          xShift = topNote.getVoiceShiftWidth();\n\t          bottomNote.setXShift(xShift);\n\t        }\n\t      }\n\t\n\t      state.right_shift += xShift;\n\t    }\n\t  }, {\n\t    key: 'postFormat',\n\t    value: function postFormat(notes) {\n\t      if (!notes) return false;\n\t\n\t      notes.forEach(function (note) {\n\t        return note.postFormat();\n\t      });\n\t\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'stavenotes';\n\t    }\n\t  }, {\n\t    key: 'STEM_UP',\n\t    get: function get() {\n\t      return _stem.Stem.UP;\n\t    }\n\t  }, {\n\t    key: 'STEM_DOWN',\n\t    get: function get() {\n\t      return _stem.Stem.DOWN;\n\t    }\n\t  }, {\n\t    key: 'DEFAULT_LEDGER_LINE_OFFSET',\n\t    get: function get() {\n\t      return 3;\n\t    }\n\t  }]);\n\t\n\t  function StaveNote(noteStruct) {\n\t    _classCallCheck(this, StaveNote);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveNote).call(this, noteStruct));\n\t\n\t    _this.setAttribute('type', 'StaveNote');\n\t\n\t    _this.keys = noteStruct.keys;\n\t    _this.clef = noteStruct.clef;\n\t    _this.octave_shift = noteStruct.octave_shift;\n\t    _this.beam = null;\n\t\n\t    // Pull note rendering properties\n\t    _this.glyph = _tables.Flow.durationToGlyph(_this.duration, _this.noteType);\n\t\n\t    if (!_this.glyph) {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'Invalid note initialization data (No glyph found): ' + JSON.stringify(noteStruct));\n\t    }\n\t\n\t    // if true, displace note to right\n\t    _this.displaced = false;\n\t    _this.dot_shiftY = 0;\n\t    // per-pitch properties\n\t    _this.keyProps = [];\n\t    // for displaced ledger lines\n\t    _this.use_default_head_x = false;\n\t\n\t    // Drawing\n\t    _this.note_heads = [];\n\t    _this.modifiers = [];\n\t\n\t    _vex.Vex.Merge(_this.render_options, {\n\t      // font size for note heads and rests\n\t      glyph_font_scale: noteStruct.glyph_font_scale || _tables.Flow.DEFAULT_NOTATION_FONT_SCALE,\n\t      // number of stroke px to the left and right of head\n\t      stroke_px: noteStruct.stroke_px || StaveNote.DEFAULT_LEDGER_LINE_OFFSET\n\t    });\n\t\n\t    _this.calculateKeyProps();\n\t    _this.buildStem();\n\t\n\t    // Set the stem direction\n\t    if (noteStruct.auto_stem) {\n\t      _this.autoStem();\n\t    } else {\n\t      _this.setStemDirection(noteStruct.stem_direction);\n\t    }\n\t    _this.reset();\n\t    _this.buildFlag();\n\t    _this.calcExtraPx();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(StaveNote, [{\n\t    key: 'reset',\n\t    value: function reset() {\n\t      var _this2 = this;\n\t\n\t      _get(Object.getPrototypeOf(StaveNote.prototype), 'reset', this).call(this);\n\t      this.buildNoteHeads();\n\t      if (this.stave) {\n\t        this.note_heads.forEach(function (head) {\n\t          return head.setStave(_this2.stave);\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return StaveNote.CATEGORY;\n\t    }\n\t\n\t    // Builds a `Stem` for the note\n\t\n\t  }, {\n\t    key: 'buildStem',\n\t    value: function buildStem() {\n\t      var glyph = this.getGlyph();\n\t      var yExtend = glyph.code_head === 'v95' || glyph.code_head === 'v3e' ? -4 : 0;\n\t\n\t      this.setStem(new _stem.Stem({\n\t        yExtend: yExtend,\n\t        hide: !!this.isRest()\n\t      }));\n\t    }\n\t\n\t    // Builds a `NoteHead` for each key in the note\n\t\n\t  }, {\n\t    key: 'buildNoteHeads',\n\t    value: function buildNoteHeads() {\n\t      this.note_heads = [];\n\t      var stemDirection = this.getStemDirection();\n\t      var keys = this.getKeys();\n\t\n\t      var lastLine = null;\n\t      var lineDiff = null;\n\t      var displaced = false;\n\t\n\t      // Draw notes from bottom to top.\n\t\n\t      // For down-stem notes, we draw from top to bottom.\n\t      var start = void 0;\n\t      var end = void 0;\n\t      var step = void 0;\n\t      if (stemDirection === _stem.Stem.UP) {\n\t        start = 0;\n\t        end = keys.length;\n\t        step = 1;\n\t      } else if (stemDirection === _stem.Stem.DOWN) {\n\t        start = keys.length - 1;\n\t        end = -1;\n\t        step = -1;\n\t      }\n\t\n\t      for (var i = start; i !== end; i += step) {\n\t        var noteProps = this.keyProps[i];\n\t        var line = noteProps.line;\n\t\n\t        // Keep track of last line with a note head, so that consecutive heads\n\t        // are correctly displaced.\n\t        if (lastLine === null) {\n\t          lastLine = line;\n\t        } else {\n\t          lineDiff = Math.abs(lastLine - line);\n\t          if (lineDiff === 0 || lineDiff === 0.5) {\n\t            displaced = !displaced;\n\t          } else {\n\t            displaced = false;\n\t            this.use_default_head_x = true;\n\t          }\n\t        }\n\t        lastLine = line;\n\t\n\t        var notehead = new _notehead.NoteHead({\n\t          duration: this.duration,\n\t          note_type: this.noteType,\n\t          displaced: displaced,\n\t          stem_direction: stemDirection,\n\t          custom_glyph_code: noteProps.code,\n\t          glyph_font_scale: this.render_options.glyph_font_scale,\n\t          x_shift: noteProps.shift_right,\n\t          line: noteProps.line\n\t        });\n\t\n\t        this.note_heads[i] = notehead;\n\t      }\n\t    }\n\t\n\t    // Automatically sets the stem direction based on the keys in the note\n\t\n\t  }, {\n\t    key: 'autoStem',\n\t    value: function autoStem() {\n\t      // Figure out optimal stem direction based on given notes\n\t      this.minLine = this.keyProps[0].line;\n\t      this.maxLine = this.keyProps[this.keyProps.length - 1].line;\n\t\n\t      var MIDDLE_LINE = 3;\n\t      var decider = (this.minLine + this.maxLine) / 2;\n\t      var stemDirection = decider < MIDDLE_LINE ? _stem.Stem.UP : _stem.Stem.DOWN;\n\t\n\t      this.setStemDirection(stemDirection);\n\t    }\n\t\n\t    // Calculates and stores the properties for each key in the note\n\t\n\t  }, {\n\t    key: 'calculateKeyProps',\n\t    value: function calculateKeyProps() {\n\t      var lastLine = null;\n\t      for (var i = 0; i < this.keys.length; ++i) {\n\t        var key = this.keys[i];\n\t\n\t        // All rests use the same position on the line.\n\t        // if (this.glyph.rest) key = this.glyph.position;\n\t        if (this.glyph.rest) this.glyph.position = key;\n\t\n\t        var options = { octave_shift: this.octave_shift || 0 };\n\t        var props = _tables.Flow.keyProperties(key, this.clef, options);\n\t\n\t        if (!props) {\n\t          throw new _vex.Vex.RuntimeError('BadArguments', 'Invalid key for note properties: ' + key);\n\t        }\n\t\n\t        // Override line placement for default rests\n\t        if (props.key === 'R') {\n\t          if (this.duration === '1' || this.duration === 'w') {\n\t            props.line = 4;\n\t          } else {\n\t            props.line = 3;\n\t          }\n\t        }\n\t\n\t        // Calculate displacement of this note\n\t        var line = props.line;\n\t        if (lastLine === null) {\n\t          lastLine = line;\n\t        } else {\n\t          if (Math.abs(lastLine - line) === 0.5) {\n\t            this.displaced = true;\n\t            props.displaced = true;\n\t\n\t            // Have to mark the previous note as\n\t            // displaced as well, for modifier placement\n\t            if (this.keyProps.length > 0) {\n\t              this.keyProps[i - 1].displaced = true;\n\t            }\n\t          }\n\t        }\n\t\n\t        lastLine = line;\n\t        this.keyProps.push(props);\n\t      }\n\t\n\t      // Sort the notes from lowest line to highest line\n\t      lastLine = -Infinity;\n\t      this.keyProps.forEach(function (key) {\n\t        if (key.line < lastLine) {\n\t          _vex.Vex.W('Unsorted keys in note will be sorted. ' + 'See https://github.com/0xfe/vexflow/issues/104 for details.');\n\t        }\n\t        lastLine = key.line;\n\t      });\n\t      this.keyProps.sort(function (a, b) {\n\t        return a.line - b.line;\n\t      });\n\t    }\n\t\n\t    // Get the `BoundingBox` for the entire note\n\t\n\t  }, {\n\t    key: 'getBoundingBox',\n\t    value: function getBoundingBox() {\n\t      if (!this.preFormatted) {\n\t        throw new _vex.Vex.RERR('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n\t      }\n\t\n\t      var _getMetrics = this.getMetrics();\n\t\n\t      var w = _getMetrics.width;\n\t      var modLeftPx = _getMetrics.modLeftPx;\n\t      var extraLeftPx = _getMetrics.extraLeftPx;\n\t\n\t      var x = this.getAbsoluteX() - modLeftPx - extraLeftPx;\n\t\n\t      var minY = 0;\n\t      var maxY = 0;\n\t      var halfLineSpacing = this.getStave().getSpacingBetweenLines() / 2;\n\t      var lineSpacing = halfLineSpacing * 2;\n\t\n\t      if (this.isRest()) {\n\t        var y = this.ys[0];\n\t        var frac = _tables.Flow.durationToFraction(this.duration);\n\t        if (frac.equals(1) || frac.equals(2)) {\n\t          minY = y - halfLineSpacing;\n\t          maxY = y + halfLineSpacing;\n\t        } else {\n\t          minY = y - this.glyph.line_above * lineSpacing;\n\t          maxY = y + this.glyph.line_below * lineSpacing;\n\t        }\n\t      } else if (this.glyph.stem) {\n\t        var ys = this.getStemExtents();\n\t        ys.baseY += halfLineSpacing * this.stem_direction;\n\t        minY = Math.min(ys.topY, ys.baseY);\n\t        maxY = Math.max(ys.topY, ys.baseY);\n\t      } else {\n\t        minY = null;\n\t        maxY = null;\n\t\n\t        for (var i = 0; i < this.ys.length; ++i) {\n\t          var yy = this.ys[i];\n\t          if (i === 0) {\n\t            minY = yy;\n\t            maxY = yy;\n\t          } else {\n\t            minY = Math.min(yy, minY);\n\t            maxY = Math.max(yy, maxY);\n\t          }\n\t        }\n\t        minY -= halfLineSpacing;\n\t        maxY += halfLineSpacing;\n\t      }\n\t\n\t      return new _boundingbox.BoundingBox(x, minY, w, maxY - minY);\n\t    }\n\t\n\t    // Gets the line number of the top or bottom note in the chord.\n\t    // If `isTopNote` is `true` then get the top note\n\t\n\t  }, {\n\t    key: 'getLineNumber',\n\t    value: function getLineNumber(isTopNote) {\n\t      if (!this.keyProps.length) {\n\t        throw new _vex.Vex.RERR('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n\t      }\n\t\n\t      var resultLine = this.keyProps[0].line;\n\t\n\t      // No precondition assumed for sortedness of keyProps array\n\t      for (var i = 0; i < this.keyProps.length; i++) {\n\t        var thisLine = this.keyProps[i].line;\n\t        if (isTopNote) {\n\t          if (thisLine > resultLine) resultLine = thisLine;\n\t        } else {\n\t          if (thisLine < resultLine) resultLine = thisLine;\n\t        }\n\t      }\n\t\n\t      return resultLine;\n\t    }\n\t\n\t    // Determine if current note is a rest\n\t\n\t  }, {\n\t    key: 'isRest',\n\t    value: function isRest() {\n\t      return this.glyph.rest;\n\t    }\n\t\n\t    // Determine if the current note is a chord\n\t\n\t  }, {\n\t    key: 'isChord',\n\t    value: function isChord() {\n\t      return !this.isRest() && this.keys.length > 1;\n\t    }\n\t\n\t    // Determine if the `StaveNote` has a stem\n\t\n\t  }, {\n\t    key: 'hasStem',\n\t    value: function hasStem() {\n\t      return this.glyph.stem;\n\t    }\n\t  }, {\n\t    key: 'hasFlag',\n\t    value: function hasFlag() {\n\t      return _get(Object.getPrototypeOf(StaveNote.prototype), 'hasFlag', this).call(this) && !this.isRest();\n\t    }\n\t  }, {\n\t    key: 'getStemX',\n\t    value: function getStemX() {\n\t      if (this.noteType === 'r') {\n\t        return this.getCenterGlyphX();\n\t      } else {\n\t        // We adjust the origin of the stem because we want the stem left-aligned\n\t        // with the notehead if stemmed-down, and right-aligned if stemmed-up\n\t        return _get(Object.getPrototypeOf(StaveNote.prototype), 'getStemX', this).call(this) + getStemAdjustment(this);\n\t      }\n\t    }\n\t\n\t    // Get the `y` coordinate for text placed on the top/bottom of a\n\t    // note at a desired `text_line`\n\t\n\t  }, {\n\t    key: 'getYForTopText',\n\t    value: function getYForTopText(textLine) {\n\t      var extents = this.getStemExtents();\n\t      return Math.min(this.stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));\n\t    }\n\t  }, {\n\t    key: 'getYForBottomText',\n\t    value: function getYForBottomText(textLine) {\n\t      var extents = this.getStemExtents();\n\t      return Math.max(this.stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);\n\t    }\n\t\n\t    // Sets the current note to the provided `stave`. This applies\n\t    // `y` values to the `NoteHeads`.\n\t\n\t  }, {\n\t    key: 'setStave',\n\t    value: function setStave(stave) {\n\t      _get(Object.getPrototypeOf(StaveNote.prototype), 'setStave', this).call(this, stave);\n\t\n\t      var ys = this.note_heads.map(function (notehead) {\n\t        notehead.setStave(stave);\n\t        return notehead.getY();\n\t      });\n\t\n\t      this.setYs(ys);\n\t\n\t      if (this.stem) {\n\t        var _getNoteHeadBounds = this.getNoteHeadBounds();\n\t\n\t        var y_top = _getNoteHeadBounds.y_top;\n\t        var y_bottom = _getNoteHeadBounds.y_bottom;\n\t\n\t        this.stem.setYBounds(y_top, y_bottom);\n\t      }\n\t\n\t      return this;\n\t    }\n\t\n\t    // Get the pitches in the note\n\t\n\t  }, {\n\t    key: 'getKeys',\n\t    value: function getKeys() {\n\t      return this.keys;\n\t    }\n\t\n\t    // Get the properties for all the keys in the note\n\t\n\t  }, {\n\t    key: 'getKeyProps',\n\t    value: function getKeyProps() {\n\t      return this.keyProps;\n\t    }\n\t\n\t    // Check if note is shifted to the right\n\t\n\t  }, {\n\t    key: 'isDisplaced',\n\t    value: function isDisplaced() {\n\t      return this.displaced;\n\t    }\n\t\n\t    // Sets whether shift note to the right. `displaced` is a `boolean`\n\t\n\t  }, {\n\t    key: 'setNoteDisplaced',\n\t    value: function setNoteDisplaced(displaced) {\n\t      this.displaced = displaced;\n\t      return this;\n\t    }\n\t\n\t    // Get the starting `x` coordinate for a `StaveTie`\n\t\n\t  }, {\n\t    key: 'getTieRightX',\n\t    value: function getTieRightX() {\n\t      var tieStartX = this.getAbsoluteX();\n\t      tieStartX += this.getGlyphWidth() + this.x_shift + this.extraRightPx;\n\t      if (this.modifierContext) tieStartX += this.modifierContext.getExtraRightPx();\n\t      return tieStartX;\n\t    }\n\t\n\t    // Get the ending `x` coordinate for a `StaveTie`\n\t\n\t  }, {\n\t    key: 'getTieLeftX',\n\t    value: function getTieLeftX() {\n\t      var tieEndX = this.getAbsoluteX();\n\t      tieEndX += this.x_shift - this.extraLeftPx;\n\t      return tieEndX;\n\t    }\n\t\n\t    // Get the stave line on which to place a rest\n\t\n\t  }, {\n\t    key: 'getLineForRest',\n\t    value: function getLineForRest() {\n\t      var restLine = this.keyProps[0].line;\n\t      if (this.keyProps.length > 1) {\n\t        var lastLine = this.keyProps[this.keyProps.length - 1].line;\n\t        var top = Math.max(restLine, lastLine);\n\t        var bot = Math.min(restLine, lastLine);\n\t        restLine = _vex.Vex.MidLine(top, bot);\n\t      }\n\t\n\t      return restLine;\n\t    }\n\t\n\t    // Get the default `x` and `y` coordinates for the provided `position`\n\t    // and key `index`\n\t\n\t  }, {\n\t    key: 'getModifierStartXY',\n\t    value: function getModifierStartXY(position, index) {\n\t      if (!this.preFormatted) {\n\t        throw new _vex.Vex.RERR('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n\t      }\n\t\n\t      if (this.ys.length === 0) {\n\t        throw new _vex.Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');\n\t      }\n\t\n\t      var _Modifier$Position = _modifier.Modifier.Position;\n\t      var ABOVE = _Modifier$Position.ABOVE;\n\t      var BELOW = _Modifier$Position.BELOW;\n\t      var LEFT = _Modifier$Position.LEFT;\n\t      var RIGHT = _Modifier$Position.RIGHT;\n\t\n\t      var x = 0;\n\t      if (position === LEFT) {\n\t        // extra_left_px\n\t        // FIXME: What are these magic numbers?\n\t        x = -1 * 2;\n\t      } else if (position === RIGHT) {\n\t        // extra_right_px\n\t        // FIXME: What is this magical +2?\n\t        x = this.getGlyphWidth() + this.x_shift + 2;\n\t\n\t        if (this.stem_direction === _stem.Stem.UP && this.hasFlag() && isInnerNoteIndex(this, index)) {\n\t          x += this.flag.getMetrics().width;\n\t        }\n\t      } else if (position === BELOW || position === ABOVE) {\n\t        x = this.getGlyphWidth() / 2;\n\t      }\n\t\n\t      return {\n\t        x: this.getAbsoluteX() + x,\n\t        y: this.ys[index]\n\t      };\n\t    }\n\t\n\t    // Sets the style of the complete StaveNote, including all keys\n\t    // and the stem.\n\t\n\t  }, {\n\t    key: 'setStyle',\n\t    value: function setStyle(style) {\n\t      this.note_heads.forEach(function (notehead) {\n\t        return notehead.setStyle(style);\n\t      });\n\t      this.stem.setStyle(style);\n\t    }\n\t\n\t    // Sets the notehead at `index` to the provided coloring `style`.\n\t    //\n\t    // `style` is an `object` with the following properties: `shadowColor`,\n\t    // `shadowBlur`, `fillStyle`, `strokeStyle`\n\t\n\t  }, {\n\t    key: 'setKeyStyle',\n\t    value: function setKeyStyle(index, style) {\n\t      this.note_heads[index].setStyle(style);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setKeyLine',\n\t    value: function setKeyLine(index, line) {\n\t      this.keyProps[index].line = line;\n\t      this.note_heads[index].setLine(line);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getKeyLine',\n\t    value: function getKeyLine(index) {\n\t      return this.keyProps[index].line;\n\t    }\n\t\n\t    // Add self to modifier context. `mContext` is the `ModifierContext`\n\t    // to be added to.\n\t\n\t  }, {\n\t    key: 'addToModifierContext',\n\t    value: function addToModifierContext(mContext) {\n\t      this.setModifierContext(mContext);\n\t      for (var i = 0; i < this.modifiers.length; ++i) {\n\t        this.modifierContext.addModifier(this.modifiers[i]);\n\t      }\n\t      this.modifierContext.addModifier(this);\n\t      this.setPreFormatted(false);\n\t      return this;\n\t    }\n\t\n\t    // Generic function to add modifiers to a note\n\t    //\n\t    // Parameters:\n\t    // * `index`: The index of the key that we're modifying\n\t    // * `modifier`: The modifier to add\n\t\n\t  }, {\n\t    key: 'addModifier',\n\t    value: function addModifier(index, modifier) {\n\t      modifier.setNote(this);\n\t      modifier.setIndex(index);\n\t      this.modifiers.push(modifier);\n\t      this.setPreFormatted(false);\n\t      return this;\n\t    }\n\t\n\t    // Helper function to add an accidental to a key\n\t\n\t  }, {\n\t    key: 'addAccidental',\n\t    value: function addAccidental(index, accidental) {\n\t      return this.addModifier(index, accidental);\n\t    }\n\t\n\t    // Helper function to add an articulation to a key\n\t\n\t  }, {\n\t    key: 'addArticulation',\n\t    value: function addArticulation(index, articulation) {\n\t      return this.addModifier(index, articulation);\n\t    }\n\t\n\t    // Helper function to add an annotation to a key\n\t\n\t  }, {\n\t    key: 'addAnnotation',\n\t    value: function addAnnotation(index, annotation) {\n\t      return this.addModifier(index, annotation);\n\t    }\n\t\n\t    // Helper function to add a dot on a specific key\n\t\n\t  }, {\n\t    key: 'addDot',\n\t    value: function addDot(index) {\n\t      var dot = new _dot.Dot();\n\t      dot.setDotShiftY(this.glyph.dot_shiftY);\n\t      this.dots++;\n\t      return this.addModifier(index, dot);\n\t    }\n\t\n\t    // Convenience method to add dot to all keys in note\n\t\n\t  }, {\n\t    key: 'addDotToAll',\n\t    value: function addDotToAll() {\n\t      for (var i = 0; i < this.keys.length; ++i) {\n\t        this.addDot(i);\n\t      }\n\t      return this;\n\t    }\n\t\n\t    // Get all accidentals in the `ModifierContext`\n\t\n\t  }, {\n\t    key: 'getAccidentals',\n\t    value: function getAccidentals() {\n\t      return this.modifierContext.getModifiers('accidentals');\n\t    }\n\t\n\t    // Get all dots in the `ModifierContext`\n\t\n\t  }, {\n\t    key: 'getDots',\n\t    value: function getDots() {\n\t      return this.modifierContext.getModifiers('dots');\n\t    }\n\t\n\t    // Get the width of the note if it is displaced. Used for `Voice`\n\t    // formatting\n\t\n\t  }, {\n\t    key: 'getVoiceShiftWidth',\n\t    value: function getVoiceShiftWidth() {\n\t      // TODO: may need to accomodate for dot here.\n\t      return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n\t    }\n\t\n\t    // Calculates and sets the extra pixels to the left or right\n\t    // if the note is displaced.\n\t\n\t  }, {\n\t    key: 'calcExtraPx',\n\t    value: function calcExtraPx() {\n\t      this.setExtraLeftPx(this.displaced && this.stem_direction === _stem.Stem.DOWN ? this.getGlyphWidth() : 0);\n\t\n\t      // For upstems with flags, the extra space is unnecessary, since it's taken\n\t      // up by the flag.\n\t      this.setExtraRightPx(!this.hasFlag() && this.displaced && this.stem_direction === _stem.Stem.UP ? this.getGlyphWidth() : 0);\n\t    }\n\t\n\t    // Pre-render formatting\n\t\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      if (this.preFormatted) return;\n\t      if (this.modifierContext) this.modifierContext.preFormat();\n\t\n\t      var width = this.getGlyphWidth() + this.extraLeftPx + this.extraRightPx;\n\t\n\t      // For upward flagged notes, the width of the flag needs to be added\n\t      if (this.glyph.flag && this.beam === null && this.stem_direction === _stem.Stem.UP) {\n\t        width += this.getGlyphWidth();\n\t      }\n\t\n\t      this.setWidth(width);\n\t      this.setPreFormatted(true);\n\t    }\n\t\n\t    // Gets the staff line and y value for the highest and lowest noteheads\n\t\n\t  }, {\n\t    key: 'getNoteHeadBounds',\n\t    value: function getNoteHeadBounds() {\n\t      // Top and bottom Y values for stem.\n\t      var yTop = null;\n\t      var yBottom = null;\n\t\n\t      var highestLine = this.stave.getNumLines();\n\t      var lowestLine = 1;\n\t\n\t      this.note_heads.forEach(function (notehead) {\n\t        var line = notehead.getLine();\n\t        var y = notehead.getY();\n\t\n\t        if (yTop === null || y < yTop) {\n\t          yTop = y;\n\t        }\n\t\n\t        if (yBottom === null || y > yBottom) {\n\t          yBottom = y;\n\t        }\n\t\n\t        highestLine = line > highestLine ? line : highestLine;\n\t        lowestLine = line < lowestLine ? line : lowestLine;\n\t      }, this);\n\t\n\t      return {\n\t        y_top: yTop,\n\t        y_bottom: yBottom,\n\t        highest_line: highestLine,\n\t        lowest_line: lowestLine\n\t      };\n\t    }\n\t\n\t    // Get the starting `x` coordinate for the noteheads\n\t\n\t  }, {\n\t    key: 'getNoteHeadBeginX',\n\t    value: function getNoteHeadBeginX() {\n\t      return this.getAbsoluteX() + this.x_shift;\n\t    }\n\t\n\t    // Get the ending `x` coordinate for the noteheads\n\t\n\t  }, {\n\t    key: 'getNoteHeadEndX',\n\t    value: function getNoteHeadEndX() {\n\t      var xBegin = this.getNoteHeadBeginX();\n\t      return xBegin + this.getGlyphWidth();\n\t    }\n\t\n\t    // Draw the ledger lines between the stave and the highest/lowest keys\n\t\n\t  }, {\n\t    key: 'drawLedgerLines',\n\t    value: function drawLedgerLines() {\n\t      var _this3 = this;\n\t\n\t      var note_heads = this.note_heads;\n\t      var stave = this.stave;\n\t      var use_default_head_x = this.use_default_head_x;\n\t      var x_shift = this.x_shift;\n\t      var glyph = this.glyph;\n\t      var stroke_px = this.render_options.stroke_px;\n\t      var ctx = this.context;\n\t\n\t\n\t      if (this.isRest()) return;\n\t      if (!ctx) {\n\t        throw new _vex.Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n\t      }\n\t\n\t      var _getNoteHeadBounds2 = this.getNoteHeadBounds();\n\t\n\t      var highest_line = _getNoteHeadBounds2.highest_line;\n\t      var lowest_line = _getNoteHeadBounds2.lowest_line;\n\t\n\t      var headX = note_heads[0].getAbsoluteX();\n\t\n\t      var drawLedgerLine = function drawLedgerLine(y) {\n\t        if (use_default_head_x === true) {\n\t          headX = _this3.getAbsoluteX() + x_shift;\n\t        }\n\t        var x = headX - stroke_px;\n\t        var length = headX + glyph.getWidth() - headX + stroke_px * 2;\n\t\n\t        ctx.fillRect(x, y, length, 1);\n\t      };\n\t\n\t      for (var line = 6; line <= highest_line; ++line) {\n\t        drawLedgerLine(stave.getYForNote(line));\n\t      }\n\t\n\t      for (var _line = 0; _line >= lowest_line; --_line) {\n\t        drawLedgerLine(stave.getYForNote(_line));\n\t      }\n\t    }\n\t\n\t    // Draw all key modifiers\n\t\n\t  }, {\n\t    key: 'drawModifiers',\n\t    value: function drawModifiers() {\n\t      if (!this.context) {\n\t        throw new _vex.Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n\t      }\n\t\n\t      var ctx = this.context;\n\t      ctx.openGroup('modifiers');\n\t      for (var i = 0; i < this.modifiers.length; i++) {\n\t        var modifier = this.modifiers[i];\n\t        var notehead = this.note_heads[modifier.getIndex()];\n\t        var noteheadStyle = notehead.getStyle();\n\t        if (noteheadStyle) {\n\t          ctx.save();\n\t          notehead.applyStyle(ctx);\n\t        }\n\t        modifier.setContext(ctx);\n\t        modifier.draw();\n\t        if (noteheadStyle) {\n\t          ctx.restore();\n\t        }\n\t      }\n\t      ctx.closeGroup();\n\t    }\n\t\n\t    // Draw the flag for the note\n\t\n\t  }, {\n\t    key: 'drawFlag',\n\t    value: function drawFlag() {\n\t      var stem = this.stem;\n\t      var beam = this.beam;\n\t      var ctx = this.context;\n\t\n\t\n\t      if (!ctx) {\n\t        throw new _vex.Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n\t      }\n\t\n\t      var shouldRenderFlag = beam === null;\n\t      var glyph = this.getGlyph();\n\t\n\t      if (glyph.flag && shouldRenderFlag) {\n\t        var _getNoteHeadBounds3 = this.getNoteHeadBounds();\n\t\n\t        var y_top = _getNoteHeadBounds3.y_top;\n\t        var y_bottom = _getNoteHeadBounds3.y_bottom;\n\t\n\t        var noteStemHeight = stem.getHeight();\n\t        var flagX = this.getStemX();\n\t        // FIXME: What's with the magic +/- 2\n\t        var flagY = this.getStemDirection() === _stem.Stem.DOWN\n\t        // Down stems have flags on the left\n\t        ? y_top - noteStemHeight + 2\n\t        // Up stems have flags on the eft.\n\t        : y_bottom - noteStemHeight - 2;\n\t\n\t        // Draw the Flag\n\t        ctx.openGroup('flag', null, { pointerBBox: true });\n\t        this.flag.render(ctx, flagX, flagY);\n\t        ctx.closeGroup();\n\t      }\n\t    }\n\t\n\t    // Draw the NoteHeads\n\t\n\t  }, {\n\t    key: 'drawNoteHeads',\n\t    value: function drawNoteHeads() {\n\t      var _this4 = this;\n\t\n\t      this.note_heads.forEach(function (notehead) {\n\t        _this4.context.openGroup('notehead', null, { pointerBBox: true });\n\t        notehead.setContext(_this4.context).draw();\n\t        _this4.context.closeGroup();\n\t      });\n\t    }\n\t\n\t    // Render the stem onto the canvas\n\t\n\t  }, {\n\t    key: 'drawStem',\n\t    value: function drawStem(stemStruct) {\n\t      if (!this.context) {\n\t        throw new _vex.Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n\t      }\n\t\n\t      if (stemStruct) {\n\t        this.setStem(new _stem.Stem(stemStruct));\n\t      }\n\t\n\t      this.context.openGroup('stem', null, { pointerBBox: true });\n\t      this.stem.setContext(this.context).draw();\n\t      this.context.closeGroup();\n\t    }\n\t\n\t    // Draws all the `StaveNote` parts. This is the main drawing method.\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      if (!this.context) {\n\t        throw new _vex.Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n\t      }\n\t      if (!this.stave) {\n\t        throw new _vex.Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\t      }\n\t      if (this.ys.length === 0) {\n\t        throw new _vex.Vex.RERR('NoYValues', \"Can't draw note without Y values.\");\n\t      }\n\t\n\t      var xBegin = this.getNoteHeadBeginX();\n\t      var shouldRenderStem = this.hasStem() && !this.beam;\n\t\n\t      // Format note head x positions\n\t      this.note_heads.forEach(function (notehead) {\n\t        return notehead.setX(xBegin);\n\t      });\n\t\n\t      // Format stem x positions\n\t      var stemX = this.getStemX();\n\t      this.stem.setNoteHeadXBounds(stemX, stemX);\n\t\n\t      L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n\t\n\t      // Draw each part of the note\n\t      this.drawLedgerLines();\n\t\n\t      this.setAttribute('el', this.context.openGroup('stavenote', this.getAttribute('id')));\n\t      this.context.openGroup('note', null, { pointerBBox: true });\n\t      if (shouldRenderStem) this.drawStem();\n\t      this.drawNoteHeads();\n\t      this.drawFlag();\n\t      this.context.closeGroup();\n\t      this.drawModifiers();\n\t      this.context.closeGroup();\n\t      this.setRendered();\n\t    }\n\t  }]);\n\n\t  return StaveNote;\n\t}(_stemmablenote.StemmableNote);\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.NoteHead = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _note = __webpack_require__(22);\n\t\n\tvar _stem = __webpack_require__(17);\n\t\n\tvar _stavenote = __webpack_require__(20);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This file implements `NoteHeads`. `NoteHeads` are typically not manipulated\n\t// directly, but used internally in `StaveNote`.\n\t//\n\t// See `tests/notehead_tests.js` for usage examples.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (NoteHead.DEBUG) _vex.Vex.L('Vex.Flow.NoteHead', args);\n\t}\n\t\n\t// Draw slashnote head manually. No glyph exists for this.\n\t//\n\t// Parameters:\n\t// * `ctx`: the Canvas context\n\t// * `duration`: the duration of the note. ex: \"4\"\n\t// * `x`: the x coordinate to draw at\n\t// * `y`: the y coordinate to draw at\n\t// * `stem_direction`: the direction of the stem\n\tfunction drawSlashNoteHead(ctx, duration, x, y, stem_direction, staveSpace) {\n\t  var width = _tables.Flow.SLASH_NOTEHEAD_WIDTH;\n\t  ctx.save();\n\t  ctx.setLineWidth(_tables.Flow.STEM_WIDTH);\n\t\n\t  var fill = false;\n\t\n\t  if (_tables.Flow.durationToNumber(duration) > 2) {\n\t    fill = true;\n\t  }\n\t\n\t  if (!fill) x -= _tables.Flow.STEM_WIDTH / 2 * stem_direction;\n\t\n\t  ctx.beginPath();\n\t  ctx.moveTo(x, y + staveSpace);\n\t  ctx.lineTo(x, y + 1);\n\t  ctx.lineTo(x + width, y - staveSpace);\n\t  ctx.lineTo(x + width, y);\n\t  ctx.lineTo(x, y + staveSpace);\n\t  ctx.closePath();\n\t\n\t  if (fill) {\n\t    ctx.fill();\n\t  } else {\n\t    ctx.stroke();\n\t  }\n\t\n\t  if (_tables.Flow.durationToFraction(duration).equals(0.5)) {\n\t    var breve_lines = [-3, -1, width + 1, width + 3];\n\t    for (var i = 0; i < breve_lines.length; i++) {\n\t      ctx.beginPath();\n\t      ctx.moveTo(x + breve_lines[i], y - 10);\n\t      ctx.lineTo(x + breve_lines[i], y + 11);\n\t      ctx.stroke();\n\t    }\n\t  }\n\t\n\t  ctx.restore();\n\t}\n\t\n\tvar NoteHead = exports.NoteHead = function (_Note) {\n\t  _inherits(NoteHead, _Note);\n\t\n\t  _createClass(NoteHead, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'notehead';\n\t    }\n\t  }]);\n\t\n\t  function NoteHead(head_options) {\n\t    _classCallCheck(this, NoteHead);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NoteHead).call(this, head_options));\n\t\n\t    _this.setAttribute('type', 'NoteHead');\n\t\n\t    _this.index = head_options.index;\n\t    _this.x = head_options.x || 0;\n\t    _this.y = head_options.y || 0;\n\t    _this.note_type = head_options.note_type;\n\t    _this.duration = head_options.duration;\n\t    _this.displaced = head_options.displaced || false;\n\t    _this.stem_direction = head_options.stem_direction || _stavenote.StaveNote.STEM_UP;\n\t    _this.line = head_options.line;\n\t\n\t    // Get glyph code based on duration and note type. This could be\n\t    // regular notes, rests, or other custom codes.\n\t    _this.glyph = _tables.Flow.durationToGlyph(_this.duration, _this.note_type);\n\t    if (!_this.glyph) {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'No glyph found for duration \\'' + _this.duration + '\\' and type \\'' + _this.note_type + '\\'');\n\t    }\n\t\n\t    _this.glyph_code = _this.glyph.code_head;\n\t    _this.x_shift = head_options.x_shift;\n\t    if (head_options.custom_glyph_code) {\n\t      _this.custom_glyph = true;\n\t      _this.glyph_code = head_options.custom_glyph_code;\n\t    }\n\t\n\t    _this.style = head_options.style;\n\t    _this.slashed = head_options.slashed;\n\t\n\t    _vex.Vex.Merge(_this.render_options, {\n\t      // font size for note heads\n\t      glyph_font_scale: head_options.glyph_font_scale || _tables.Flow.DEFAULT_NOTATION_FONT_SCALE,\n\t      // number of stroke px to the left and right of head\n\t      stroke_px: 3\n\t    });\n\t\n\t    _this.setWidth(_this.glyph.getWidth(_this.render_options.glyph_font_scale));\n\t    return _this;\n\t  }\n\t\n\t  _createClass(NoteHead, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return NoteHead.CATEGORY;\n\t    }\n\t\n\t    // Get the width of the notehead\n\t\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      return this.width;\n\t    }\n\t\n\t    // Determine if the notehead is displaced\n\t\n\t  }, {\n\t    key: 'isDisplaced',\n\t    value: function isDisplaced() {\n\t      return this.displaced === true;\n\t    }\n\t\n\t    // Get/set the notehead's style\n\t    //\n\t    // `style` is an `object` with the following properties: `shadowColor`,\n\t    // `shadowBlur`, `fillStyle`, `strokeStyle`\n\t\n\t  }, {\n\t    key: 'getStyle',\n\t    value: function getStyle() {\n\t      return this.style;\n\t    }\n\t  }, {\n\t    key: 'setStyle',\n\t    value: function setStyle(style) {\n\t      this.style = style;return this;\n\t    }\n\t\n\t    // Get the glyph data\n\t\n\t  }, {\n\t    key: 'getGlyph',\n\t    value: function getGlyph() {\n\t      return this.glyph;\n\t    }\n\t\n\t    // Set the X coordinate\n\t\n\t  }, {\n\t    key: 'setX',\n\t    value: function setX(x) {\n\t      this.x = x;return this;\n\t    }\n\t\n\t    // get/set the Y coordinate\n\t\n\t  }, {\n\t    key: 'getY',\n\t    value: function getY() {\n\t      return this.y;\n\t    }\n\t  }, {\n\t    key: 'setY',\n\t    value: function setY(y) {\n\t      this.y = y;return this;\n\t    }\n\t\n\t    // Get/set the stave line the notehead is placed on\n\t\n\t  }, {\n\t    key: 'getLine',\n\t    value: function getLine() {\n\t      return this.line;\n\t    }\n\t  }, {\n\t    key: 'setLine',\n\t    value: function setLine(line) {\n\t      this.line = line;return this;\n\t    }\n\t\n\t    // Get the canvas `x` coordinate position of the notehead.\n\t\n\t  }, {\n\t    key: 'getAbsoluteX',\n\t    value: function getAbsoluteX() {\n\t      // If the note has not been preformatted, then get the static x value\n\t      // Otherwise, it's been formatted and we should use it's x value relative\n\t      // to its tick context\n\t      var x = !this.preFormatted ? this.x : _get(Object.getPrototypeOf(NoteHead.prototype), 'getAbsoluteX', this).call(this);\n\t\n\t      // For a more natural displaced notehead, we adjust the displacement amount\n\t      // by half the stem width in order to maintain a slight overlap with the stem\n\t      var displacementStemAdjustment = _stem.Stem.WIDTH / 2;\n\t\n\t      return x + (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction : 0);\n\t    }\n\t\n\t    // Get the `BoundingBox` for the `NoteHead`\n\t\n\t  }, {\n\t    key: 'getBoundingBox',\n\t    value: function getBoundingBox() {\n\t      if (!this.preFormatted) {\n\t        throw new _vex.Vex.RERR('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n\t      }\n\t\n\t      var spacing = this.stave.getSpacingBetweenLines();\n\t      var half_spacing = spacing / 2;\n\t      var min_y = this.y - half_spacing;\n\t\n\t      return new _tables.Flow.BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n\t    }\n\t\n\t    // Apply current style to Canvas `context`\n\t\n\t  }, {\n\t    key: 'applyStyle',\n\t    value: function applyStyle(context) {\n\t      var style = this.getStyle();\n\t      if (style.shadowColor) context.setShadowColor(style.shadowColor);\n\t      if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n\t      if (style.fillStyle) context.setFillStyle(style.fillStyle);\n\t      if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n\t      return this;\n\t    }\n\t\n\t    // Set notehead to a provided `stave`\n\t\n\t  }, {\n\t    key: 'setStave',\n\t    value: function setStave(stave) {\n\t      var line = this.getLine();\n\t\n\t      this.stave = stave;\n\t      this.setY(stave.getYForNote(line));\n\t      this.context = this.stave.context;\n\t      return this;\n\t    }\n\t\n\t    // Pre-render formatting\n\t\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      if (this.preFormatted) return this;\n\t\n\t      var width = this.getWidth() + this.extraLeftPx + this.extraRightPx;\n\t\n\t      this.setWidth(width);\n\t      this.setPreFormatted(true);\n\t      return this;\n\t    }\n\t\n\t    // Draw the notehead\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      this.setRendered();\n\t\n\t      var ctx = this.context;\n\t      var head_x = this.getAbsoluteX();\n\t      var y = this.y;\n\t\n\t      L(\"Drawing note head '\", this.note_type, this.duration, \"' at\", head_x, y);\n\t\n\t      // Begin and end positions for head.\n\t      var stem_direction = this.stem_direction;\n\t      var glyph_font_scale = this.render_options.glyph_font_scale;\n\t      var line = this.line;\n\t\n\t      // If note above/below the staff, draw the small staff\n\t      if (line <= 0 || line >= 6) {\n\t        var line_y = y;\n\t        var floor = Math.floor(line);\n\t        if (line < 0 && floor - line === -0.5) {\n\t          line_y -= 5;\n\t        } else if (line > 6 && floor - line === -0.5) {\n\t          line_y += 5;\n\t        }\n\t\n\t        if (this.note_type !== 'r') {\n\t          ctx.fillRect(head_x - this.render_options.stroke_px, line_y, this.getWidth() + this.render_options.stroke_px * 2, 1);\n\t        }\n\t      }\n\t\n\t      if (this.note_type === 's') {\n\t        var staveSpace = this.stave.getSpacingBetweenLines();\n\t        drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);\n\t      } else {\n\t        if (this.style) {\n\t          ctx.save();\n\t          this.applyStyle(ctx);\n\t          _glyph.Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code);\n\t          ctx.restore();\n\t        } else {\n\t          _glyph.Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code);\n\t        }\n\t      }\n\t    }\n\t  }]);\n\n\t  return NoteHead;\n\t}(_note.Note);\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Note = undefined;\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _tickable = __webpack_require__(23);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This file implements an abstract interface for notes and chords that\n\t// are rendered on a stave. Notes have some common properties: All of them\n\t// have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n\t//\n\t// Some notes have stems, heads, dots, etc. Most notational elements that\n\t// surround a note are called *modifiers*, and every note has an associated\n\t// array of them. All notes also have a rendering context and belong to a stave.\n\t\n\tvar Note = exports.Note = function (_Tickable) {\n\t  _inherits(Note, _Tickable);\n\t\n\t  _createClass(Note, null, [{\n\t    key: 'plotMetrics',\n\t\n\t\n\t    // Debug helper. Displays various note metrics for the given\n\t    // note.\n\t    value: function plotMetrics(ctx, note, yPos) {\n\t      var metrics = note.getMetrics();\n\t      var xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.extraLeftPx;\n\t      var xPre1 = note.getAbsoluteX() - metrics.extraLeftPx;\n\t      var xAbs = note.getAbsoluteX();\n\t      var xPost1 = note.getAbsoluteX() + metrics.noteWidth;\n\t      var xPost2 = note.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx;\n\t      var xEnd = note.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx + metrics.modRightPx;\n\t      var xFreedomRight = xEnd + note.getFormatterMetrics().freedom.right;\n\t\n\t      var xWidth = xEnd - xStart;\n\t      ctx.save();\n\t      ctx.setFont('Arial', 8, '');\n\t      ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n\t\n\t      var y = yPos + 7;\n\t      function stroke(x1, x2, color) {\n\t        var yy = arguments.length <= 3 || arguments[3] === undefined ? y : arguments[3];\n\t\n\t        ctx.beginPath();\n\t        ctx.setStrokeStyle(color);\n\t        ctx.setFillStyle(color);\n\t        ctx.setLineWidth(3);\n\t        ctx.moveTo(x1 + note.getXShift(), yy);\n\t        ctx.lineTo(x2 + note.getXShift(), yy);\n\t        ctx.stroke();\n\t      }\n\t\n\t      stroke(xStart, xPre1, 'red');\n\t      stroke(xPre1, xAbs, '#999');\n\t      stroke(xAbs, xPost1, 'green');\n\t      stroke(xPost1, xPost2, '#999');\n\t      stroke(xPost2, xEnd, 'red');\n\t      stroke(xEnd, xFreedomRight, '#DD0');\n\t      stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n\t      _vex.Vex.drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n\t\n\t      var formatterMetrics = note.getFormatterMetrics();\n\t      if (formatterMetrics.iterations > 0) {\n\t        var spaceDeviation = formatterMetrics.space.deviation;\n\t        var prefix = spaceDeviation >= 0 ? '+' : '';\n\t        ctx.setFillStyle('red');\n\t        ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n\t      }\n\t      ctx.restore();\n\t    }\n\t\n\t    // Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n\t    // positioning and layout.\n\t    // To create a new note you need to provide a `note_struct`, which consists\n\t    // of the following fields:\n\t    //\n\t    // `type`: The note type (e.g., `r` for rest, `s` for slash notes, etc.)\n\t    // `dots`: The number of dots, which affects the duration.\n\t    // `duration`: The time length (e.g., `q` for quarter, `h` for half, `8` for eighth etc.)\n\t    //\n\t    // The range of values for these parameters are available in `src/tables.js`.\n\t\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'note';\n\t    }\n\t  }, {\n\t    key: 'STAVEPADDING',\n\t    get: function get() {\n\t      return 12;\n\t    }\n\t  }]);\n\t\n\t  function Note(note_struct) {\n\t    _classCallCheck(this, Note);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Note).call(this));\n\t\n\t    _this.setAttribute('type', 'Note');\n\t\n\t    if (!note_struct) {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n\t    }\n\t\n\t    // Parse `note_struct` and get note properties.\n\t    var initData = _tables.Flow.parseNoteData(note_struct);\n\t    if (!initData) {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'Invalid note initialization object: ' + JSON.stringify(note_struct));\n\t    }\n\t\n\t    // Set note properties from parameters.\n\t    _this.duration = initData.duration;\n\t    _this.dots = initData.dots;\n\t    _this.noteType = initData.type;\n\t\n\t    if (note_struct.duration_override) {\n\t      // Custom duration\n\t      _this.setDuration(note_struct.duration_override);\n\t    } else {\n\t      // Default duration\n\t      _this.setIntrinsicTicks(initData.ticks);\n\t    }\n\t\n\t    _this.modifiers = [];\n\t\n\t    // Get the glyph code for this note from the font.\n\t    _this.glyph = _tables.Flow.durationToGlyph(_this.duration, _this.noteType);\n\t\n\t    if (_this.positions && (_typeof(_this.positions) !== 'object' || !_this.positions.length)) {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'Note keys must be array type.');\n\t    }\n\t\n\t    // Note to play for audio players.\n\t    _this.playNote = null;\n\t\n\t    // Positioning contexts used by the Formatter.\n\t    _this.tickContext = null; // The current tick context.\n\t    _this.modifierContext = null;\n\t    _this.ignore_ticks = false;\n\t\n\t    // Positioning variables\n\t    _this.width = 0; // Width in pixels calculated after preFormat\n\t    _this.extraLeftPx = 0; // Extra room on left for offset note head\n\t    _this.extraRightPx = 0; // Extra room on right for offset note head\n\t    _this.x_shift = 0; // X shift from tick context X\n\t    _this.left_modPx = 0; // Max width of left modifiers\n\t    _this.right_modPx = 0; // Max width of right modifiers\n\t    _this.voice = null; // The voice that this note is in\n\t    _this.preFormatted = false; // Is this note preFormatted?\n\t    _this.ys = []; // list of y coordinates for each note\n\t    // we need to hold on to these for ties and beams.\n\t\n\t    if (note_struct.align_center) {\n\t      _this.setCenterAlignment(note_struct.align_center);\n\t    }\n\t\n\t    // The render surface.\n\t    _this.stave = null;\n\t    _this.render_options = {\n\t      annotation_spacing: 5,\n\t      stave_padding: Note.STAVEPADDING\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  // Get and set the play note, which is arbitrary data that can be used by an\n\t  // audio player.\n\t\n\t\n\t  _createClass(Note, [{\n\t    key: 'getPlayNote',\n\t    value: function getPlayNote() {\n\t      return this.playNote;\n\t    }\n\t  }, {\n\t    key: 'setPlayNote',\n\t    value: function setPlayNote(note) {\n\t      this.playNote = note;return this;\n\t    }\n\t\n\t    // Don't play notes by default, call them rests. This is also used by things like\n\t    // beams and dots for positioning.\n\t\n\t  }, {\n\t    key: 'isRest',\n\t    value: function isRest() {\n\t      return false;\n\t    }\n\t\n\t    // TODO(0xfe): Why is this method here?\n\t\n\t  }, {\n\t    key: 'addStroke',\n\t    value: function addStroke(index, stroke) {\n\t      stroke.setNote(this);\n\t      stroke.setIndex(index);\n\t      this.modifiers.push(stroke);\n\t      this.setPreFormatted(false);\n\t      return this;\n\t    }\n\t\n\t    // Get and set the target stave.\n\t\n\t  }, {\n\t    key: 'getStave',\n\t    value: function getStave() {\n\t      return this.stave;\n\t    }\n\t  }, {\n\t    key: 'setStave',\n\t    value: function setStave(stave) {\n\t      this.stave = stave;\n\t      this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n\t      this.context = this.stave.context;\n\t      return this;\n\t    }\n\t\n\t    // `Note` is not really a modifier, but is used in\n\t    // a `ModifierContext`.\n\t\n\t  }, {\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Note.CATEGORY;\n\t    }\n\t\n\t    // Set the rendering context for the note.\n\t\n\t  }, {\n\t    key: 'setContext',\n\t    value: function setContext(context) {\n\t      this.context = context;return this;\n\t    }\n\t\n\t    // Get and set spacing to the left and right of the notes.\n\t\n\t  }, {\n\t    key: 'getExtraLeftPx',\n\t    value: function getExtraLeftPx() {\n\t      return this.extraLeftPx;\n\t    }\n\t  }, {\n\t    key: 'getExtraRightPx',\n\t    value: function getExtraRightPx() {\n\t      return this.extraRightPx;\n\t    }\n\t  }, {\n\t    key: 'setExtraLeftPx',\n\t    value: function setExtraLeftPx(x) {\n\t      this.extraLeftPx = x;return this;\n\t    }\n\t  }, {\n\t    key: 'setExtraRightPx',\n\t    value: function setExtraRightPx(x) {\n\t      this.extraRightPx = x;return this;\n\t    }\n\t\n\t    // Returns true if this note has no duration (e.g., bar notes, spacers, etc.)\n\t\n\t  }, {\n\t    key: 'shouldIgnoreTicks',\n\t    value: function shouldIgnoreTicks() {\n\t      return this.ignore_ticks;\n\t    }\n\t\n\t    // Get the stave line number for the note.\n\t\n\t  }, {\n\t    key: 'getLineNumber',\n\t    value: function getLineNumber() {\n\t      return 0;\n\t    }\n\t\n\t    // Get the stave line number for rest.\n\t\n\t  }, {\n\t    key: 'getLineForRest',\n\t    value: function getLineForRest() {\n\t      return 0;\n\t    }\n\t\n\t    // Get the glyph associated with this note.\n\t\n\t  }, {\n\t    key: 'getGlyph',\n\t    value: function getGlyph() {\n\t      return this.glyph;\n\t    }\n\t  }, {\n\t    key: 'getGlyphWidth',\n\t    value: function getGlyphWidth() {\n\t      return this.glyph.getWidth(this.render_options.glyph_font_scale);\n\t    }\n\t\n\t    // Set and get Y positions for this note. Each Y value is associated with\n\t    // an individual pitch/key within the note/chord.\n\t\n\t  }, {\n\t    key: 'setYs',\n\t    value: function setYs(ys) {\n\t      this.ys = ys;return this;\n\t    }\n\t  }, {\n\t    key: 'getYs',\n\t    value: function getYs() {\n\t      if (this.ys.length === 0) {\n\t        throw new _vex.Vex.RERR('NoYValues', 'No Y-values calculated for this note.');\n\t      }\n\t\n\t      return this.ys;\n\t    }\n\t\n\t    // Get the Y position of the space above the stave onto which text can\n\t    // be rendered.\n\t\n\t  }, {\n\t    key: 'getYForTopText',\n\t    value: function getYForTopText(text_line) {\n\t      if (!this.stave) {\n\t        throw new _vex.Vex.RERR('NoStave', 'No stave attached to this note.');\n\t      }\n\t\n\t      return this.stave.getYForTopText(text_line);\n\t    }\n\t\n\t    // Get a `BoundingBox` for this note.\n\t\n\t  }, {\n\t    key: 'getBoundingBox',\n\t    value: function getBoundingBox() {\n\t      return null;\n\t    }\n\t\n\t    // Returns the voice that this note belongs in.\n\t\n\t  }, {\n\t    key: 'getVoice',\n\t    value: function getVoice() {\n\t      if (!this.voice) throw new _vex.Vex.RERR('NoVoice', 'Note has no voice.');\n\t      return this.voice;\n\t    }\n\t\n\t    // Attach this note to `voice`.\n\t\n\t  }, {\n\t    key: 'setVoice',\n\t    value: function setVoice(voice) {\n\t      this.voice = voice;\n\t      this.preFormatted = false;\n\t      return this;\n\t    }\n\t\n\t    // Get and set the `TickContext` for this note.\n\t\n\t  }, {\n\t    key: 'getTickContext',\n\t    value: function getTickContext() {\n\t      return this.tickContext;\n\t    }\n\t  }, {\n\t    key: 'setTickContext',\n\t    value: function setTickContext(tc) {\n\t      this.tickContext = tc;\n\t      this.preFormatted = false;\n\t      return this;\n\t    }\n\t\n\t    // Accessors for the note type.\n\t\n\t  }, {\n\t    key: 'getDuration',\n\t    value: function getDuration() {\n\t      return this.duration;\n\t    }\n\t  }, {\n\t    key: 'isDotted',\n\t    value: function isDotted() {\n\t      return this.dots > 0;\n\t    }\n\t  }, {\n\t    key: 'hasStem',\n\t    value: function hasStem() {\n\t      return false;\n\t    }\n\t  }, {\n\t    key: 'getDots',\n\t    value: function getDots() {\n\t      return this.dots;\n\t    }\n\t  }, {\n\t    key: 'getNoteType',\n\t    value: function getNoteType() {\n\t      return this.noteType;\n\t    }\n\t  }, {\n\t    key: 'setBeam',\n\t    value: function setBeam() {\n\t      return this;\n\t    } // ignore parameters\n\t\n\t    // Attach this note to a modifier context.\n\t\n\t  }, {\n\t    key: 'setModifierContext',\n\t    value: function setModifierContext(mc) {\n\t      this.modifierContext = mc;return this;\n\t    }\n\t\n\t    // Attach a modifier to this note.\n\t\n\t  }, {\n\t    key: 'addModifier',\n\t    value: function addModifier(modifier) {\n\t      var index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\t\n\t      modifier.setNote(this);\n\t      modifier.setIndex(index);\n\t      this.modifiers.push(modifier);\n\t      this.setPreFormatted(false);\n\t      return this;\n\t    }\n\t\n\t    // Get the coordinates for where modifiers begin.\n\t\n\t  }, {\n\t    key: 'getModifierStartXY',\n\t    value: function getModifierStartXY() {\n\t      if (!this.preFormatted) {\n\t        throw new _vex.Vex.RERR('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n\t      }\n\t\n\t      return {\n\t        x: this.getAbsoluteX(),\n\t        y: this.ys[0]\n\t      };\n\t    }\n\t\n\t    // Get bounds and metrics for this note.\n\t    //\n\t    // Returns a struct with fields:\n\t    // `width`: The total width of the note (including modifiers.)\n\t    // `noteWidth`: The width of the note head only.\n\t    // `left_shift`: The horizontal displacement of the note.\n\t    // `modLeftPx`: Start `X` for left modifiers.\n\t    // `modRightPx`: Start `X` for right modifiers.\n\t    // `extraLeftPx`: Extra space on left of note.\n\t    // `extraRightPx`: Extra space on right of note.\n\t\n\t  }, {\n\t    key: 'getMetrics',\n\t    value: function getMetrics() {\n\t      if (!this.preFormatted) {\n\t        throw new _vex.Vex.RERR('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n\t      }\n\t\n\t      var modLeftPx = 0;\n\t      var modRightPx = 0;\n\t      if (this.modifierContext != null) {\n\t        modLeftPx = this.modifierContext.state.left_shift;\n\t        modRightPx = this.modifierContext.state.right_shift;\n\t      }\n\t\n\t      var width = this.getWidth();\n\t      return {\n\t        width: width,\n\t        noteWidth: width - modLeftPx - modRightPx - this.extraLeftPx - this.extraRightPx,\n\t        left_shift: this.x_shift, // TODO(0xfe): Make style consistent\n\t\n\t        // Modifiers, accidentals etc.\n\t        modLeftPx: modLeftPx,\n\t        modRightPx: modRightPx,\n\t\n\t        // Displaced note head on left or right.\n\t        extraLeftPx: this.extraLeftPx,\n\t        extraRightPx: this.extraRightPx\n\t      };\n\t    }\n\t\n\t    // Get and set width of note. Used by the formatter for positioning.\n\t\n\t  }, {\n\t    key: 'setWidth',\n\t    value: function setWidth(width) {\n\t      this.width = width;\n\t    }\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      if (!this.preFormatted) {\n\t        throw new _vex.Vex.RERR('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n\t      }\n\t\n\t      return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n\t    }\n\t\n\t    // Displace note by `x` pixels. Used by the formatter.\n\t\n\t  }, {\n\t    key: 'setXShift',\n\t    value: function setXShift(x) {\n\t      this.x_shift = x;return this;\n\t    }\n\t  }, {\n\t    key: 'getXShift',\n\t    value: function getXShift() {\n\t      return this.x_shift;\n\t    }\n\t\n\t    // Get `X` position of this tick context.\n\t\n\t  }, {\n\t    key: 'getX',\n\t    value: function getX() {\n\t      if (!this.tickContext) {\n\t        throw new _vex.Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');\n\t      }\n\t\n\t      return this.tickContext.getX() + this.x_shift;\n\t    }\n\t\n\t    // Get the absolute `X` position of this note's tick context. This\n\t    // excludes x_shift, so you'll need to factor it in if you're\n\t    // looking for the post-formatted x-position.\n\t\n\t  }, {\n\t    key: 'getAbsoluteX',\n\t    value: function getAbsoluteX() {\n\t      if (!this.tickContext) {\n\t        throw new _vex.Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');\n\t      }\n\t\n\t      // Position note to left edge of tick context.\n\t      var x = this.tickContext.getX();\n\t      if (this.stave) {\n\t        x += this.stave.getNoteStartX() + this.render_options.stave_padding;\n\t      }\n\t\n\t      if (this.isCenterAligned()) {\n\t        x += this.getCenterXShift();\n\t      }\n\t\n\t      return x;\n\t    }\n\t  }, {\n\t    key: 'setPreFormatted',\n\t    value: function setPreFormatted(value) {\n\t      this.preFormatted = value;\n\t\n\t      // Maintain the width of left and right modifiers in pixels.\n\t      if (this.preFormatted) {\n\t        var extra = this.tickContext.getExtraPx();\n\t        this.left_modPx = Math.max(this.left_modPx, extra.left);\n\t        this.right_modPx = Math.max(this.right_modPx, extra.right);\n\t      }\n\t    }\n\t  }]);\n\n\t  return Note;\n\t}(_tickable.Tickable);\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Tickable = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _fraction = __webpack_require__(3);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// The tickable interface. Tickables are things that sit on a score and\n\t// have a duration, i.e., they occupy space in the musical rendering dimension.\n\t\n\tvar Tickable = exports.Tickable = function (_Element) {\n\t  _inherits(Tickable, _Element);\n\t\n\t  function Tickable() {\n\t    _classCallCheck(this, Tickable);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Tickable).call(this));\n\t\n\t    _this.setAttribute('type', 'Tickable');\n\t\n\t    // These properties represent the duration of\n\t    // this tickable element.\n\t    _this.ticks = new _fraction.Fraction(0, 1);\n\t    _this.intrinsicTicks = 0;\n\t    _this.tickMultiplier = new _fraction.Fraction(1, 1);\n\t\n\t    _this.width = 0;\n\t    _this.x_shift = 0; // Shift from tick context\n\t    _this.voice = null;\n\t    _this.tickContext = null;\n\t    _this.modifierContext = null;\n\t    _this.modifiers = [];\n\t    _this.preFormatted = false;\n\t    _this.postFormatted = false;\n\t    _this.tuplet = null;\n\t    _this.tupletStack = [];\n\t\n\t    _this.align_center = false;\n\t    _this.center_x_shift = 0; // Shift from tick context if center aligned\n\t\n\t    // This flag tells the formatter to ignore this tickable during\n\t    // formatting and justification. It is set by tickables such as BarNote.\n\t    _this.ignore_ticks = false;\n\t\n\t    // This is a space for an external formatting class or function to maintain\n\t    // metrics.\n\t    _this.formatterMetrics = {\n\t      // The freedom of a tickable is the distance it can move without colliding\n\t      // with neighboring elements. A formatter can set these values during its\n\t      // formatting pass, which a different formatter can then use to fine tune.\n\t      freedom: { left: 0, right: 0 },\n\t\n\t      // The simplified rational duration of this tick as a string. It can be\n\t      // used as an index to a map or hashtable.\n\t      duration: '',\n\t\n\t      // The number of formatting iterations undergone.\n\t      iterations: 0,\n\t\n\t      // The space in pixels allocated by this formatter, along with the mean space\n\t      // for tickables of this duration, and the deviation from the mean.\n\t      space: {\n\t        used: 0,\n\t        mean: 0,\n\t        deviation: 0\n\t      }\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tickable, [{\n\t    key: 'reset',\n\t    value: function reset() {\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getTicks',\n\t    value: function getTicks() {\n\t      return this.ticks;\n\t    }\n\t  }, {\n\t    key: 'shouldIgnoreTicks',\n\t    value: function shouldIgnoreTicks() {\n\t      return this.ignore_ticks;\n\t    }\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      return this.width;\n\t    }\n\t  }, {\n\t    key: 'getFormatterMetrics',\n\t    value: function getFormatterMetrics() {\n\t      return this.formatterMetrics;\n\t    }\n\t  }, {\n\t    key: 'setXShift',\n\t    value: function setXShift(x) {\n\t      this.x_shift = x;\n\t    }\n\t  }, {\n\t    key: 'getCenterXShift',\n\t    value: function getCenterXShift() {\n\t      if (this.isCenterAligned()) {\n\t        return this.center_x_shift;\n\t      }\n\t\n\t      return 0;\n\t    }\n\t  }, {\n\t    key: 'isCenterAligned',\n\t    value: function isCenterAligned() {\n\t      return this.align_center;\n\t    }\n\t  }, {\n\t    key: 'setCenterAlignment',\n\t    value: function setCenterAlignment(align_center) {\n\t      this.align_center = align_center;\n\t      return this;\n\t    }\n\t\n\t    // Every tickable must be associated with a voice. This allows formatters\n\t    // and preFormatter to associate them with the right modifierContexts.\n\t\n\t  }, {\n\t    key: 'getVoice',\n\t    value: function getVoice() {\n\t      if (!this.voice) throw new _vex.Vex.RERR('NoVoice', 'Tickable has no voice.');\n\t      return this.voice;\n\t    }\n\t  }, {\n\t    key: 'setVoice',\n\t    value: function setVoice(voice) {\n\t      this.voice = voice;\n\t    }\n\t  }, {\n\t    key: 'getTuplet',\n\t    value: function getTuplet() {\n\t      return this.tuplet;\n\t    }\n\t\n\t    /*\n\t     * resetTuplet\n\t     * @param tuplet -- the specific tuplet to reset\n\t     *   if this is not provided, all tuplets are reset.\n\t     * @returns this\n\t     *\n\t     * Removes any prior tuplets from the tick calculation and\n\t     * resets the intrinsic tick value to\n\t     */\n\t\n\t  }, {\n\t    key: 'resetTuplet',\n\t    value: function resetTuplet(tuplet) {\n\t      var noteCount = void 0;\n\t      var notesOccupied = void 0;\n\t      if (tuplet) {\n\t        var i = this.tupletStack.indexOf(tuplet);\n\t        if (i !== -1) {\n\t          this.tupletStack.splice(i, 1);\n\t          noteCount = tuplet.getNoteCount();\n\t          notesOccupied = tuplet.getNotesOccupied();\n\t\n\t          // Revert old multiplier by inverting numerator & denom.:\n\t          this.applyTickMultiplier(noteCount, notesOccupied);\n\t        }\n\t        return this;\n\t      }\n\t\n\t      while (this.tupletStack.length) {\n\t        tuplet = this.tupletStack.pop();\n\t        noteCount = tuplet.getNoteCount();\n\t        notesOccupied = tuplet.getNotesOccupied();\n\t\n\t        // Revert old multiplier by inverting numerator & denom.:\n\t        this.applyTickMultiplier(noteCount, notesOccupied);\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setTuplet',\n\t    value: function setTuplet(tuplet) {\n\t      // Attach to new tuplet\n\t\n\t      if (tuplet) {\n\t        this.tupletStack.push(tuplet);\n\t\n\t        var noteCount = tuplet.getNoteCount();\n\t        var notesOccupied = tuplet.getNotesOccupied();\n\t\n\t        this.applyTickMultiplier(notesOccupied, noteCount);\n\t      }\n\t\n\t      this.tuplet = tuplet;\n\t\n\t      return this;\n\t    }\n\t\n\t    /** optional, if tickable has modifiers **/\n\t\n\t  }, {\n\t    key: 'addToModifierContext',\n\t    value: function addToModifierContext(mc) {\n\t      this.modifierContext = mc;\n\t      // Add modifiers to modifier context (if any)\n\t      this.preFormatted = false;\n\t    }\n\t\n\t    /** optional, if tickable has modifiers **/\n\t\n\t  }, {\n\t    key: 'addModifier',\n\t    value: function addModifier(mod) {\n\t      this.modifiers.push(mod);\n\t      this.preFormatted = false;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setTickContext',\n\t    value: function setTickContext(tc) {\n\t      this.tickContext = tc;\n\t      this.preFormatted = false;\n\t    }\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      if (this.preFormatted) return;\n\t\n\t      this.width = 0;\n\t      if (this.modifierContext) {\n\t        this.modifierContext.preFormat();\n\t        this.width += this.modifierContext.getWidth();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'postFormat',\n\t    value: function postFormat() {\n\t      if (this.postFormatted) return this;\n\t      this.postFormatted = true;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getIntrinsicTicks',\n\t    value: function getIntrinsicTicks() {\n\t      return this.intrinsicTicks;\n\t    }\n\t  }, {\n\t    key: 'setIntrinsicTicks',\n\t    value: function setIntrinsicTicks(intrinsicTicks) {\n\t      this.intrinsicTicks = intrinsicTicks;\n\t      this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n\t    }\n\t  }, {\n\t    key: 'getTickMultiplier',\n\t    value: function getTickMultiplier() {\n\t      return this.tickMultiplier;\n\t    }\n\t  }, {\n\t    key: 'applyTickMultiplier',\n\t    value: function applyTickMultiplier(numerator, denominator) {\n\t      this.tickMultiplier.multiply(numerator, denominator);\n\t      this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n\t    }\n\t  }, {\n\t    key: 'setDuration',\n\t    value: function setDuration(duration) {\n\t      var ticks = duration.numerator * (_tables.Flow.RESOLUTION / duration.denominator);\n\t      this.ticks = this.tickMultiplier.clone().multiply(ticks);\n\t      this.intrinsicTicks = this.ticks.value();\n\t    }\n\t  }]);\n\n\t  return Tickable;\n\t}(_element.Element);\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.StemmableNote = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _stem = __webpack_require__(17);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tvar _note = __webpack_require__(22);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// `StemmableNote` is an abstract interface for notes with optional stems.\n\t// Examples of stemmable notes are `StaveNote` and `TabNote`\n\t\n\tvar StemmableNote = exports.StemmableNote = function (_Note) {\n\t  _inherits(StemmableNote, _Note);\n\t\n\t  function StemmableNote(note_struct) {\n\t    _classCallCheck(this, StemmableNote);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StemmableNote).call(this, note_struct));\n\t\n\t    _this.setAttribute('type', 'StemmableNote');\n\t\n\t    _this.stem = null;\n\t    _this.stemExtensionOverride = null;\n\t    _this.beam = null;\n\t    return _this;\n\t  }\n\t\n\t  // Get and set the note's `Stem`\n\t\n\t\n\t  _createClass(StemmableNote, [{\n\t    key: 'getStem',\n\t    value: function getStem() {\n\t      return this.stem;\n\t    }\n\t  }, {\n\t    key: 'setStem',\n\t    value: function setStem(stem) {\n\t      this.stem = stem;return this;\n\t    }\n\t\n\t    // Builds and sets a new stem\n\t\n\t  }, {\n\t    key: 'buildStem',\n\t    value: function buildStem() {\n\t      var stem = new _stem.Stem();\n\t      this.setStem(stem);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'buildFlag',\n\t    value: function buildFlag() {\n\t      var glyph = this.glyph;\n\t      var beam = this.beam;\n\t\n\t      var shouldRenderFlag = beam === null;\n\t\n\t      if (glyph && glyph.flag && shouldRenderFlag) {\n\t        var flagCode = this.getStemDirection() === _stem.Stem.DOWN ? glyph.code_flag_downstem : glyph.code_flag_upstem;\n\t\n\t        this.flag = new _glyph.Glyph(flagCode, this.render_options.glyph_font_scale);\n\t      }\n\t    }\n\t\n\t    // Get the full length of stem\n\t\n\t  }, {\n\t    key: 'getStemLength',\n\t    value: function getStemLength() {\n\t      return _stem.Stem.HEIGHT + this.getStemExtension();\n\t    }\n\t\n\t    // Get the number of beams for this duration\n\t\n\t  }, {\n\t    key: 'getBeamCount',\n\t    value: function getBeamCount() {\n\t      var glyph = this.getGlyph();\n\t\n\t      if (glyph) {\n\t        return glyph.beam_count;\n\t      } else {\n\t        return 0;\n\t      }\n\t    }\n\t\n\t    // Get the minimum length of stem\n\t\n\t  }, {\n\t    key: 'getStemMinumumLength',\n\t    value: function getStemMinumumLength() {\n\t      var frac = _tables.Flow.durationToFraction(this.duration);\n\t      var length = frac.value() <= 1 ? 0 : 20;\n\t      // if note is flagged, cannot shorten beam\n\t      switch (this.duration) {\n\t        case '8':\n\t          if (this.beam == null) length = 35;\n\t          break;\n\t        case '16':\n\t          length = this.beam == null ? 35 : 25;\n\t          break;\n\t        case '32':\n\t          length = this.beam == null ? 45 : 35;\n\t          break;\n\t        case '64':\n\t          length = this.beam == null ? 50 : 40;\n\t          break;\n\t        case '128':\n\t          length = this.beam == null ? 55 : 45;\n\t          break;\n\t        default:\n\t          break;\n\t      }\n\t      return length;\n\t    }\n\t\n\t    // Get/set the direction of the stem\n\t\n\t  }, {\n\t    key: 'getStemDirection',\n\t    value: function getStemDirection() {\n\t      return this.stem_direction;\n\t    }\n\t  }, {\n\t    key: 'setStemDirection',\n\t    value: function setStemDirection(direction) {\n\t      if (!direction) direction = _stem.Stem.UP;\n\t      if (direction !== _stem.Stem.UP && direction !== _stem.Stem.DOWN) {\n\t        throw new _vex.Vex.RERR('BadArgument', 'Invalid stem direction: ' + direction);\n\t      }\n\t\n\t      this.stem_direction = direction;\n\t      if (this.stem) {\n\t        this.stem.setDirection(direction);\n\t        this.stem.setExtension(this.getStemExtension());\n\t      }\n\t\n\t      this.reset();\n\t      if (this.flag) {\n\t        this.buildFlag();\n\t      }\n\t\n\t      this.beam = null;\n\t      if (this.preFormatted) {\n\t        this.preFormat();\n\t      }\n\t      return this;\n\t    }\n\t\n\t    // Get the `x` coordinate of the stem\n\t\n\t  }, {\n\t    key: 'getStemX',\n\t    value: function getStemX() {\n\t      var x_begin = this.getAbsoluteX() + this.x_shift;\n\t      var x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\n\t      var stem_x = this.stem_direction === _stem.Stem.DOWN ? x_begin : x_end;\n\t      return stem_x;\n\t    }\n\t\n\t    // Get the `x` coordinate for the center of the glyph.\n\t    // Used for `TabNote` stems and stemlets over rests\n\t\n\t  }, {\n\t    key: 'getCenterGlyphX',\n\t    value: function getCenterGlyphX() {\n\t      return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;\n\t    }\n\t\n\t    // Get the stem extension for the current duration\n\t\n\t  }, {\n\t    key: 'getStemExtension',\n\t    value: function getStemExtension() {\n\t      var glyph = this.getGlyph();\n\t\n\t      if (this.stemExtensionOverride != null) {\n\t        return this.stemExtensionOverride;\n\t      }\n\t\n\t      if (glyph) {\n\t        return this.getStemDirection() === 1 ? glyph.stem_up_extension : glyph.stem_down_extension;\n\t      }\n\t\n\t      return 0;\n\t    }\n\t\n\t    // Set the stem length to a specific. Will override the default length.\n\t\n\t  }, {\n\t    key: 'setStemLength',\n\t    value: function setStemLength(height) {\n\t      this.stemExtensionOverride = height - _stem.Stem.HEIGHT;\n\t      return this;\n\t    }\n\t\n\t    // Get the top and bottom `y` values of the stem.\n\t\n\t  }, {\n\t    key: 'getStemExtents',\n\t    value: function getStemExtents() {\n\t      return this.stem.getExtents();\n\t    }\n\t\n\t    // Sets the current note's beam\n\t\n\t  }, {\n\t    key: 'setBeam',\n\t    value: function setBeam(beam) {\n\t      this.beam = beam;return this;\n\t    }\n\t\n\t    // Get the `y` value for the top/bottom modifiers at a specific `textLine`\n\t\n\t  }, {\n\t    key: 'getYForTopText',\n\t    value: function getYForTopText(textLine) {\n\t      var extents = this.getStemExtents();\n\t      if (this.hasStem()) {\n\t        return Math.min(this.stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));\n\t      } else {\n\t        return this.stave.getYForTopText(textLine);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getYForBottomText',\n\t    value: function getYForBottomText(textLine) {\n\t      var extents = this.getStemExtents();\n\t      if (this.hasStem()) {\n\t        return Math.max(this.stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);\n\t      } else {\n\t        return this.stave.getYForBottomText(textLine);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'hasFlag',\n\t    value: function hasFlag() {\n\t      return _tables.Flow.durationToGlyph(this.duration).flag && !this.beam;\n\t    }\n\t\n\t    // Post format the note\n\t\n\t  }, {\n\t    key: 'postFormat',\n\t    value: function postFormat() {\n\t      if (this.beam) this.beam.postFormat();\n\t\n\t      this.postFormatted = true;\n\t\n\t      return this;\n\t    }\n\t\n\t    // Render the stem onto the canvas\n\t\n\t  }, {\n\t    key: 'drawStem',\n\t    value: function drawStem(stem_struct) {\n\t      this.checkContext();\n\t      this.setRendered();\n\t\n\t      this.setStem(new _stem.Stem(stem_struct));\n\t      this.stem.setContext(this.context).draw();\n\t    }\n\t  }]);\n\n\t  return StemmableNote;\n\t}(_note.Note);\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Modifier = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// `Modifier` is an abstract interface for notational elements that modify\n\t// a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n\t//\n\t// For a `Modifier` instance to be positioned correctly, it must be part of\n\t// a `ModifierContext`. All modifiers in the same context are rendered relative to\n\t// one another.\n\t//\n\t// Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n\t// in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n\t// `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n\t// function L(...args) { if (Modifier.DEBUG) Vex.L('Vex.Flow.Modifier', args); }\n\t\n\tvar Modifier = exports.Modifier = function (_Element) {\n\t  _inherits(Modifier, _Element);\n\t\n\t  _createClass(Modifier, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'none';\n\t    }\n\t\n\t    // Modifiers can be positioned almost anywhere, relative to a note.\n\t\n\t  }, {\n\t    key: 'Position',\n\t    get: function get() {\n\t      return {\n\t        LEFT: 1,\n\t        RIGHT: 2,\n\t        ABOVE: 3,\n\t        BELOW: 4\n\t      };\n\t    }\n\t  }, {\n\t    key: 'PositionString',\n\t    get: function get() {\n\t      return {\n\t        above: Modifier.Position.ABOVE,\n\t        below: Modifier.Position.BELOW,\n\t        left: Modifier.Position.LEFT,\n\t        right: Modifier.Position.RIGHT\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function Modifier() {\n\t    _classCallCheck(this, Modifier);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Modifier).call(this));\n\t\n\t    _this.setAttribute('type', 'Modifier');\n\t\n\t    _this.width = 0;\n\t\n\t    // Modifiers are attached to a note and an index. An index is a\n\t    // specific head in a chord.\n\t    _this.note = null;\n\t    _this.index = null;\n\t\n\t    // The `text_line` is reserved space above or below a stave.\n\t    _this.text_line = 0;\n\t    _this.position = Modifier.Position.LEFT;\n\t    _this.modifier_context = null;\n\t    _this.x_shift = 0;\n\t    _this.y_shift = 0;\n\t    _this.spacingFromNextModifier = 0;\n\t    return _this;\n\t  }\n\t\n\t  // Every modifier has a category. The `ModifierContext` uses this to determine\n\t  // the type and order of the modifiers.\n\t\n\t\n\t  _createClass(Modifier, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Modifier.CATEGORY;\n\t    }\n\t\n\t    // Get and set modifier widths.\n\t\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      return this.width;\n\t    }\n\t  }, {\n\t    key: 'setWidth',\n\t    value: function setWidth(width) {\n\t      this.width = width;return this;\n\t    }\n\t\n\t    // Get and set attached note (`StaveNote`, `TabNote`, etc.)\n\t\n\t  }, {\n\t    key: 'getNote',\n\t    value: function getNote() {\n\t      return this.note;\n\t    }\n\t  }, {\n\t    key: 'setNote',\n\t    value: function setNote(note) {\n\t      this.note = note;return this;\n\t    }\n\t\n\t    // Get and set note index, which is a specific note in a chord.\n\t\n\t  }, {\n\t    key: 'getIndex',\n\t    value: function getIndex() {\n\t      return this.index;\n\t    }\n\t  }, {\n\t    key: 'setIndex',\n\t    value: function setIndex(index) {\n\t      this.index = index;return this;\n\t    }\n\t\n\t    // Every modifier must be part of a `ModifierContext`.\n\t\n\t  }, {\n\t    key: 'getModifierContext',\n\t    value: function getModifierContext() {\n\t      return this.modifier_context;\n\t    }\n\t  }, {\n\t    key: 'setModifierContext',\n\t    value: function setModifierContext(c) {\n\t      this.modifier_context = c;return this;\n\t    }\n\t\n\t    // Get and set articulation position.\n\t\n\t  }, {\n\t    key: 'getPosition',\n\t    value: function getPosition() {\n\t      return this.position;\n\t    }\n\t  }, {\n\t    key: 'setPosition',\n\t    value: function setPosition(position) {\n\t      this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n\t      return this;\n\t    }\n\t\n\t    // Set the `text_line` for the modifier.\n\t\n\t  }, {\n\t    key: 'setTextLine',\n\t    value: function setTextLine(line) {\n\t      this.text_line = line;return this;\n\t    }\n\t\n\t    // Shift modifier down `y` pixels. Negative values shift up.\n\t\n\t  }, {\n\t    key: 'setYShift',\n\t    value: function setYShift(y) {\n\t      this.y_shift = y;return this;\n\t    }\n\t  }, {\n\t    key: 'setSpacingFromNextModifier',\n\t    value: function setSpacingFromNextModifier(x) {\n\t      this.spacingFromNextModifier = x;\n\t    }\n\t  }, {\n\t    key: 'getSpacingFromNextModifier',\n\t    value: function getSpacingFromNextModifier() {\n\t      return this.spacingFromNextModifier;\n\t    }\n\t\n\t    // Shift modifier `x` pixels in the direction of the modifier. Negative values\n\t    // shift reverse.\n\t\n\t  }, {\n\t    key: 'setXShift',\n\t    value: function setXShift(x) {\n\t      this.x_shift = 0;\n\t      if (this.position === Modifier.Position.LEFT) {\n\t        this.x_shift -= x;\n\t      } else {\n\t        this.x_shift += x;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getXShift',\n\t    value: function getXShift() {\n\t      return this.x_shift;\n\t    }\n\t\n\t    // Render the modifier onto the canvas.\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      throw new _vex.Vex.RERR('MethodNotImplemented', 'draw() not implemented for this modifier.');\n\t    }\n\t  }]);\n\n\t  return Modifier;\n\t}(_element.Element);\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Dot = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // VexFlow - Music Engraving for HTML5\n\t// Copyright Mohit Muthanna 2010\n\t//\n\t// This class implements dot modifiers for notes.\n\t\n\tvar Dot = exports.Dot = function (_Modifier) {\n\t  _inherits(Dot, _Modifier);\n\t\n\t  _createClass(Dot, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // Arrange dots inside a ModifierContext.\n\t    value: function format(dots, state) {\n\t      var right_shift = state.right_shift;\n\t      var dot_spacing = 1;\n\t\n\t      if (!dots || dots.length === 0) return false;\n\t\n\t      var dot_list = [];\n\t      for (var i = 0; i < dots.length; ++i) {\n\t        var dot = dots[i];\n\t        var note = dot.getNote();\n\t\n\t        var props = void 0;\n\t        var shift = void 0;\n\t        // Only StaveNote has .getKeyProps()\n\t        if (typeof note.getKeyProps === 'function') {\n\t          props = note.getKeyProps()[dot.getIndex()];\n\t          shift = props.displaced ? note.getExtraRightPx() : 0;\n\t        } else {\n\t          // Else it's a TabNote\n\t          props = { line: 0.5 }; // Shim key props for dot placement\n\t          shift = 0;\n\t        }\n\t\n\t        dot_list.push({ line: props.line, shift: shift, note: note, dot: dot });\n\t      }\n\t\n\t      // Sort dots by line number.\n\t      dot_list.sort(function (a, b) {\n\t        return b.line - a.line;\n\t      });\n\t\n\t      var dot_shift = right_shift;\n\t      var x_width = 0;\n\t      var last_line = null;\n\t      var last_note = null;\n\t      var prev_dotted_space = null;\n\t      var half_shiftY = 0;\n\t\n\t      for (var _i = 0; _i < dot_list.length; ++_i) {\n\t        var _dot_list$_i = dot_list[_i];\n\t        var _dot = _dot_list$_i.dot;\n\t        var _note = _dot_list$_i.note;\n\t        var _shift = _dot_list$_i.shift;\n\t        var line = _dot_list$_i.line;\n\t\n\t        // Reset the position of the dot every line.\n\t\n\t        if (line !== last_line || _note !== last_note) {\n\t          dot_shift = _shift;\n\t        }\n\t\n\t        if (!_note.isRest() && line !== last_line) {\n\t          if (Math.abs(line % 1) === 0.5) {\n\t            // note is on a space, so no dot shift\n\t            half_shiftY = 0;\n\t          } else if (!_note.isRest()) {\n\t            // note is on a line, so shift dot to space above the line\n\t            half_shiftY = 0.5;\n\t            if (last_note != null && !last_note.isRest() && last_line - line === 0.5) {\n\t              // previous note on a space, so shift dot to space below the line\n\t              half_shiftY = -0.5;\n\t            } else if (line + half_shiftY === prev_dotted_space) {\n\t              // previous space is dotted, so shift dot to space below the line\n\t              half_shiftY = -0.5;\n\t            }\n\t          }\n\t        }\n\t\n\t        // convert half_shiftY to a multiplier for dots.draw()\n\t        _dot.dot_shiftY = -half_shiftY;\n\t        prev_dotted_space = line + half_shiftY;\n\t\n\t        _dot.setXShift(dot_shift);\n\t        dot_shift += _dot.getWidth() + dot_spacing; // spacing\n\t        x_width = dot_shift > x_width ? dot_shift : x_width;\n\t        last_line = line;\n\t        last_note = _note;\n\t      }\n\t\n\t      // Update state.\n\t      state.right_shift += x_width;\n\t      return true;\n\t    }\n\t\n\t    /**\r\n\t     * @constructor\r\n\t     */\n\t\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'dots';\n\t    }\n\t  }]);\n\t\n\t  function Dot() {\n\t    _classCallCheck(this, Dot);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Dot).call(this));\n\t\n\t    _this.setAttribute('type', 'Dot');\n\t\n\t    _this.note = null;\n\t    _this.index = null;\n\t    _this.position = _modifier.Modifier.Position.RIGHT;\n\t\n\t    _this.radius = 2;\n\t    _this.setWidth(5);\n\t    _this.dot_shiftY = 0;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Dot, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Dot.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'setNote',\n\t    value: function setNote(note) {\n\t      this.note = note;\n\t\n\t      if (this.note.getCategory() === 'gracenotes') {\n\t        this.radius *= 0.50;\n\t        this.setWidth(3);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'setDotShiftY',\n\t    value: function setDotShiftY(y) {\n\t      this.dot_shiftY = y;return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      this.setRendered();\n\t\n\t      if (!this.note || this.index === null) {\n\t        throw new _vex.Vex.RERR('NoAttachedNote', \"Can't draw dot without a note and index.\");\n\t      }\n\t\n\t      var lineSpace = this.note.stave.options.spacing_between_lines_px;\n\t\n\t      var start = this.note.getModifierStartXY(this.position, this.index);\n\t\n\t      // Set the starting y coordinate to the base of the stem for TabNotes\n\t      if (this.note.getCategory() === 'tabnotes') {\n\t        start.y = this.note.getStemExtents().baseY;\n\t      }\n\t\n\t      var x = start.x + this.x_shift + this.width - this.radius;\n\t      var y = start.y + this.y_shift + this.dot_shiftY * lineSpace;\n\t      var ctx = this.context;\n\t\n\t      ctx.beginPath();\n\t      ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n\t      ctx.fill();\n\t    }\n\t  }]);\n\n\t  return Dot;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ModifierContext = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This class implements various types of modifiers to notes (e.g. bends,\n\t// fingering positions etc.)\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _stavenote = __webpack_require__(20);\n\t\n\tvar _dot = __webpack_require__(26);\n\t\n\tvar _frethandfinger = __webpack_require__(28);\n\t\n\tvar _accidental = __webpack_require__(29);\n\t\n\tvar _notesubgroup = __webpack_require__(31);\n\t\n\tvar _gracenotegroup = __webpack_require__(32);\n\t\n\tvar _strokes = __webpack_require__(35);\n\t\n\tvar _stringnumber = __webpack_require__(36);\n\t\n\tvar _articulation = __webpack_require__(37);\n\t\n\tvar _ornament = __webpack_require__(38);\n\t\n\tvar _annotation = __webpack_require__(40);\n\t\n\tvar _bend = __webpack_require__(41);\n\t\n\tvar _vibrato = __webpack_require__(42);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (ModifierContext.DEBUG) _vex.Vex.L('Vex.Flow.ModifierContext', args);\n\t}\n\t\n\tvar ModifierContext = exports.ModifierContext = function () {\n\t  function ModifierContext() {\n\t    _classCallCheck(this, ModifierContext);\n\t\n\t    // Current modifiers\n\t    this.modifiers = {};\n\t\n\t    // Formatting data.\n\t    this.preFormatted = false;\n\t    this.postFormatted = false;\n\t    this.width = 0;\n\t    this.spacing = 0;\n\t    this.state = {\n\t      left_shift: 0,\n\t      right_shift: 0,\n\t      text_line: 0,\n\t      top_text_line: 0\n\t    };\n\t\n\t    // Add new modifiers to this array. The ordering is significant -- lower\n\t    // modifiers are formatted and rendered before higher ones.\n\t    this.PREFORMAT = [_stavenote.StaveNote, _dot.Dot, _frethandfinger.FretHandFinger, _accidental.Accidental, _gracenotegroup.GraceNoteGroup, _notesubgroup.NoteSubGroup, _strokes.Stroke, _stringnumber.StringNumber, _articulation.Articulation, _ornament.Ornament, _annotation.Annotation, _bend.Bend, _vibrato.Vibrato];\n\t\n\t    // If post-formatting is required for an element, add it to this array.\n\t    this.POSTFORMAT = [_stavenote.StaveNote];\n\t  }\n\t\n\t  _createClass(ModifierContext, [{\n\t    key: 'addModifier',\n\t    value: function addModifier(modifier) {\n\t      var type = modifier.getCategory();\n\t      if (!this.modifiers[type]) this.modifiers[type] = [];\n\t      this.modifiers[type].push(modifier);\n\t      modifier.setModifierContext(this);\n\t      this.preFormatted = false;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getModifiers',\n\t    value: function getModifiers(type) {\n\t      return this.modifiers[type];\n\t    }\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      return this.width;\n\t    }\n\t  }, {\n\t    key: 'getExtraLeftPx',\n\t    value: function getExtraLeftPx() {\n\t      return this.state.left_shift;\n\t    }\n\t  }, {\n\t    key: 'getExtraRightPx',\n\t    value: function getExtraRightPx() {\n\t      return this.state.right_shift;\n\t    }\n\t  }, {\n\t    key: 'getState',\n\t    value: function getState() {\n\t      return this.state;\n\t    }\n\t  }, {\n\t    key: 'getMetrics',\n\t    value: function getMetrics() {\n\t      if (!this.formatted) {\n\t        throw new _vex.Vex.RERR('UnformattedModifier', 'Unformatted modifier has no metrics.');\n\t      }\n\t\n\t      return {\n\t        width: this.state.left_shift + this.state.right_shift + this.spacing,\n\t        spacing: this.spacing,\n\t        extra_left_px: this.state.left_shift,\n\t        extra_right_px: this.state.right_shift\n\t      };\n\t    }\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      var _this = this;\n\t\n\t      if (this.preFormatted) return;\n\t      this.PREFORMAT.forEach(function (modifier) {\n\t        L('Preformatting ModifierContext: ', modifier.CATEGORY);\n\t        modifier.format(_this.getModifiers(modifier.CATEGORY), _this.state, _this);\n\t      });\n\t\n\t      // Update width of this modifier context\n\t      this.width = this.state.left_shift + this.state.right_shift;\n\t      this.preFormatted = true;\n\t    }\n\t  }, {\n\t    key: 'postFormat',\n\t    value: function postFormat() {\n\t      var _this2 = this;\n\t\n\t      if (this.postFormatted) return;\n\t      this.POSTFORMAT.forEach(function (modifier) {\n\t        L('Postformatting ModifierContext: ', modifier.CATEGORY);\n\t        modifier.postFormat(_this2.getModifiers(modifier.CATEGORY), _this2);\n\t      });\n\t    }\n\t  }]);\n\n\t  return ModifierContext;\n\t}();\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.FretHandFinger = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // VexFlow - Music Engraving for HTML5\n\t// Copyright Mohit Muthanna 2010\n\t// Author Larry Kuhns 2013\n\t// Class to draws string numbers into the notation.\n\t\n\t/**\r\n\t * @constructor\r\n\t */\n\tvar FretHandFinger = exports.FretHandFinger = function (_Modifier) {\n\t  _inherits(FretHandFinger, _Modifier);\n\t\n\t  _createClass(FretHandFinger, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // Arrange fingerings inside a ModifierContext.\n\t    value: function format(nums, state) {\n\t      var left_shift = state.left_shift;\n\t      var right_shift = state.right_shift;\n\t\n\t      var num_spacing = 1;\n\t\n\t      if (!nums || nums.length === 0) return false;\n\t\n\t      var nums_list = [];\n\t      var prev_note = null;\n\t      var shiftLeft = 0;\n\t      var shiftRight = 0;\n\t\n\t      for (var i = 0; i < nums.length; ++i) {\n\t        var num = nums[i];\n\t        var note = num.getNote();\n\t        var pos = num.getPosition();\n\t        var props = note.getKeyProps()[num.getIndex()];\n\t        if (note !== prev_note) {\n\t          for (var n = 0; n < note.keys.length; ++n) {\n\t            var props_tmp = note.getKeyProps()[n];\n\t            if (left_shift === 0) {\n\t              shiftLeft = props_tmp.displaced ? note.getExtraLeftPx() : shiftLeft;\n\t            }\n\t            if (right_shift === 0) {\n\t              shiftRight = props_tmp.displaced ? note.getExtraRightPx() : shiftRight;\n\t            }\n\t          }\n\t          prev_note = note;\n\t        }\n\t\n\t        nums_list.push({\n\t          note: note,\n\t          num: num,\n\t          pos: pos,\n\t          line: props.line,\n\t          shiftL: shiftLeft,\n\t          shiftR: shiftRight\n\t        });\n\t      }\n\t\n\t      // Sort fingernumbers by line number.\n\t      nums_list.sort(function (a, b) {\n\t        return b.line - a.line;\n\t      });\n\t\n\t      var numShiftL = 0;\n\t      var numShiftR = 0;\n\t      var xWidthL = 0;\n\t      var xWidthR = 0;\n\t      var lastLine = null;\n\t      var lastNote = null;\n\t\n\t      for (var _i = 0; _i < nums_list.length; ++_i) {\n\t        var num_shift = 0;\n\t        var _nums_list$_i = nums_list[_i];\n\t        var _note = _nums_list$_i.note;\n\t        var _pos = _nums_list$_i.pos;\n\t        var _num = _nums_list$_i.num;\n\t        var line = _nums_list$_i.line;\n\t        var shiftL = _nums_list$_i.shiftL;\n\t        var shiftR = _nums_list$_i.shiftR;\n\t\n\t        // Reset the position of the string number every line.\n\t\n\t        if (line !== lastLine || _note !== lastNote) {\n\t          numShiftL = left_shift + shiftL;\n\t          numShiftR = right_shift + shiftR;\n\t        }\n\t\n\t        var numWidth = _num.getWidth() + num_spacing;\n\t        if (_pos === _modifier.Modifier.Position.LEFT) {\n\t          _num.setXShift(left_shift + numShiftL);\n\t          num_shift = left_shift + numWidth; // spacing\n\t          xWidthL = num_shift > xWidthL ? num_shift : xWidthL;\n\t        } else if (_pos === _modifier.Modifier.Position.RIGHT) {\n\t          _num.setXShift(numShiftR);\n\t          num_shift = shiftRight + numWidth; // spacing\n\t          xWidthR = num_shift > xWidthR ? num_shift : xWidthR;\n\t        }\n\t        lastLine = line;\n\t        lastNote = _note;\n\t      }\n\t\n\t      state.left_shift += xWidthL;\n\t      state.right_shift += xWidthR;\n\t\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'frethandfinger';\n\t    }\n\t  }]);\n\t\n\t  function FretHandFinger(number) {\n\t    _classCallCheck(this, FretHandFinger);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FretHandFinger).call(this));\n\t\n\t    _this.setAttribute('type', 'FretHandFinger');\n\t\n\t    _this.note = null;\n\t    _this.index = null;\n\t    _this.finger = number;\n\t    _this.width = 7;\n\t    _this.position = _modifier.Modifier.Position.LEFT; // Default position above stem or note head\n\t    _this.x_shift = 0;\n\t    _this.y_shift = 0;\n\t    _this.x_offset = 0; // Horizontal offset from default\n\t    _this.y_offset = 0; // Vertical offset from default\n\t    _this.font = {\n\t      family: 'sans-serif',\n\t      size: 9,\n\t      weight: 'bold'\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FretHandFinger, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return FretHandFinger.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'setFretHandFinger',\n\t    value: function setFretHandFinger(number) {\n\t      this.finger = number;return this;\n\t    }\n\t  }, {\n\t    key: 'setOffsetX',\n\t    value: function setOffsetX(x) {\n\t      this.x_offset = x;return this;\n\t    }\n\t  }, {\n\t    key: 'setOffsetY',\n\t    value: function setOffsetY(y) {\n\t      this.y_offset = y;return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t\n\t      if (!this.note || this.index == null) {\n\t        throw new _vex.Vex.RERR('NoAttachedNote', \"Can't draw string number without a note and index.\");\n\t      }\n\t\n\t      this.setRendered();\n\t      var ctx = this.context;\n\t      var start = this.note.getModifierStartXY(this.position, this.index);\n\t      var dot_x = start.x + this.x_shift + this.x_offset;\n\t      var dot_y = start.y + this.y_shift + this.y_offset + 5;\n\t\n\t      switch (this.position) {\n\t        case _modifier.Modifier.Position.ABOVE:\n\t          dot_x -= 4;\n\t          dot_y -= 12;\n\t          break;\n\t        case _modifier.Modifier.Position.BELOW:\n\t          dot_x -= 2;\n\t          dot_y += 10;\n\t          break;\n\t        case _modifier.Modifier.Position.LEFT:\n\t          dot_x -= this.width;\n\t          break;\n\t        case _modifier.Modifier.Position.RIGHT:\n\t          dot_x += 1;\n\t          break;\n\t        default:\n\t          throw new _vex.Vex.RERR('InvalidPostion', 'The position ' + this.position + ' does not exist');\n\t      }\n\t\n\t      ctx.save();\n\t      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\t      ctx.fillText('' + this.finger, dot_x, dot_y);\n\t      ctx.restore();\n\t    }\n\t  }]);\n\n\t  return FretHandFinger;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Accidental = undefined;\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _fraction = __webpack_require__(3);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _music = __webpack_require__(30);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// @author Mohit Cheppudira\n\t// @author Greg Ristow (modifications)\n\t//\n\t// ## Description\n\t//\n\t// This file implements accidentals as modifiers that can be attached to\n\t// notes. Support is included for both western and microtonal accidentals.\n\t//\n\t// See `tests/accidental_tests.js` for usage examples.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (Accidental.DEBUG) _vex.Vex.L('Vex.Flow.Accidental', args);\n\t}\n\t\n\tvar getGlyphWidth = function getGlyphWidth(glyph) {\n\t  return glyph.getMetrics().width;\n\t};\n\t\n\t// An `Accidental` inherits from `Modifier`, and is formatted within a\n\t// `ModifierContext`.\n\t\n\tvar Accidental = exports.Accidental = function (_Modifier) {\n\t  _inherits(Accidental, _Modifier);\n\t\n\t  _createClass(Accidental, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // Arrange accidentals inside a ModifierContext.\n\t    value: function format(accidentals, state) {\n\t      var _this2 = this;\n\t\n\t      var noteheadAccidentalPadding = 1;\n\t      var leftShift = state.left_shift + noteheadAccidentalPadding;\n\t      var accidentalSpacing = 3;\n\t\n\t      // If there are no accidentals, we needn't format their positions\n\t      if (!accidentals || accidentals.length === 0) return;\n\t\n\t      var accList = [];\n\t      var prevNote = null;\n\t      var shiftL = 0;\n\t\n\t      // First determine the accidentals' Y positions from the note.keys\n\t      var propsTemp = void 0;\n\t      for (var i = 0; i < accidentals.length; ++i) {\n\t        var acc = accidentals[i];\n\t        var note = acc.getNote();\n\t        var stave = note.getStave();\n\t        var props = note.getKeyProps()[acc.getIndex()];\n\t        if (note !== prevNote) {\n\t          // Iterate through all notes to get the displaced pixels\n\t          for (var n = 0; n < note.keys.length; ++n) {\n\t            propsTemp = note.getKeyProps()[n];\n\t            shiftL = propsTemp.displaced ? note.getExtraLeftPx() : shiftL;\n\t          }\n\t          prevNote = note;\n\t        }\n\t        if (stave !== null) {\n\t          var lineSpace = stave.options.spacing_between_lines_px;\n\t          var y = stave.getYForLine(props.line);\n\t          var accLine = Math.round(y / lineSpace * 2) / 2;\n\t          accList.push({ y: y, line: accLine, shift: shiftL, acc: acc, lineSpace: lineSpace });\n\t        } else {\n\t          accList.push({ line: props.line, shift: shiftL, acc: acc });\n\t        }\n\t      }\n\t\n\t      // Sort accidentals by line number.\n\t      accList.sort(function (a, b) {\n\t        return b.line - a.line;\n\t      });\n\t\n\t      // FIXME: Confusing name. Each object in this array has a property called `line`.\n\t      // So if this is a list of lines, you end up with: `line.line` which is very awkward.\n\t      var lineList = [];\n\t\n\t      // amount by which all accidentals must be shifted right or left for\n\t      // stem flipping, notehead shifting concerns.\n\t      var accShift = 0;\n\t      var previousLine = null;\n\t\n\t      // Create an array of unique line numbers (lineList) from accList\n\t      for (var _i = 0; _i < accList.length; _i++) {\n\t        var _acc = accList[_i];\n\t\n\t        // if this is the first line, or a new line, add a lineList\n\t        if (previousLine === null || previousLine !== _acc.line) {\n\t          lineList.push({\n\t            line: _acc.line,\n\t            flatLine: true,\n\t            dblSharpLine: true,\n\t            numAcc: 0,\n\t            width: 0\n\t          });\n\t        }\n\t        // if this accidental is not a flat, the accidental needs 3.0 lines lower\n\t        // clearance instead of 2.5 lines for b or bb.\n\t        // FIXME: Naming could use work. acc.acc is very awkward\n\t        if (_acc.acc.type !== 'b' && _acc.acc.type !== 'bb') {\n\t          lineList[lineList.length - 1].flatLine = false;\n\t        }\n\t\n\t        // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n\t        if (_acc.acc.type !== '##') {\n\t          lineList[lineList.length - 1].dblSharpLine = false;\n\t        }\n\t\n\t        // Track how many accidentals are on this line:\n\t        lineList[lineList.length - 1].numAcc++;\n\t\n\t        // Track the total x_offset needed for this line which will be needed\n\t        // for formatting lines w/ multiple accidentals:\n\t\n\t        // width = accidental width + universal spacing between accidentals\n\t        lineList[lineList.length - 1].width += _acc.acc.getWidth() + accidentalSpacing;\n\t\n\t        // if this accShift is larger, use it to keep first column accidentals in the same line\n\t        accShift = _acc.shift > accShift ? _acc.shift : accShift;\n\t\n\t        previousLine = _acc.line;\n\t      }\n\t\n\t      // ### Place Accidentals in Columns\n\t      //\n\t      // Default to a classic triangular layout (middle accidental farthest left),\n\t      // but follow exceptions as outlined in G. Read's _Music Notation_ and\n\t      // Elaine Gould's _Behind Bars_.\n\t      //\n\t      // Additionally, this implements different vertical collision rules for\n\t      // flats (only need 2.5 lines clearance below) and double sharps (only\n\t      // need 2.5 lines of clearance above or below).\n\t      //\n\t      // Classic layouts and exception patterns are found in the 'tables.js'\n\t      // in 'Vex.Flow.accidentalColumnsTable'\n\t      //\n\t      // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n\t      // using as few columns as possible for the verticle structure.\n\t      //\n\t      // TODO (?): Allow column to be specified for an accidental at run-time?\n\t\n\t      var totalColumns = 0;\n\t\n\t      // establish the boundaries for a group of notes with clashing accidentals:\n\t\n\t      var _loop = function _loop(_i3) {\n\t        var noFurtherConflicts = false;\n\t        var groupStart = _i3;\n\t        var groupEnd = _i3;\n\t\n\t        while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {\n\t          // if this note conflicts with the next:\n\t          if (_this2.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {\n\t            // include the next note in the group:\n\t            groupEnd++;\n\t          } else {\n\t            noFurtherConflicts = true;\n\t          }\n\t        }\n\t\n\t        // Gets an a line from the `lineList`, relative to the current group\n\t        var getGroupLine = function getGroupLine(index) {\n\t          return lineList[groupStart + index];\n\t        };\n\t        var getGroupLines = function getGroupLines(indexes) {\n\t          return indexes.map(getGroupLine);\n\t        };\n\t        var lineDifference = function lineDifference(indexA, indexB) {\n\t          var _getGroupLines$map = getGroupLines([indexA, indexB]).map(function (item) {\n\t            return item.line;\n\t          });\n\t\n\t          var _getGroupLines$map2 = _slicedToArray(_getGroupLines$map, 2);\n\t\n\t          var a = _getGroupLines$map2[0];\n\t          var b = _getGroupLines$map2[1];\n\t\n\t          return a - b;\n\t        };\n\t\n\t        var notColliding = function notColliding() {\n\t          for (var _len2 = arguments.length, indexPairs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t            indexPairs[_key2] = arguments[_key2];\n\t          }\n\t\n\t          return indexPairs.map(getGroupLines).every(function (lines) {\n\t            return !_this2.checkCollision.apply(_this2, _toConsumableArray(lines));\n\t          });\n\t        };\n\t\n\t        // Set columns for the lines in this group:\n\t        var groupLength = groupEnd - groupStart + 1;\n\t\n\t        // Set the accidental column for each line of the group\n\t        var endCase = _this2.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';\n\t\n\t        switch (groupLength) {\n\t          case 3:\n\t            if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n\t              endCase = 'second_on_bottom';\n\t            }\n\t            break;\n\t          case 4:\n\t            if (notColliding([0, 2], [1, 3])) {\n\t              endCase = 'spaced_out_tetrachord';\n\t            }\n\t            break;\n\t          case 5:\n\t            if (endCase === 'b' && notColliding([1, 3])) {\n\t              endCase = 'spaced_out_pentachord';\n\t              if (notColliding([0, 2], [2, 4])) {\n\t                endCase = 'very_spaced_out_pentachord';\n\t              }\n\t            }\n\t            break;\n\t          case 6:\n\t            if (notColliding([0, 3], [1, 4], [2, 5])) {\n\t              endCase = 'spaced_out_hexachord';\n\t            }\n\t            if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n\t              endCase = 'very_spaced_out_hexachord';\n\t            }\n\t            break;\n\t          default:\n\t            break;\n\t        }\n\t\n\t        var groupMember = void 0;\n\t        var column = void 0;\n\t        // If the group contains more than seven members, use ascending parallel lines\n\t        // of accidentals, using as few columns as possible while avoiding collisions.\n\t        if (groupLength >= 7) {\n\t          // First, determine how many columns to use:\n\t          var patternLength = 2;\n\t          var collisionDetected = true;\n\t          while (collisionDetected === true) {\n\t            collisionDetected = false;\n\t            for (var line = 0; line + patternLength < lineList.length; line++) {\n\t              if (_this2.checkCollision(lineList[line], lineList[line + patternLength])) {\n\t                collisionDetected = true;\n\t                patternLength++;\n\t                break;\n\t              }\n\t            }\n\t          }\n\t          // Then, assign a column to each line of accidentals\n\t          for (groupMember = _i3; groupMember <= groupEnd; groupMember++) {\n\t            column = (groupMember - _i3) % patternLength + 1;\n\t            lineList[groupMember].column = column;\n\t            totalColumns = totalColumns > column ? totalColumns : column;\n\t          }\n\t\n\t          // Otherwise, if the group contains fewer than seven members, use the layouts from\n\t          // the accidentalsColumnsTable housed in tables.js.\n\t        } else {\n\t          for (groupMember = _i3; groupMember <= groupEnd; groupMember++) {\n\t            column = _tables.Flow.accidentalColumnsTable[groupLength][endCase][groupMember - _i3];\n\t            lineList[groupMember].column = column;\n\t            totalColumns = totalColumns > column ? totalColumns : column;\n\t          }\n\t        }\n\t\n\t        // Increment i to the last note that was set, so that if a lower set of notes\n\t        // does not conflict at all with this group, it can have its own classic shape.\n\t        _i3 = groupEnd;\n\t        _i2 = _i3;\n\t      };\n\t\n\t      for (var _i2 = 0; _i2 < lineList.length; _i2++) {\n\t        _loop(_i2);\n\t      }\n\t\n\t      // ### Convert Columns to x_offsets\n\t      //\n\t      // This keeps columns aligned, even if they have different accidentals within them\n\t      // which sometimes results in a larger x_offset than is an accidental might need\n\t      // to preserve the symmetry of the accidental shape.\n\t      //\n\t      // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n\t      // music with complex chord clusters.\n\t      //\n\t      // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n\t      // parallel columns.\n\t\n\t      // track each column's max width, which will be used as initial shift of later columns:\n\t      var columnWidths = [];\n\t      var columnXOffsets = [];\n\t      for (var _i4 = 0; _i4 <= totalColumns; _i4++) {\n\t        columnWidths[_i4] = 0;\n\t        columnXOffsets[_i4] = 0;\n\t      }\n\t\n\t      columnWidths[0] = accShift + leftShift;\n\t      columnXOffsets[0] = accShift + leftShift;\n\t\n\t      // Fill columnWidths with widest needed x-space;\n\t      // this is what keeps the columns parallel.\n\t      lineList.forEach(function (line) {\n\t        if (line.width > columnWidths[line.column]) columnWidths[line.column] = line.width;\n\t      });\n\t\n\t      for (var _i5 = 1; _i5 < columnWidths.length; _i5++) {\n\t        // this column's offset = this column's width + previous column's offset\n\t        columnXOffsets[_i5] = columnWidths[_i5] + columnXOffsets[_i5 - 1];\n\t      }\n\t\n\t      var totalShift = columnXOffsets[columnXOffsets.length - 1];\n\t      // Set the xShift for each accidental according to column offsets:\n\t      var accCount = 0;\n\t      lineList.forEach(function (line) {\n\t        var lineWidth = 0;\n\t        var lastAccOnLine = accCount + line.numAcc;\n\t        // handle all of the accidentals on a given line:\n\t        for (accCount; accCount < lastAccOnLine; accCount++) {\n\t          var xShift = columnXOffsets[line.column - 1] + lineWidth;\n\t          accList[accCount].acc.setXShift(xShift);\n\t          // keep track of the width of accidentals we've added so far, so that when\n\t          // we loop, we add space for them.\n\t          lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;\n\t          L('Line, accCount, shift: ', line.line, accCount, xShift);\n\t        }\n\t      });\n\t\n\t      // update the overall layout with the full width of the accidental shapes:\n\t      state.left_shift += totalShift;\n\t    }\n\t\n\t    // Helper function to determine whether two lines of accidentals collide vertically\n\t\n\t  }, {\n\t    key: 'checkCollision',\n\t    value: function checkCollision(line1, line2) {\n\t      var clearance = line2.line - line1.line;\n\t      var clearanceRequired = 3;\n\t      // But less clearance is required for certain accidentals: b, bb and ##.\n\t      if (clearance > 0) {\n\t        // then line 2 is on top\n\t        clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n\t        if (line1.dblSharpLine) clearance -= 0.5;\n\t      } else {\n\t        // line 1 is on top\n\t        clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n\t        if (line2.dblSharpLine) clearance -= 0.5;\n\t      }\n\t      var collision = Math.abs(clearance) < clearanceRequired;\n\t      L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);\n\t      return collision;\n\t    }\n\t\n\t    // Use this method to automatically apply accidentals to a set of `voices`.\n\t    // The accidentals will be remembered between all the voices provided.\n\t    // Optionally, you can also provide an initial `keySignature`.\n\t\n\t  }, {\n\t    key: 'applyAccidentals',\n\t    value: function applyAccidentals(voices, keySignature) {\n\t      var tickPositions = [];\n\t      var tickNoteMap = {};\n\t\n\t      // Sort the tickables in each voice by their tick position in the voice\n\t      voices.forEach(function (voice) {\n\t        var tickPosition = new _fraction.Fraction(0, 1);\n\t        var notes = voice.getTickables();\n\t        notes.forEach(function (note) {\n\t          var notesAtPosition = tickNoteMap[tickPosition.value()];\n\t\n\t          if (!notesAtPosition) {\n\t            tickPositions.push(tickPosition.value());\n\t            tickNoteMap[tickPosition.value()] = [note];\n\t          } else {\n\t            notesAtPosition.push(note);\n\t          }\n\t\n\t          tickPosition.add(note.getTicks());\n\t        });\n\t      });\n\t\n\t      var music = new _music.Music();\n\t\n\t      // Default key signature is C major\n\t      if (!keySignature) keySignature = 'C';\n\t\n\t      // Get the scale map, which represents the current state of each pitch\n\t      var scaleMap = music.createScaleMap(keySignature);\n\t\n\t      tickPositions.forEach(function (tick) {\n\t        var notes = tickNoteMap[tick];\n\t\n\t        // Array to store all pitches that modified accidental states\n\t        // at this tick position\n\t        var modifiedPitches = [];\n\t\n\t        notes.forEach(function (note) {\n\t          if (note.isRest()) return;\n\t\n\t          // Go through each key and determine if an accidental should be\n\t          // applied\n\t          note.keys.forEach(function (keyString, keyIndex) {\n\t            var key = music.getNoteParts(keyString.split('/')[0]);\n\t\n\t            // Force a natural for every key without an accidental\n\t            var accidentalString = key.accidental || 'n';\n\t            var pitch = key.root + accidentalString;\n\t\n\t            // Determine if the current pitch has the same accidental\n\t            // as the scale state\n\t            var sameAccidental = scaleMap[key.root] === pitch;\n\t\n\t            // Determine if an identical pitch in the chord already\n\t            // modified the accidental state\n\t            var previouslyModified = modifiedPitches.indexOf(pitch) > -1;\n\t\n\t            // Add the accidental to the StaveNote\n\t            if (!sameAccidental || sameAccidental && previouslyModified) {\n\t              // Modify the scale map so that the root pitch has an\n\t              // updated state\n\t              scaleMap[key.root] = pitch;\n\t\n\t              // Create the accidental\n\t              var accidental = new Accidental(accidentalString);\n\t\n\t              // Attach the accidental to the StaveNote\n\t              note.addAccidental(keyIndex, accidental);\n\t\n\t              // Add the pitch to list of pitches that modified accidentals\n\t              modifiedPitches.push(pitch);\n\t            }\n\t          });\n\t        });\n\t      });\n\t    }\n\t\n\t    // Create accidental. `type` can be a value from the\n\t    // `Vex.Flow.accidentalCodes.accidentals` table in `tables.js`. For\n\t    // example: `#`, `##`, `b`, `n`, etc.\n\t\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'accidentals';\n\t    }\n\t  }]);\n\t\n\t  function Accidental() {\n\t    var type = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t\n\t    _classCallCheck(this, Accidental);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Accidental).call(this));\n\t\n\t    _this.setAttribute('type', 'Accidental');\n\t\n\t    L('New accidental: ', type);\n\t\n\t    _this.note = null;\n\t    // The `index` points to a specific note in a chord.\n\t    _this.index = null;\n\t    _this.type = type;\n\t    _this.position = _modifier.Modifier.Position.LEFT;\n\t\n\t    _this.render_options = {\n\t      // Font size for glyphs\n\t      font_scale: 38,\n\t\n\t      // Length of stroke across heads above or below the stave.\n\t      stroke_px: 3,\n\t\n\t      // Padding between accidental and parentheses on each side\n\t      parenLeftPadding: 2,\n\t      parenRightPadding: 2\n\t    };\n\t\n\t    _this.accidental = _tables.Flow.accidentalCodes(_this.type);\n\t    if (!_this.accidental) {\n\t      throw new _vex.Vex.RERR('ArgumentError', 'Unknown accidental type: ' + type);\n\t    }\n\t\n\t    // Cautionary accidentals have parentheses around them\n\t    _this.cautionary = false;\n\t    _this.parenLeft = null;\n\t    _this.parenRight = null;\n\t\n\t    _this.reset();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Accidental, [{\n\t    key: 'reset',\n\t    value: function reset() {\n\t      var fontScale = this.render_options.font_scale;\n\t      this.glyph = new _glyph.Glyph(this.accidental.code, fontScale);\n\t      this.glyph.setOriginX(1.0);\n\t\n\t      if (this.cautionary) {\n\t        this.parenLeft = new _glyph.Glyph(_tables.Flow.accidentalCodes('{').code, fontScale);\n\t        this.parenRight = new _glyph.Glyph(_tables.Flow.accidentalCodes('}').code, fontScale);\n\t        this.parenLeft.setOriginX(1.0);\n\t        this.parenRight.setOriginX(1.0);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Accidental.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      var parenWidth = this.cautionary ? getGlyphWidth(this.parenLeft) + getGlyphWidth(this.parenRight) + this.render_options.parenLeftPadding + this.render_options.parenRightPadding : 0;\n\t\n\t      return getGlyphWidth(this.glyph) + parenWidth;\n\t    }\n\t\n\t    // Attach this accidental to `note`, which must be a `StaveNote`.\n\t\n\t  }, {\n\t    key: 'setNote',\n\t    value: function setNote(note) {\n\t      if (!note) {\n\t        throw new _vex.Vex.RERR('ArgumentError', 'Bad note value: ' + note);\n\t      }\n\t\n\t      this.note = note;\n\t\n\t      // Accidentals attached to grace notes are rendered smaller.\n\t      if (this.note.getCategory() === 'gracenotes') {\n\t        this.render_options.font_scale = 25;\n\t        this.reset();\n\t      }\n\t    }\n\t\n\t    // If called, draws parenthesis around accidental.\n\t\n\t  }, {\n\t    key: 'setAsCautionary',\n\t    value: function setAsCautionary() {\n\t      this.cautionary = true;\n\t      this.render_options.font_scale = 28;\n\t      this.reset();\n\t      return this;\n\t    }\n\t\n\t    // Render accidental onto canvas.\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var context = this.context;\n\t      var type = this.type;\n\t      var position = this.position;\n\t      var note = this.note;\n\t      var index = this.index;\n\t      var cautionary = this.cautionary;\n\t      var x_shift = this.x_shift;\n\t      var y_shift = this.y_shift;\n\t      var glyph = this.glyph;\n\t      var parenLeft = this.parenLeft;\n\t      var parenRight = this.parenRight;\n\t      var _render_options = this.render_options;\n\t      var parenLeftPadding = _render_options.parenLeftPadding;\n\t      var parenRightPadding = _render_options.parenRightPadding;\n\t\n\t\n\t      this.checkContext();\n\t\n\t      if (!(note && index != null)) {\n\t        throw new _vex.Vex.RERR('NoAttachedNote', \"Can't draw accidental without a note and index.\");\n\t      }\n\t\n\t      // Figure out the start `x` and `y` coordinates for note and index.\n\t      var start = note.getModifierStartXY(position, index);\n\t      var accX = start.x + x_shift;\n\t      var accY = start.y + y_shift;\n\t      L('Rendering: ', type, accX, accY);\n\t\n\t      if (!cautionary) {\n\t        glyph.render(context, accX, accY);\n\t      } else {\n\t        // Render the accidental in parentheses.\n\t        parenRight.render(context, accX, accY);\n\t        accX -= getGlyphWidth(parenRight);\n\t        accX -= parenRightPadding;\n\t        accX -= this.accidental.parenRightPaddingAdjustment;\n\t        glyph.render(context, accX, accY);\n\t        accX -= getGlyphWidth(glyph);\n\t        accX -= parenLeftPadding;\n\t        parenLeft.render(context, accX, accY);\n\t      }\n\t\n\t      this.setRendered();\n\t    }\n\t  }]);\n\n\t  return Accidental;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Music = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// This class implements some standard music theory routines.\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Music = exports.Music = function () {\n\t  function Music() {\n\t    _classCallCheck(this, Music);\n\t  }\n\t\n\t  _createClass(Music, [{\n\t    key: 'isValidNoteValue',\n\t    value: function isValidNoteValue(note) {\n\t      if (note == null || note < 0 || note >= Music.NUM_TONES) {\n\t        return false;\n\t      }\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'isValidIntervalValue',\n\t    value: function isValidIntervalValue(interval) {\n\t      return this.isValidNoteValue(interval);\n\t    }\n\t  }, {\n\t    key: 'getNoteParts',\n\t    value: function getNoteParts(noteString) {\n\t      if (!noteString || noteString.length < 1) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n\t      }\n\t\n\t      if (noteString.length > 3) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n\t      }\n\t\n\t      var note = noteString.toLowerCase();\n\t\n\t      var regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n\t      var match = regex.exec(note);\n\t\n\t      if (match != null) {\n\t        var root = match[1];\n\t        var accidental = match[2];\n\t\n\t        return {\n\t          root: root,\n\t          accidental: accidental\n\t        };\n\t      } else {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getKeyParts',\n\t    value: function getKeyParts(keyString) {\n\t      if (!keyString || keyString.length < 1) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid key: ' + keyString);\n\t      }\n\t\n\t      var key = keyString.toLowerCase();\n\t\n\t      // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n\t      var regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n\t      var match = regex.exec(key);\n\t\n\t      if (match != null) {\n\t        var root = match[1];\n\t        var accidental = match[2];\n\t        var type = match[3];\n\t\n\t        // Unspecified type implies major\n\t        if (!type) type = 'M';\n\t\n\t        return {\n\t          root: root,\n\t          accidental: accidental,\n\t          type: type\n\t        };\n\t      } else {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid key: ' + keyString);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getNoteValue',\n\t    value: function getNoteValue(noteString) {\n\t      var value = Music.noteValues[noteString];\n\t      if (value == null) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n\t      }\n\t\n\t      return value.int_val;\n\t    }\n\t  }, {\n\t    key: 'getIntervalValue',\n\t    value: function getIntervalValue(intervalString) {\n\t      var value = Music.intervals[intervalString];\n\t      if (value == null) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid interval name: ${intervalString}');\n\t      }\n\t\n\t      return value;\n\t    }\n\t  }, {\n\t    key: 'getCanonicalNoteName',\n\t    value: function getCanonicalNoteName(noteValue) {\n\t      if (!this.isValidNoteValue(noteValue)) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid note value: ' + noteValue);\n\t      }\n\t\n\t      return Music.canonical_notes[noteValue];\n\t    }\n\t  }, {\n\t    key: 'getCanonicalIntervalName',\n\t    value: function getCanonicalIntervalName(intervalValue) {\n\t      if (!this.isValidIntervalValue(intervalValue)) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid interval value: ' + intervalValue);\n\t      }\n\t\n\t      return Music.diatonic_intervals[intervalValue];\n\t    }\n\t\n\t    /* Given a note, interval, and interval direction, product the\n\t     * relative note.\n\t     */\n\t\n\t  }, {\n\t    key: 'getRelativeNoteValue',\n\t    value: function getRelativeNoteValue(noteValue, intervalValue, direction) {\n\t      if (direction == null) direction = 1;\n\t\n\t      if (direction !== 1 && direction !== -1) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid direction: ' + direction);\n\t      }\n\t\n\t      var sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n\t      if (sum < 0) sum += Music.NUM_TONES;\n\t\n\t      return sum;\n\t    }\n\t  }, {\n\t    key: 'getRelativeNoteName',\n\t    value: function getRelativeNoteName(root, noteValue) {\n\t      var parts = this.getNoteParts(root);\n\t      var rootValue = this.getNoteValue(parts.root);\n\t      var interval = noteValue - rootValue;\n\t\n\t      if (Math.abs(interval) > Music.NUM_TONES - 3) {\n\t        var multiplier = 1;\n\t        if (interval > 0) multiplier = -1;\n\t\n\t        // Possibly wrap around. (Add +1 for modulo operator)\n\t        var reverse_interval = (noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES * multiplier;\n\t\n\t        if (Math.abs(reverse_interval) > 2) {\n\t          throw new _vex.Vex.RERR('BadArguments', 'Notes not related: ' + root + ', ' + noteValue + ')');\n\t        } else {\n\t          interval = reverse_interval;\n\t        }\n\t      }\n\t\n\t      if (Math.abs(interval) > 2) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Notes not related: ' + root + ', ' + noteValue + ')');\n\t      }\n\t\n\t      var relativeNoteName = parts.root;\n\t      if (interval > 0) {\n\t        for (var i = 1; i <= interval; ++i) {\n\t          relativeNoteName += '#';\n\t        }\n\t      } else if (interval < 0) {\n\t        for (var _i = -1; _i >= interval; --_i) {\n\t          relativeNoteName += 'b';\n\t        }\n\t      }\n\t\n\t      return relativeNoteName;\n\t    }\n\t\n\t    /* Return scale tones, given intervals. Each successive interval is\n\t     * relative to the previous one, e.g., Major Scale:\n\t     *\n\t     *   TTSTTTS = [2,2,1,2,2,2,1]\n\t     *\n\t     * When used with key = 0, returns C scale (which is isomorphic to\n\t     * interval list).\n\t     */\n\t\n\t  }, {\n\t    key: 'getScaleTones',\n\t    value: function getScaleTones(key, intervals) {\n\t      var tones = [key];\n\t\n\t      var nextNote = key;\n\t      for (var i = 0; i < intervals.length; i += 1) {\n\t        nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n\t        if (nextNote !== key) tones.push(nextNote);\n\t      }\n\t\n\t      return tones;\n\t    }\n\t\n\t    /* Returns the interval of a note, given a diatonic scale.\n\t     *\n\t     * E.g., Given the scale C, and the note E, returns M3\n\t     */\n\t\n\t  }, {\n\t    key: 'getIntervalBetween',\n\t    value: function getIntervalBetween(note1, note2, direction) {\n\t      if (direction == null) direction = 1;\n\t\n\t      if (direction !== 1 && direction !== -1) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid direction: ' + direction);\n\t      }\n\t\n\t      if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid notes: ' + note1 + ', ' + note2);\n\t      }\n\t\n\t      var difference = direction === 1 ? note2 - note1 : note1 - note2;\n\t\n\t      if (difference < 0) difference += Music.NUM_TONES;\n\t\n\t      return difference;\n\t    }\n\t\n\t    // Create a scale map that represents the pitch state for a\n\t    // `keySignature`. For example, passing a `G` to `keySignature` would\n\t    // return a scale map with every note naturalized except for `F` which\n\t    // has an `F#` state.\n\t\n\t  }, {\n\t    key: 'createScaleMap',\n\t    value: function createScaleMap(keySignature) {\n\t      var keySigParts = this.getKeyParts(keySignature);\n\t      var scaleName = Music.scaleTypes[keySigParts.type];\n\t\n\t      var keySigString = keySigParts.root;\n\t      if (keySigParts.accidental) keySigString += keySigParts.accidental;\n\t\n\t      if (!scaleName) throw new _vex.Vex.RERR('BadArguments', 'Unsupported key type: ' + keySignature);\n\t\n\t      var scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n\t      var noteLocation = Music.root_indices[keySigParts.root];\n\t\n\t      var scaleMap = {};\n\t      for (var i = 0; i < Music.roots.length; ++i) {\n\t        var index = (noteLocation + i) % Music.roots.length;\n\t        var rootName = Music.roots[index];\n\t        var noteName = this.getRelativeNoteName(rootName, scale[i]);\n\t\n\t        if (noteName.length === 1) {\n\t          noteName += 'n';\n\t        }\n\t\n\t        scaleMap[rootName] = noteName;\n\t      }\n\t\n\t      return scaleMap;\n\t    }\n\t  }], [{\n\t    key: 'NUM_TONES',\n\t    get: function get() {\n\t      return 12;\n\t    }\n\t  }, {\n\t    key: 'roots',\n\t    get: function get() {\n\t      return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n\t    }\n\t  }, {\n\t    key: 'root_values',\n\t    get: function get() {\n\t      return [0, 2, 4, 5, 7, 9, 11];\n\t    }\n\t  }, {\n\t    key: 'root_indices',\n\t    get: function get() {\n\t      return {\n\t        'c': 0,\n\t        'd': 1,\n\t        'e': 2,\n\t        'f': 3,\n\t        'g': 4,\n\t        'a': 5,\n\t        'b': 6\n\t      };\n\t    }\n\t  }, {\n\t    key: 'canonical_notes',\n\t    get: function get() {\n\t      return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n\t    }\n\t  }, {\n\t    key: 'diatonic_intervals',\n\t    get: function get() {\n\t      return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n\t    }\n\t  }, {\n\t    key: 'diatonic_accidentals',\n\t    get: function get() {\n\t      return {\n\t        'unison': { note: 0, accidental: 0 },\n\t        'm2': { note: 1, accidental: -1 },\n\t        'M2': { note: 1, accidental: 0 },\n\t        'm3': { note: 2, accidental: -1 },\n\t        'M3': { note: 2, accidental: 0 },\n\t        'p4': { note: 3, accidental: 0 },\n\t        'dim5': { note: 4, accidental: -1 },\n\t        'p5': { note: 4, accidental: 0 },\n\t        'm6': { note: 5, accidental: -1 },\n\t        'M6': { note: 5, accidental: 0 },\n\t        'b7': { note: 6, accidental: -1 },\n\t        'M7': { note: 6, accidental: 0 },\n\t        'octave': { note: 7, accidental: 0 }\n\t      };\n\t    }\n\t  }, {\n\t    key: 'intervals',\n\t    get: function get() {\n\t      return {\n\t        'u': 0, 'unison': 0,\n\t        'm2': 1, 'b2': 1, 'min2': 1, 'S': 1, 'H': 1,\n\t        '2': 2, 'M2': 2, 'maj2': 2, 'T': 2, 'W': 2,\n\t        'm3': 3, 'b3': 3, 'min3': 3,\n\t        'M3': 4, '3': 4, 'maj3': 4,\n\t        '4': 5, 'p4': 5,\n\t        '#4': 6, 'b5': 6, 'aug4': 6, 'dim5': 6,\n\t        '5': 7, 'p5': 7,\n\t        '#5': 8, 'b6': 8, 'aug5': 8,\n\t        '6': 9, 'M6': 9, 'maj6': 9,\n\t        'b7': 10, 'm7': 10, 'min7': 10, 'dom7': 10,\n\t        'M7': 11, 'maj7': 11,\n\t        '8': 12, 'octave': 12\n\t      };\n\t    }\n\t  }, {\n\t    key: 'scales',\n\t    get: function get() {\n\t      return {\n\t        major: [2, 2, 1, 2, 2, 2, 1],\n\t        dorian: [2, 1, 2, 2, 2, 1, 2],\n\t        mixolydian: [2, 2, 1, 2, 2, 1, 2],\n\t        minor: [2, 1, 2, 2, 1, 2, 2]\n\t      };\n\t    }\n\t  }, {\n\t    key: 'scaleTypes',\n\t    get: function get() {\n\t      return {\n\t        'M': Music.scales.major,\n\t        'm': Music.scales.minor\n\t      };\n\t    }\n\t  }, {\n\t    key: 'accidentals',\n\t    get: function get() {\n\t      return ['bb', 'b', 'n', '#', '##'];\n\t    }\n\t  }, {\n\t    key: 'noteValues',\n\t    get: function get() {\n\t      return {\n\t        'c': { root_index: 0, int_val: 0 },\n\t        'cn': { root_index: 0, int_val: 0 },\n\t        'c#': { root_index: 0, int_val: 1 },\n\t        'c##': { root_index: 0, int_val: 2 },\n\t        'cb': { root_index: 0, int_val: 11 },\n\t        'cbb': { root_index: 0, int_val: 10 },\n\t        'd': { root_index: 1, int_val: 2 },\n\t        'dn': { root_index: 1, int_val: 2 },\n\t        'd#': { root_index: 1, int_val: 3 },\n\t        'd##': { root_index: 1, int_val: 4 },\n\t        'db': { root_index: 1, int_val: 1 },\n\t        'dbb': { root_index: 1, int_val: 0 },\n\t        'e': { root_index: 2, int_val: 4 },\n\t        'en': { root_index: 2, int_val: 4 },\n\t        'e#': { root_index: 2, int_val: 5 },\n\t        'e##': { root_index: 2, int_val: 6 },\n\t        'eb': { root_index: 2, int_val: 3 },\n\t        'ebb': { root_index: 2, int_val: 2 },\n\t        'f': { root_index: 3, int_val: 5 },\n\t        'fn': { root_index: 3, int_val: 5 },\n\t        'f#': { root_index: 3, int_val: 6 },\n\t        'f##': { root_index: 3, int_val: 7 },\n\t        'fb': { root_index: 3, int_val: 4 },\n\t        'fbb': { root_index: 3, int_val: 3 },\n\t        'g': { root_index: 4, int_val: 7 },\n\t        'gn': { root_index: 4, int_val: 7 },\n\t        'g#': { root_index: 4, int_val: 8 },\n\t        'g##': { root_index: 4, int_val: 9 },\n\t        'gb': { root_index: 4, int_val: 6 },\n\t        'gbb': { root_index: 4, int_val: 5 },\n\t        'a': { root_index: 5, int_val: 9 },\n\t        'an': { root_index: 5, int_val: 9 },\n\t        'a#': { root_index: 5, int_val: 10 },\n\t        'a##': { root_index: 5, int_val: 11 },\n\t        'ab': { root_index: 5, int_val: 8 },\n\t        'abb': { root_index: 5, int_val: 7 },\n\t        'b': { root_index: 6, int_val: 11 },\n\t        'bn': { root_index: 6, int_val: 11 },\n\t        'b#': { root_index: 6, int_val: 0 },\n\t        'b##': { root_index: 6, int_val: 1 },\n\t        'bb': { root_index: 6, int_val: 10 },\n\t        'bbb': { root_index: 6, int_val: 9 }\n\t      };\n\t    }\n\t  }]);\n\n\t  return Music;\n\t}();\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.NoteSubGroup = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _formatter = __webpack_require__(14);\n\t\n\tvar _voice = __webpack_require__(18);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author Taehoon Moon 2016\n\t//\n\t// ## Description\n\t//\n\t// This file implements `NoteSubGroup` which is used to format and\n\t// render notes as a `Modifier`\n\t// ex) ClefNote, TimeSigNote and BarNote.\n\t\n\tvar NoteSubGroup = exports.NoteSubGroup = function (_Modifier) {\n\t  _inherits(NoteSubGroup, _Modifier);\n\t\n\t  _createClass(NoteSubGroup, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // Arrange groups inside a `ModifierContext`\n\t    value: function format(groups, state) {\n\t      if (!groups || groups.length === 0) return false;\n\t\n\t      var width = 0;\n\t      for (var i = 0; i < groups.length; ++i) {\n\t        var group = groups[i];\n\t        group.preFormat();\n\t        width += group.getWidth();\n\t      }\n\t\n\t      state.left_shift += width;\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'notesubgroup';\n\t    }\n\t  }]);\n\t\n\t  function NoteSubGroup(subNotes) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, NoteSubGroup);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(NoteSubGroup).call(this));\n\t\n\t    _this.setAttribute('type', 'NoteSubGroup');\n\t\n\t    _this.note = null;\n\t    _this.index = null;\n\t    _this.position = _modifier.Modifier.Position.LEFT;\n\t    _this.subNotes = subNotes;\n\t    _this.subNotes.forEach(function (subNote) {\n\t      subNote.ignore_ticks = false;\n\t    });\n\t    _this.width = 0;\n\t    _this.preFormatted = false;\n\t\n\t    _this.formatter = new _formatter.Formatter();\n\t    _this.voice = new _voice.Voice({\n\t      num_beats: 4,\n\t      beat_value: 4,\n\t      resolution: _tables.Flow.RESOLUTION\n\t    }).setStrict(false);\n\t\n\t    _this.voice.addTickables(_this.subNotes);\n\t\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  _createClass(NoteSubGroup, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return NoteSubGroup.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      if (this.preFormatted) return;\n\t\n\t      this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n\t      this.setWidth(this.formatter.getMinTotalWidth());\n\t      this.preFormatted = true;\n\t    }\n\t  }, {\n\t    key: 'setNote',\n\t    value: function setNote(note) {\n\t      this.note = note;\n\t    }\n\t  }, {\n\t    key: 'setWidth',\n\t    value: function setWidth(width) {\n\t      this.width = width;\n\t    }\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      return this.width;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var _this2 = this;\n\t\n\t      this.checkContext();\n\t\n\t      var note = this.getNote();\n\t\n\t      if (!(note && this.index !== null)) {\n\t        throw new _vex.Vex.RuntimeError('NoAttachedNote', \"Can't draw notes without a parent note and parent note index.\");\n\t      }\n\t\n\t      this.setRendered();\n\t      var alignSubNotesWithNote = function alignSubNotesWithNote(subNotes, note) {\n\t        // Shift over the tick contexts of each note\n\t        var tickContext = note.getTickContext();\n\t        var extraPx = tickContext.getExtraPx();\n\t        var x = tickContext.getX() - extraPx.left - extraPx.extraLeft + _this2.getSpacingFromNextModifier();\n\t\n\t        subNotes.forEach(function (subNote) {\n\t          var tick_context = subNote.getTickContext();\n\t          var x_offset = tick_context.getX();\n\t          subNote.setStave(note.stave);\n\t          tick_context.setX(x + x_offset);\n\t        });\n\t      };\n\t\n\t      alignSubNotesWithNote(this.subNotes, note, this.width);\n\t\n\t      // Draw notes\n\t      this.subNotes.forEach(function (subNote) {\n\t        return subNote.setContext(_this2.context).draw();\n\t      });\n\t    }\n\t  }]);\n\n\t  return NoteSubGroup;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.GraceNoteGroup = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _formatter = __webpack_require__(14);\n\t\n\tvar _voice = __webpack_require__(18);\n\t\n\tvar _beam = __webpack_require__(15);\n\t\n\tvar _stavetie = __webpack_require__(33);\n\t\n\tvar _tabtie = __webpack_require__(34);\n\t\n\tvar _stavenote = __webpack_require__(20);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This file implements `GraceNoteGroup` which is used to format and\n\t// render grace notes.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.GraceNoteGroup.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (GraceNoteGroup.DEBUG) _vex.Vex.L('Vex.Flow.GraceNoteGroup', args);\n\t}\n\t\n\tvar GraceNoteGroup = exports.GraceNoteGroup = function (_Modifier) {\n\t  _inherits(GraceNoteGroup, _Modifier);\n\t\n\t  _createClass(GraceNoteGroup, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // Arrange groups inside a `ModifierContext`\n\t    value: function format(gracenote_groups, state) {\n\t      var group_spacing_stave = 4;\n\t      var group_spacing_tab = 0;\n\t\n\t      if (!gracenote_groups || gracenote_groups.length === 0) return false;\n\t\n\t      var group_list = [];\n\t      var prev_note = null;\n\t      var shiftL = 0;\n\t\n\t      for (var i = 0; i < gracenote_groups.length; ++i) {\n\t        var gracenote_group = gracenote_groups[i];\n\t        var note = gracenote_group.getNote();\n\t        var is_stavenote = note.getCategory() === _stavenote.StaveNote.CATEGORY;\n\t        var spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;\n\t\n\t        if (is_stavenote && note !== prev_note) {\n\t          // Iterate through all notes to get the displaced pixels\n\t          for (var n = 0; n < note.keys.length; ++n) {\n\t            var props_tmp = note.getKeyProps()[n];\n\t            shiftL = props_tmp.displaced ? note.getExtraLeftPx() : shiftL;\n\t          }\n\t          prev_note = note;\n\t        }\n\t\n\t        group_list.push({ shift: shiftL, gracenote_group: gracenote_group, spacing: spacing });\n\t      }\n\t\n\t      // If first note left shift in case it is displaced\n\t      var group_shift = group_list[0].shift;\n\t      var formatWidth = void 0;\n\t      for (var _i = 0; _i < group_list.length; ++_i) {\n\t        var _gracenote_group = group_list[_i].gracenote_group;\n\t        _gracenote_group.preFormat();\n\t        formatWidth = _gracenote_group.getWidth() + group_list[_i].spacing;\n\t        group_shift = Math.max(formatWidth, group_shift);\n\t      }\n\t\n\t      for (var _i2 = 0; _i2 < group_list.length; ++_i2) {\n\t        var _gracenote_group2 = group_list[_i2].gracenote_group;\n\t        formatWidth = _gracenote_group2.getWidth() + group_list[_i2].spacing;\n\t        _gracenote_group2.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));\n\t      }\n\t\n\t      state.left_shift += group_shift;\n\t      return true;\n\t    }\n\t\n\t    // ## Prototype Methods\n\t    //\n\t    // `GraceNoteGroup` inherits from `Modifier` and is placed inside a\n\t    // `ModifierContext`.\n\t\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'gracenotegroups';\n\t    }\n\t  }]);\n\t\n\t  function GraceNoteGroup(grace_notes, show_slur) {\n\t    var _ret;\n\t\n\t    _classCallCheck(this, GraceNoteGroup);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GraceNoteGroup).call(this));\n\t\n\t    _this.setAttribute('type', 'GraceNoteGroup');\n\t\n\t    _this.note = null;\n\t    _this.index = null;\n\t    _this.position = _modifier.Modifier.Position.LEFT;\n\t    _this.grace_notes = grace_notes;\n\t    _this.width = 0;\n\t\n\t    _this.preFormatted = false;\n\t\n\t    _this.show_slur = show_slur;\n\t    _this.slur = null;\n\t\n\t    _this.formatter = new _formatter.Formatter();\n\t    _this.voice = new _voice.Voice({\n\t      num_beats: 4,\n\t      beat_value: 4,\n\t      resolution: _tables.Flow.RESOLUTION\n\t    }).setStrict(false);\n\t\n\t    _this.render_options = {\n\t      slur_y_shift: 0\n\t    };\n\t\n\t    _this.voice.addTickables(_this.grace_notes);\n\t\n\t    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n\t  }\n\t\n\t  _createClass(GraceNoteGroup, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return GraceNoteGroup.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      if (this.preFormatted) return;\n\t\n\t      this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n\t      this.setWidth(this.formatter.getMinTotalWidth());\n\t      this.preFormatted = true;\n\t    }\n\t  }, {\n\t    key: 'beamNotes',\n\t    value: function beamNotes() {\n\t      if (this.grace_notes.length > 1) {\n\t        var beam = new _beam.Beam(this.grace_notes);\n\t\n\t        beam.render_options.beam_width = 3;\n\t        beam.render_options.partial_beam_length = 4;\n\t\n\t        this.beam = beam;\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setNote',\n\t    value: function setNote(note) {\n\t      this.note = note;\n\t    }\n\t  }, {\n\t    key: 'setWidth',\n\t    value: function setWidth(width) {\n\t      this.width = width;\n\t    }\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      return this.width;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var _this2 = this;\n\t\n\t      this.checkContext();\n\t\n\t      var note = this.getNote();\n\t\n\t      L('Drawing grace note group for:', note);\n\t\n\t      if (!(note && this.index !== null)) {\n\t        throw new _vex.Vex.RuntimeError('NoAttachedNote', \"Can't draw grace note without a parent note and parent note index.\");\n\t      }\n\t\n\t      this.setRendered();\n\t      var that = this;\n\t      function alignGraceNotesWithNote(grace_notes, note) {\n\t        // Shift over the tick contexts of each note\n\t        // So that th aligned with the note\n\t        var tickContext = note.getTickContext();\n\t        var extraPx = tickContext.getExtraPx();\n\t        var x = tickContext.getX() - extraPx.left - extraPx.extraLeft + that.getSpacingFromNextModifier();\n\t\n\t        grace_notes.forEach(function (graceNote) {\n\t          var tick_context = graceNote.getTickContext();\n\t          var x_offset = tick_context.getX();\n\t          graceNote.setStave(note.stave);\n\t          tick_context.setX(x + x_offset);\n\t        });\n\t      }\n\t\n\t      alignGraceNotesWithNote(this.grace_notes, note, this.width);\n\t\n\t      // Draw notes\n\t      this.grace_notes.forEach(function (graceNote) {\n\t        graceNote.setContext(_this2.context).draw();\n\t      });\n\t\n\t      // Draw beam\n\t      if (this.beam) {\n\t        this.beam.setContext(this.context).draw();\n\t      }\n\t\n\t      if (this.show_slur) {\n\t        // Create and draw slur\n\t        var is_stavenote = this.getNote().getCategory() === _stavenote.StaveNote.CATEGORY;\n\t        var TieClass = is_stavenote ? _stavetie.StaveTie : _tabtie.TabTie;\n\t\n\t        this.slur = new TieClass({\n\t          last_note: this.grace_notes[0],\n\t          first_note: note,\n\t          first_indices: [0],\n\t          last_indices: [0]\n\t        });\n\t\n\t        this.slur.render_options.cp2 = 12;\n\t        this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\n\t        this.slur.setContext(this.context).draw();\n\t      }\n\t    }\n\t  }]);\n\n\t  return GraceNoteGroup;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.StaveTie = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// This class implements varies types of ties between contiguous notes. The\n\t// ties include: regular ties, hammer ons, pull offs, and slides.\n\t\n\tvar StaveTie = exports.StaveTie = function (_Element) {\n\t  _inherits(StaveTie, _Element);\n\t\n\t  function StaveTie(notes, text) {\n\t    _classCallCheck(this, StaveTie);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveTie).call(this));\n\t    /**\n\t     * Notes is a struct that has:\n\t     *\n\t     *  {\n\t     *    first_note: Note,\n\t     *    last_note: Note,\n\t     *    first_indices: [n1, n2, n3],\n\t     *    last_indices: [n1, n2, n3]\n\t     *  }\n\t     *\n\t     **/\n\t\n\t\n\t    _this.setAttribute('type', 'StaveTie');\n\t    _this.notes = notes;\n\t    _this.context = null;\n\t    _this.text = text;\n\t    _this.direction = null;\n\t\n\t    _this.render_options = {\n\t      cp1: 8, // Curve control point 1\n\t      cp2: 12, // Curve control point 2\n\t      text_shift_x: 0,\n\t      first_x_shift: 0,\n\t      last_x_shift: 0,\n\t      y_shift: 7,\n\t      tie_spacing: 0,\n\t      font: { family: 'Arial', size: 10, style: '' }\n\t    };\n\t\n\t    _this.font = _this.render_options.font;\n\t    _this.setNotes(notes);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(StaveTie, [{\n\t    key: 'setFont',\n\t    value: function setFont(font) {\n\t      this.font = font;return this;\n\t    }\n\t  }, {\n\t    key: 'setDirection',\n\t    value: function setDirection(direction) {\n\t      this.direction = direction;return this;\n\t    }\n\t\n\t    /**\n\t     * Set the notes to attach this tie to.\n\t     *\n\t     * @param {!Object} notes The notes to tie up.\n\t     */\n\t\n\t  }, {\n\t    key: 'setNotes',\n\t    value: function setNotes(notes) {\n\t      if (!notes.first_note && !notes.last_note) {\n\t        throw new _vex.Vex.RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');\n\t      }\n\t\n\t      if (!notes.first_indices) notes.first_indices = [0];\n\t      if (!notes.last_indices) notes.last_indices = [0];\n\t\n\t      if (notes.first_indices.length !== notes.last_indices.length) {\n\t        throw new _vex.Vex.RuntimeError('BadArguments', 'Tied notes must have similar index sizes');\n\t      }\n\t\n\t      // Success. Lets grab 'em notes.\n\t      this.first_note = notes.first_note;\n\t      this.first_indices = notes.first_indices;\n\t      this.last_note = notes.last_note;\n\t      this.last_indices = notes.last_indices;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * @return {boolean} Returns true if this is a partial bar.\n\t     */\n\t\n\t  }, {\n\t    key: 'isPartial',\n\t    value: function isPartial() {\n\t      return !this.first_note || !this.last_note;\n\t    }\n\t  }, {\n\t    key: 'renderTie',\n\t    value: function renderTie(params) {\n\t      if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'No Y-values to render');\n\t      }\n\t\n\t      var ctx = this.context;\n\t      var cp1 = this.render_options.cp1;\n\t      var cp2 = this.render_options.cp2;\n\t\n\t      if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\n\t        cp1 = 2;cp2 = 8;\n\t      }\n\t\n\t      var first_x_shift = this.render_options.first_x_shift;\n\t      var last_x_shift = this.render_options.last_x_shift;\n\t      var y_shift = this.render_options.y_shift * params.direction;\n\t\n\t      for (var i = 0; i < this.first_indices.length; ++i) {\n\t        var cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;\n\t        var first_y_px = params.first_ys[this.first_indices[i]] + y_shift;\n\t        var last_y_px = params.last_ys[this.last_indices[i]] + y_shift;\n\t\n\t        if (isNaN(first_y_px) || isNaN(last_y_px)) {\n\t          throw new _vex.Vex.RERR('BadArguments', 'Bad indices for tie rendering.');\n\t        }\n\t\n\t        var top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;\n\t        var bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;\n\t\n\t        ctx.beginPath();\n\t        ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\n\t        ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);\n\t        ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);\n\t        ctx.closePath();\n\t        ctx.fill();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'renderText',\n\t    value: function renderText(first_x_px, last_x_px) {\n\t      if (!this.text) return;\n\t      var center_x = (first_x_px + last_x_px) / 2;\n\t      center_x -= this.context.measureText(this.text).width / 2;\n\t\n\t      this.context.save();\n\t      this.context.setFont(this.font.family, this.font.size, this.font.style);\n\t      this.context.fillText(this.text, center_x + this.render_options.text_shift_x, (this.first_note || this.last_note).getStave().getYForTopText() - 1);\n\t      this.context.restore();\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      this.setRendered();\n\t\n\t      var first_note = this.first_note;\n\t      var last_note = this.last_note;\n\t\n\t      var first_x_px = void 0;\n\t      var last_x_px = void 0;\n\t      var first_ys = void 0;\n\t      var last_ys = void 0;\n\t      var stem_direction = void 0;\n\t      if (first_note) {\n\t        first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n\t        stem_direction = first_note.getStemDirection();\n\t        first_ys = first_note.getYs();\n\t      } else {\n\t        first_x_px = last_note.getStave().getTieStartX();\n\t        first_ys = last_note.getYs();\n\t        this.first_indices = this.last_indices;\n\t      }\n\t\n\t      if (last_note) {\n\t        last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n\t        stem_direction = last_note.getStemDirection();\n\t        last_ys = last_note.getYs();\n\t      } else {\n\t        last_x_px = first_note.getStave().getTieEndX();\n\t        last_ys = first_note.getYs();\n\t        this.last_indices = this.first_indices;\n\t      }\n\t\n\t      if (this.direction) {\n\t        stem_direction = this.direction;\n\t      }\n\t\n\t      this.renderTie({\n\t        first_x_px: first_x_px,\n\t        last_x_px: last_x_px,\n\t        first_ys: first_ys,\n\t        last_ys: last_ys,\n\t        direction: stem_direction\n\t      });\n\t\n\t      this.renderText(first_x_px, last_x_px);\n\t      return true;\n\t    }\n\t  }]);\n\n\t  return StaveTie;\n\t}(_element.Element);\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.TabTie = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _stavetie = __webpack_require__(33);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// This class implements varies types of ties between contiguous notes. The\n\t// ties include: regular ties, hammer ons, pull offs, and slides.\n\t\n\tvar TabTie = exports.TabTie = function (_StaveTie) {\n\t  _inherits(TabTie, _StaveTie);\n\t\n\t  _createClass(TabTie, null, [{\n\t    key: 'createHammeron',\n\t    value: function createHammeron(notes) {\n\t      return new TabTie(notes, 'H');\n\t    }\n\t  }, {\n\t    key: 'createPulloff',\n\t    value: function createPulloff(notes) {\n\t      return new TabTie(notes, 'P');\n\t    }\n\t  }]);\n\t\n\t  function TabTie(notes, text) {\n\t    _classCallCheck(this, TabTie);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TabTie).call(this, notes, text));\n\t    /**\n\t     * Notes is a struct that has:\n\t     *\n\t     *  {\n\t     *    first_note: Note,\n\t     *    last_note: Note,\n\t     *    first_indices: [n1, n2, n3],\n\t     *    last_indices: [n1, n2, n3]\n\t     *  }\n\t     *\n\t     **/\n\t\n\t\n\t    _this.setAttribute('type', 'TabTie');\n\t\n\t    _this.render_options.cp1 = 9;\n\t    _this.render_options.cp2 = 11;\n\t    _this.render_options.y_shift = 3;\n\t\n\t    _this.setNotes(notes);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(TabTie, [{\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      this.setRendered();\n\t\n\t      var first_note = this.first_note;\n\t      var last_note = this.last_note;\n\t      var first_x_px = void 0;\n\t      var last_x_px = void 0;\n\t      var first_ys = void 0;\n\t      var last_ys = void 0;\n\t\n\t      if (first_note) {\n\t        first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n\t        first_ys = first_note.getYs();\n\t      } else {\n\t        first_x_px = last_note.getStave().getTieStartX();\n\t        first_ys = last_note.getYs();\n\t        this.first_indices = this.last_indices;\n\t      }\n\t\n\t      if (last_note) {\n\t        last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n\t        last_ys = last_note.getYs();\n\t      } else {\n\t        last_x_px = first_note.getStave().getTieEndX();\n\t        last_ys = first_note.getYs();\n\t        this.last_indices = this.first_indices;\n\t      }\n\t\n\t      this.renderTie({\n\t        first_x_px: first_x_px,\n\t        last_x_px: last_x_px,\n\t        first_ys: first_ys,\n\t        last_ys: last_ys,\n\t        direction: -1 });\n\t\n\t      this.renderText(first_x_px, last_x_px);\n\t      return true;\n\t    }\n\t  }]);\n\n\t  return TabTie;\n\t}(_stavetie.StaveTie);\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Stroke = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _stavenote = __webpack_require__(20);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author: Larry Kuhns\n\t//\n\t// ## Description\n\t// This file implements the `Stroke` class which renders chord strokes\n\t// that can be arpeggiated, brushed, rasquedo, etc.\n\t\n\tvar Stroke = exports.Stroke = function (_Modifier) {\n\t  _inherits(Stroke, _Modifier);\n\t\n\t  _createClass(Stroke, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // Arrange strokes inside `ModifierContext`\n\t    value: function format(strokes, state) {\n\t      var left_shift = state.left_shift;\n\t      var stroke_spacing = 0;\n\t\n\t      if (!strokes || strokes.length === 0) return this;\n\t\n\t      var strokeList = strokes.map(function (stroke) {\n\t        var note = stroke.getNote();\n\t        if (note instanceof _stavenote.StaveNote) {\n\t          var _note$getKeyProps$str = note.getKeyProps()[stroke.getIndex()];\n\t          var line = _note$getKeyProps$str.line;\n\t          var displaced = _note$getKeyProps$str.displaced;\n\t\n\t          var shift = displaced ? note.getExtraLeftPx() : 0;\n\t          return { line: line, shift: shift, stroke: stroke };\n\t        } else {\n\t          var string = note.getPositions()[stroke.getIndex()].str;\n\t\n\t          return { line: string, shift: 0, stroke: stroke };\n\t        }\n\t      });\n\t\n\t      var strokeShift = left_shift;\n\t\n\t      // There can only be one stroke .. if more than one, they overlay each other\n\t      var xShift = strokeList.reduce(function (xShift, _ref) {\n\t        var stroke = _ref.stroke;\n\t        var shift = _ref.shift;\n\t\n\t        stroke.setXShift(strokeShift + shift);\n\t        return Math.max(stroke.getWidth() + stroke_spacing, xShift);\n\t      }, 0);\n\t\n\t      state.left_shift += xShift;\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'strokes';\n\t    }\n\t  }, {\n\t    key: 'Type',\n\t    get: function get() {\n\t      return {\n\t        BRUSH_DOWN: 1,\n\t        BRUSH_UP: 2,\n\t        ROLL_DOWN: 3, // Arpegiated chord\n\t        ROLL_UP: 4, // Arpegiated chord\n\t        RASQUEDO_DOWN: 5,\n\t        RASQUEDO_UP: 6\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function Stroke(type, options) {\n\t    _classCallCheck(this, Stroke);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Stroke).call(this));\n\t\n\t    _this.setAttribute('type', 'Stroke');\n\t\n\t    _this.note = null;\n\t    _this.options = _vex.Vex.Merge({}, options);\n\t\n\t    // multi voice - span stroke across all voices if true\n\t    _this.all_voices = 'all_voices' in _this.options ? _this.options.all_voices : true;\n\t\n\t    // multi voice - end note of stroke, set in draw()\n\t    _this.note_end = null;\n\t    _this.index = null;\n\t    _this.type = type;\n\t    _this.position = _modifier.Modifier.Position.LEFT;\n\t\n\t    _this.render_options = {\n\t      font_scale: 38,\n\t      stroke_px: 3,\n\t      stroke_spacing: 10\n\t    };\n\t\n\t    _this.font = {\n\t      family: 'serif',\n\t      size: 10,\n\t      weight: 'bold italic'\n\t    };\n\t\n\t    _this.setXShift(0);\n\t    _this.setWidth(10);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Stroke, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Stroke.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'getPosition',\n\t    value: function getPosition() {\n\t      return this.position;\n\t    }\n\t  }, {\n\t    key: 'addEndNote',\n\t    value: function addEndNote(note) {\n\t      this.note_end = note;return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      this.setRendered();\n\t\n\t      if (!(this.note && this.index != null)) {\n\t        throw new _vex.Vex.RERR('NoAttachedNote', \"Can't draw stroke without a note and index.\");\n\t      }\n\t\n\t      var start = this.note.getModifierStartXY(this.position, this.index);\n\t      var ys = this.note.getYs();\n\t      var topY = start.y;\n\t      var botY = start.y;\n\t      var x = start.x - 5;\n\t      var line_space = this.note.stave.options.spacing_between_lines_px;\n\t\n\t      var notes = this.getModifierContext().getModifiers(this.note.getCategory());\n\t      for (var i = 0; i < notes.length; i++) {\n\t        ys = notes[i].getYs();\n\t        for (var n = 0; n < ys.length; n++) {\n\t          if (this.note === notes[i] || this.all_voices) {\n\t            topY = _vex.Vex.Min(topY, ys[n]);\n\t            botY = _vex.Vex.Max(botY, ys[n]);\n\t          }\n\t        }\n\t      }\n\t\n\t      var arrow = void 0;\n\t      var arrow_shift_x = void 0;\n\t      var arrow_y = void 0;\n\t      var text_shift_x = void 0;\n\t      var text_y = void 0;\n\t      switch (this.type) {\n\t        case Stroke.Type.BRUSH_DOWN:\n\t          arrow = 'vc3';\n\t          arrow_shift_x = -3;\n\t          arrow_y = topY - line_space / 2 + 10;\n\t          botY += line_space / 2;\n\t          break;\n\t        case Stroke.Type.BRUSH_UP:\n\t          arrow = 'v11';\n\t          arrow_shift_x = 0.5;\n\t          arrow_y = botY + line_space / 2;\n\t          topY -= line_space / 2;\n\t          break;\n\t        case Stroke.Type.ROLL_DOWN:\n\t        case Stroke.Type.RASQUEDO_DOWN:\n\t          arrow = 'vc3';\n\t          arrow_shift_x = -3;\n\t          text_shift_x = this.x_shift + arrow_shift_x - 2;\n\t          if (this.note instanceof _stavenote.StaveNote) {\n\t            topY += 1.5 * line_space;\n\t            if ((botY - topY) % 2 !== 0) {\n\t              botY += 0.5 * line_space;\n\t            } else {\n\t              botY += line_space;\n\t            }\n\t            arrow_y = topY - line_space;\n\t            text_y = botY + line_space + 2;\n\t          } else {\n\t            topY += 1.5 * line_space;\n\t            botY += line_space;\n\t            arrow_y = topY - 0.75 * line_space;\n\t            text_y = botY + 0.25 * line_space;\n\t          }\n\t          break;\n\t        case Stroke.Type.ROLL_UP:\n\t        case Stroke.Type.RASQUEDO_UP:\n\t          arrow = 'v52';\n\t          arrow_shift_x = -4;\n\t          text_shift_x = this.x_shift + arrow_shift_x - 1;\n\t          if (this.note instanceof _stavenote.StaveNote) {\n\t            arrow_y = line_space / 2;\n\t            topY += 0.5 * line_space;\n\t            if ((botY - topY) % 2 === 0) {\n\t              botY += line_space / 2;\n\t            }\n\t            arrow_y = botY + 0.5 * line_space;\n\t            text_y = topY - 1.25 * line_space;\n\t          } else {\n\t            topY += 0.25 * line_space;\n\t            botY += 0.5 * line_space;\n\t            arrow_y = botY + 0.25 * line_space;\n\t            text_y = topY - line_space;\n\t          }\n\t          break;\n\t        default:\n\t          throw new _vex.Vex.RERR('InvalidType', 'The stroke type ' + this.type + ' does not exist');\n\t      }\n\t\n\t      // Draw the stroke\n\t      if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n\t        this.context.fillRect(x + this.x_shift, topY, 1, botY - topY);\n\t      } else {\n\t        if (this.note instanceof _stavenote.StaveNote) {\n\t          for (var _i = topY; _i <= botY; _i += line_space) {\n\t            _glyph.Glyph.renderGlyph(this.context, x + this.x_shift - 4, _i, this.render_options.font_scale, 'va3');\n\t          }\n\t        } else {\n\t          var _i2 = void 0;\n\t          for (_i2 = topY; _i2 <= botY; _i2 += 10) {\n\t            _glyph.Glyph.renderGlyph(this.context, x + this.x_shift - 4, _i2, this.render_options.font_scale, 'va3');\n\t          }\n\t          if (this.type === Stroke.Type.RASQUEDO_DOWN) {\n\t            text_y = _i2 + 0.25 * line_space;\n\t          }\n\t        }\n\t      }\n\t\n\t      // Draw the arrow head\n\t      _glyph.Glyph.renderGlyph(this.context, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow);\n\t\n\t      // Draw the rasquedo \"R\"\n\t      if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n\t        this.context.save();\n\t        this.context.setFont(this.font.family, this.font.size, this.font.weight);\n\t        this.context.fillText('R', x + text_shift_x, text_y);\n\t        this.context.restore();\n\t      }\n\t    }\n\t  }]);\n\n\t  return Stroke;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.StringNumber = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _renderer = __webpack_require__(10);\n\t\n\tvar _stavenote = __webpack_require__(20);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author: Larry Kuhns\n\t//\n\t// ## Description\n\t// This file implements the `StringNumber` class which renders string\n\t// number annotations beside notes.\n\t\n\tvar StringNumber = exports.StringNumber = function (_Modifier) {\n\t  _inherits(StringNumber, _Modifier);\n\t\n\t  _createClass(StringNumber, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // ## Static Methods\n\t    // Arrange string numbers inside a `ModifierContext`\n\t    value: function format(nums, state) {\n\t      var left_shift = state.left_shift;\n\t      var right_shift = state.right_shift;\n\t      var num_spacing = 1;\n\t\n\t      if (!nums || nums.length === 0) return this;\n\t\n\t      var nums_list = [];\n\t      var prev_note = null;\n\t      var shift_left = 0;\n\t      var shift_right = 0;\n\t\n\t      var i = void 0;\n\t      var num = void 0;\n\t      var note = void 0;\n\t      var pos = void 0;\n\t      var props_tmp = void 0;\n\t      for (i = 0; i < nums.length; ++i) {\n\t        num = nums[i];\n\t        note = num.getNote();\n\t\n\t        for (i = 0; i < nums.length; ++i) {\n\t          num = nums[i];\n\t          note = num.getNote();\n\t          pos = num.getPosition();\n\t          var props = note.getKeyProps()[num.getIndex()];\n\t\n\t          if (note !== prev_note) {\n\t            for (var n = 0; n < note.keys.length; ++n) {\n\t              props_tmp = note.getKeyProps()[n];\n\t              if (left_shift === 0) {\n\t                shift_left = props_tmp.displaced ? note.getExtraLeftPx() : shift_left;\n\t              }\n\t              if (right_shift === 0) {\n\t                shift_right = props_tmp.displaced ? note.getExtraRightPx() : shift_right;\n\t              }\n\t            }\n\t            prev_note = note;\n\t          }\n\t\n\t          nums_list.push({\n\t            pos: pos,\n\t            note: note,\n\t            num: num,\n\t            line: props.line,\n\t            shiftL: shift_left,\n\t            shiftR: shift_right\n\t          });\n\t        }\n\t      }\n\t\n\t      // Sort string numbers by line number.\n\t      nums_list.sort(function (a, b) {\n\t        return b.line - a.line;\n\t      });\n\t\n\t      // TODO: This variable never gets assigned to anything. Is that a bug or can this be removed?\n\t      var num_shiftL = 0; // eslint-disable-line\n\t      var num_shiftR = 0;\n\t      var x_widthL = 0;\n\t      var x_widthR = 0;\n\t      var last_line = null;\n\t      var last_note = null;\n\t      for (i = 0; i < nums_list.length; ++i) {\n\t        var num_shift = 0;\n\t        note = nums_list[i].note;\n\t        pos = nums_list[i].pos;\n\t        num = nums_list[i].num;\n\t        var line = nums_list[i].line;\n\t        var shiftL = nums_list[i].shiftL;\n\t        var shiftR = nums_list[i].shiftR;\n\t\n\t        // Reset the position of the string number every line.\n\t        if (line !== last_line || note !== last_note) {\n\t          num_shiftL = left_shift + shiftL;\n\t          num_shiftR = right_shift + shiftR;\n\t        }\n\t\n\t        var num_width = num.getWidth() + num_spacing;\n\t        if (pos === _modifier.Modifier.Position.LEFT) {\n\t          num.setXShift(left_shift);\n\t          num_shift = shift_left + num_width; // spacing\n\t          x_widthL = num_shift > x_widthL ? num_shift : x_widthL;\n\t        } else if (pos === _modifier.Modifier.Position.RIGHT) {\n\t          num.setXShift(num_shiftR);\n\t          num_shift += num_width; // spacing\n\t          x_widthR = num_shift > x_widthR ? num_shift : x_widthR;\n\t        }\n\t        last_line = line;\n\t        last_note = note;\n\t      }\n\t\n\t      state.left_shift += x_widthL;\n\t      state.right_shift += x_widthR;\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'stringnumber';\n\t    }\n\t  }]);\n\t\n\t  function StringNumber(number) {\n\t    _classCallCheck(this, StringNumber);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StringNumber).call(this));\n\t\n\t    _this.setAttribute('type', 'StringNumber');\n\t\n\t    _this.note = null;\n\t    _this.last_note = null;\n\t    _this.index = null;\n\t    _this.string_number = number;\n\t    _this.setWidth(20); // ???\n\t    _this.position = _modifier.Modifier.Position.ABOVE; // Default position above stem or note head\n\t    _this.x_shift = 0;\n\t    _this.y_shift = 0;\n\t    _this.x_offset = 0; // Horizontal offset from default\n\t    _this.y_offset = 0; // Vertical offset from default\n\t    _this.dashed = true; // true - draw dashed extension  false - no extension\n\t    _this.leg = _renderer.Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n\t    _this.radius = 8;\n\t    _this.font = {\n\t      family: 'sans-serif',\n\t      size: 10,\n\t      weight: 'bold'\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  _createClass(StringNumber, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return StringNumber.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'getNote',\n\t    value: function getNote() {\n\t      return this.note;\n\t    }\n\t  }, {\n\t    key: 'setNote',\n\t    value: function setNote(note) {\n\t      this.note = note;return this;\n\t    }\n\t  }, {\n\t    key: 'getIndex',\n\t    value: function getIndex() {\n\t      return this.index;\n\t    }\n\t  }, {\n\t    key: 'setIndex',\n\t    value: function setIndex(index) {\n\t      this.index = index;return this;\n\t    }\n\t  }, {\n\t    key: 'setLineEndType',\n\t    value: function setLineEndType(leg) {\n\t      if (leg >= _renderer.Renderer.LineEndType.NONE && leg <= _renderer.Renderer.LineEndType.DOWN) {\n\t        this.leg = leg;\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getPosition',\n\t    value: function getPosition() {\n\t      return this.position;\n\t    }\n\t  }, {\n\t    key: 'setPosition',\n\t    value: function setPosition(position) {\n\t      if (position >= _modifier.Modifier.Position.LEFT && position <= _modifier.Modifier.Position.BELOW) {\n\t        this.position = position;\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setStringNumber',\n\t    value: function setStringNumber(number) {\n\t      this.string_number = number;return this;\n\t    }\n\t  }, {\n\t    key: 'setOffsetX',\n\t    value: function setOffsetX(x) {\n\t      this.x_offset = x;return this;\n\t    }\n\t  }, {\n\t    key: 'setOffsetY',\n\t    value: function setOffsetY(y) {\n\t      this.y_offset = y;return this;\n\t    }\n\t  }, {\n\t    key: 'setLastNote',\n\t    value: function setLastNote(note) {\n\t      this.last_note = note;return this;\n\t    }\n\t  }, {\n\t    key: 'setDashed',\n\t    value: function setDashed(dashed) {\n\t      this.dashed = dashed;return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var ctx = this.checkContext();\n\t      if (!(this.note && this.index != null)) {\n\t        throw new _vex.Vex.RERR('NoAttachedNote', \"Can't draw string number without a note and index.\");\n\t      }\n\t      this.setRendered();\n\t\n\t      var line_space = this.note.stave.options.spacing_between_lines_px;\n\t\n\t      var start = this.note.getModifierStartXY(this.position, this.index);\n\t      var dot_x = start.x + this.x_shift + this.x_offset;\n\t      var dot_y = start.y + this.y_shift + this.y_offset;\n\t\n\t      switch (this.position) {\n\t        case _modifier.Modifier.Position.ABOVE:\n\t        case _modifier.Modifier.Position.BELOW:\n\t          {\n\t            var stem_ext = this.note.getStemExtents();\n\t            var top = stem_ext.topY;\n\t            var bottom = stem_ext.baseY + 2;\n\t\n\t            if (this.note.stem_direction === _stavenote.StaveNote.STEM_DOWN) {\n\t              top = stem_ext.baseY;\n\t              bottom = stem_ext.topY - 2;\n\t            }\n\t\n\t            if (this.position === _modifier.Modifier.Position.ABOVE) {\n\t              dot_y = this.note.hasStem() ? top - line_space * 1.75 : start.y - line_space * 1.75;\n\t            } else {\n\t              dot_y = this.note.hasStem() ? bottom + line_space * 1.5 : start.y + line_space * 1.75;\n\t            }\n\t\n\t            dot_y += this.y_shift + this.y_offset;\n\t\n\t            break;\n\t          }case _modifier.Modifier.Position.LEFT:\n\t          dot_x -= this.radius / 2 + 5;\n\t          break;\n\t        case _modifier.Modifier.Position.RIGHT:\n\t          dot_x += this.radius / 2 + 6;\n\t          break;\n\t        default:\n\t          throw new _vex.Vex.RERR('InvalidPosition', 'The position ' + this.position + ' is invalid');\n\t      }\n\t\n\t      ctx.save();\n\t      ctx.beginPath();\n\t      ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\n\t      ctx.lineWidth = 1.5;\n\t      ctx.stroke();\n\t      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\t      var x = dot_x - ctx.measureText(this.string_number).width / 2;\n\t      ctx.fillText('' + this.string_number, x, dot_y + 4.5);\n\t\n\t      if (this.last_note != null) {\n\t        var end = this.last_note.getStemX() - this.note.getX() + 5;\n\t        ctx.strokeStyle = '#000000';\n\t        ctx.lineCap = 'round';\n\t        ctx.lineWidth = 0.6;\n\t        if (this.dashed) {\n\t          _renderer.Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);\n\t        } else {\n\t          _renderer.Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);\n\t        }\n\t\n\t        var len = void 0;\n\t        var pattern = void 0;\n\t        switch (this.leg) {\n\t          case _renderer.Renderer.LineEndType.UP:\n\t            len = -10;\n\t            pattern = this.dashed ? [3, 3] : [3, 0];\n\t            _renderer.Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n\t            break;\n\t          case _renderer.Renderer.LineEndType.DOWN:\n\t            len = 10;\n\t            pattern = this.dashed ? [3, 3] : [3, 0];\n\t            _renderer.Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n\t            break;\n\t          default:\n\t            break;\n\t        }\n\t      }\n\t\n\t      ctx.restore();\n\t    }\n\t  }]);\n\n\t  return StringNumber;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Articulation = undefined;\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tvar _stem = __webpack_require__(17);\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author: Larry Kuhns.\n\t//\n\t// ## Description\n\t//\n\t// This file implements articulations and accents as modifiers that can be\n\t// attached to notes. The complete list of articulations is available in\n\t// `tables.js` under `Vex.Flow.articulationCodes`.\n\t//\n\t// See `tests/articulation_tests.js` for usage examples.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (Articulation.DEBUG) _vex.Vex.L('Vex.Flow.Articulation', args);\n\t}\n\t\n\tvar _Modifier$Position = _modifier.Modifier.Position;\n\tvar ABOVE = _Modifier$Position.ABOVE;\n\tvar BELOW = _Modifier$Position.BELOW;\n\t\n\t\n\tvar roundToNearestHalf = function roundToNearestHalf(mathFn, value) {\n\t  return mathFn(value / 0.5) * 0.5;\n\t};\n\t\n\t// This includes both staff and ledger lines\n\tvar isWithinLines = function isWithinLines(line, position) {\n\t  return position === ABOVE ? line <= 5 : line >= 1;\n\t};\n\t\n\tvar getRoundingFunction = function getRoundingFunction(line, position) {\n\t  if (isWithinLines(line, position)) {\n\t    if (position === ABOVE) {\n\t      return Math.ceil;\n\t    } else {\n\t      return Math.floor;\n\t    }\n\t  } else {\n\t    return Math.round;\n\t  }\n\t};\n\t\n\tvar snapLineToStaff = function snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {\n\t  // Initially, snap to nearest staff line or space\n\t  var snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n\t  var canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n\t  var onStaffLine = snappedLine % 1 === 0;\n\t\n\t  if (canSnapToStaffSpace && onStaffLine) {\n\t    var HALF_STAFF_SPACE = 0.5;\n\t    return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n\t  } else {\n\t    return snappedLine;\n\t  }\n\t};\n\t\n\tvar getTopY = function getTopY(note, textLine) {\n\t  var stave = note.getStave();\n\t  var stemDirection = note.getStemDirection();\n\t\n\t  var _note$getStemExtents = note.getStemExtents();\n\t\n\t  var stemTipY = _note$getStemExtents.topY;\n\t  var stemBaseY = _note$getStemExtents.baseY;\n\t\n\t\n\t  if (note.getCategory() === 'stavenotes') {\n\t    if (note.hasStem()) {\n\t      if (stemDirection === _stem.Stem.UP) {\n\t        return stemTipY;\n\t      } else {\n\t        return stemBaseY;\n\t      }\n\t    } else {\n\t      return Math.min.apply(Math, _toConsumableArray(note.getYs()));\n\t    }\n\t  } else if (note.getCategory() === 'tabnotes') {\n\t    if (note.hasStem()) {\n\t      if (stemDirection === _stem.Stem.UP) {\n\t        return stemTipY;\n\t      } else {\n\t        return stave.getYForTopText(textLine);\n\t      }\n\t    } else {\n\t      return stave.getYForTopText(textLine);\n\t    }\n\t  } else {\n\t    throw new _vex.Vex.RERR('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n\t  }\n\t};\n\t\n\tvar getBottomY = function getBottomY(note, textLine) {\n\t  var stave = note.getStave();\n\t  var stemDirection = note.getStemDirection();\n\t\n\t  var _note$getStemExtents2 = note.getStemExtents();\n\t\n\t  var stemTipY = _note$getStemExtents2.topY;\n\t  var stemBaseY = _note$getStemExtents2.baseY;\n\t\n\t\n\t  if (note.getCategory() === 'stavenotes') {\n\t    if (note.hasStem()) {\n\t      if (stemDirection === _stem.Stem.UP) {\n\t        return stemBaseY;\n\t      } else {\n\t        return stemTipY;\n\t      }\n\t    } else {\n\t      return Math.max.apply(Math, _toConsumableArray(note.getYs()));\n\t    }\n\t  } else if (note.getCategory() === 'tabnotes') {\n\t    if (note.hasStem()) {\n\t      if (stemDirection === _stem.Stem.UP) {\n\t        return stave.getYForBottomText(textLine);\n\t      } else {\n\t        return stemTipY;\n\t      }\n\t    } else {\n\t      return stave.getYForBottomText(textLine);\n\t    }\n\t  } else {\n\t    throw new _vex.Vex.RERR('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n\t  }\n\t};\n\t\n\t// Gets the initial offset of the articulation from the y value of the starting position.\n\t// This is required because the top/bottom text positions already have spacing applied to\n\t// provide a \"visually pleasent\" default position. However the y values provided from\n\t// the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n\t// normalizes this asymmetry.\n\tvar getInitialOffset = function getInitialOffset(note, position) {\n\t  var isOnStemTip = position === ABOVE && note.getStemDirection() === _stem.Stem.UP || position === BELOW && note.getStemDirection() === _stem.Stem.DOWN;\n\t\n\t  if (note.getCategory() === 'stavenotes') {\n\t    if (note.hasStem() && isOnStemTip) {\n\t      return 0.5;\n\t    } else {\n\t      // this amount is larger than the stem-tip offset because we start from\n\t      // the center of the notehead\n\t      return 1;\n\t    }\n\t  } else {\n\t    if (note.hasStem() && isOnStemTip) {\n\t      return 1;\n\t    } else {\n\t      return 0;\n\t    }\n\t  }\n\t};\n\t\n\tvar Articulation = exports.Articulation = function (_Modifier) {\n\t  _inherits(Articulation, _Modifier);\n\t\n\t  _createClass(Articulation, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // FIXME:\n\t    // Most of the complex formatting logic (ie: snapping to space) is\n\t    // actually done in .render(). But that logic belongs in this method.\n\t    //\n\t    // Unfortunately, this isn't possible because, by this point, stem lengths\n\t    // have not yet been finalized. Finalized stem lengths are required to determine the\n\t    // initial position of any stem-side articulation.\n\t    //\n\t    // This indicates that all objects should have their stave set before being\n\t    // formatted. It can't be an optional if you want accurate vertical positioning.\n\t    // Consistently positioned articulations that play nice with other modifiers\n\t    // won't be possible until we stop relying on render-time formatting.\n\t    //\n\t    // Ideally, when this function has completed, the vertical articulation positions\n\t    // should be ready to render without further adjustment. But the current state\n\t    // is far from this ideal.\n\t    value: function format(articulations, state) {\n\t      if (!articulations || articulations.length === 0) return false;\n\t\n\t      var isAbove = function isAbove(artic) {\n\t        return artic.getPosition() === ABOVE;\n\t      };\n\t      var isBelow = function isBelow(artic) {\n\t        return artic.getPosition() === BELOW;\n\t      };\n\t      var margin = 0.5;\n\t      var getIncrement = function getIncrement(articulation, line, position) {\n\t        return roundToNearestHalf(getRoundingFunction(line, position), articulation.glyph.getMetrics().height / 10 + margin);\n\t      };\n\t\n\t      articulations.filter(isAbove).forEach(function (articulation) {\n\t        articulation.setTextLine(state.top_text_line);\n\t        state.top_text_line += getIncrement(articulation, state.top_text_line, ABOVE);\n\t      });\n\t\n\t      articulations.filter(isBelow).forEach(function (articulation) {\n\t        articulation.setTextLine(state.text_line);\n\t        state.text_line += getIncrement(articulation, state.text_line, BELOW);\n\t      });\n\t\n\t      var width = articulations.map(function (articulation) {\n\t        return articulation.getWidth();\n\t      }).reduce(function (maxWidth, articWidth) {\n\t        return Math.max(articWidth, maxWidth);\n\t      });\n\t\n\t      state.left_shift += width / 2;\n\t      state.right_shift += width / 2;\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'easyScoreHook',\n\t    value: function easyScoreHook(_ref, note, builder) {\n\t      var articulations = _ref.articulations;\n\t\n\t      if (!articulations) return;\n\t\n\t      var articNameToCode = {\n\t        staccato: 'a.',\n\t        tenuto: 'a-'\n\t      };\n\t\n\t      articulations.split(',').map(function (articString) {\n\t        return articString.trim().split('.');\n\t      }).map(function (_ref2) {\n\t        var _ref3 = _slicedToArray(_ref2, 2);\n\t\n\t        var name = _ref3[0];\n\t        var position = _ref3[1];\n\t\n\t        var artic = { type: articNameToCode[name] };\n\t        if (position) artic.position = _modifier.Modifier.PositionString[position];\n\t        return builder.getFactory().Articulation(artic);\n\t      }).map(function (artic) {\n\t        return note.addModifier(0, artic);\n\t      });\n\t    }\n\t\n\t    // Create a new articulation of type `type`, which is an entry in\n\t    // `Vex.Flow.articulationCodes` in `tables.js`.\n\t\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'articulations';\n\t    }\n\t  }, {\n\t    key: 'INITIAL_OFFSET',\n\t    get: function get() {\n\t      return -0.5;\n\t    }\n\t  }]);\n\t\n\t  function Articulation(type) {\n\t    _classCallCheck(this, Articulation);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Articulation).call(this));\n\t\n\t    _this.setAttribute('type', 'Articulation');\n\t\n\t    _this.note = null;\n\t    _this.index = null;\n\t    _this.type = type;\n\t    _this.position = BELOW;\n\t    _this.render_options = {\n\t      font_scale: 38\n\t    };\n\t\n\t    _this.articulation = _tables.Flow.articulationCodes(_this.type);\n\t    if (!_this.articulation) {\n\t      throw new _vex.Vex.RERR('ArgumentError', 'Articulation not found: ' + _this.type);\n\t    }\n\t\n\t    _this.glyph = new _glyph.Glyph(_this.articulation.code, _this.render_options.font_scale);\n\t\n\t    _this.setWidth(_this.glyph.getMetrics().width);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Articulation, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Articulation.CATEGORY;\n\t    }\n\t\n\t    // Render articulation in position next to note.\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var _ABOVE$BELOW$position;\n\t\n\t      var note = this.note;\n\t      var index = this.index;\n\t      var position = this.position;\n\t      var glyph = this.glyph;\n\t      var canSitBetweenLines = this.articulation.between_lines;\n\t      var textLine = this.text_line;\n\t      var ctx = this.context;\n\t\n\t\n\t      this.checkContext();\n\t\n\t      if (!note || index == null) {\n\t        throw new _vex.Vex.RERR('NoAttachedNote', \"Can't draw Articulation without a note and index.\");\n\t      }\n\t\n\t      this.setRendered();\n\t\n\t      var stave = note.getStave();\n\t      var staffSpace = stave.getSpacingBetweenLines();\n\t      var isTab = note.getCategory() === 'tabnotes';\n\t\n\t      // Articulations are centered over/under the note head.\n\t\n\t      var _note$getModifierStar = note.getModifierStartXY(position, index);\n\t\n\t      var x = _note$getModifierStar.x;\n\t\n\t      var shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n\t\n\t      var initialOffset = getInitialOffset(note, position);\n\t\n\t      var y = (_ABOVE$BELOW$position = {}, _defineProperty(_ABOVE$BELOW$position, ABOVE, function () {\n\t        glyph.setOrigin(0.5, 1);\n\t        var y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n\t        return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n\t      }), _defineProperty(_ABOVE$BELOW$position, BELOW, function () {\n\t        glyph.setOrigin(0.5, 0);\n\t        var y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n\t        return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n\t      }), _ABOVE$BELOW$position)[position]();\n\t\n\t      if (!isTab) {\n\t        var offsetDirection = position === ABOVE ? -1 : +1;\n\t        var noteLine = isTab ? note.positions[index].str : note.getKeyProps()[index].line;\n\t        var distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n\t        var articLine = distanceFromNote + noteLine;\n\t        var snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n\t\n\t        if (isWithinLines(snappedLine, position)) glyph.setOrigin(0.5, 0.5);\n\t\n\t        y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection;\n\t      }\n\t\n\t      L('Rendering articulation at (x: ' + x + ', y: ' + y + ')');\n\t\n\t      glyph.render(ctx, x, y);\n\t    }\n\t  }]);\n\n\t  return Articulation;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Ornament = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _tickcontext = __webpack_require__(39);\n\t\n\tvar _stavenote = __webpack_require__(20);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author: Cyril Silverman\n\t//\n\t// ## Description\n\t//\n\t// This file implements ornaments as modifiers that can be\n\t// attached to notes. The complete list of ornaments is available in\n\t// `tables.js` under `Vex.Flow.ornamentCodes`.\n\t//\n\t// See `tests/ornament_tests.js` for usage examples.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (Ornament.DEBUG) _vex.Vex.L('Vex.Flow.Ornament', args);\n\t}\n\t\n\tvar Ornament = exports.Ornament = function (_Modifier) {\n\t  _inherits(Ornament, _Modifier);\n\t\n\t  _createClass(Ornament, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // ## Static Methods\n\t    // Arrange ornaments inside `ModifierContext`\n\t    value: function format(ornaments, state) {\n\t      if (!ornaments || ornaments.length === 0) return false;\n\t\n\t      var width = 0;\n\t      for (var i = 0; i < ornaments.length; ++i) {\n\t        var ornament = ornaments[i];\n\t        var increment = 2;\n\t\n\t        width = Math.max(ornament.getWidth(), width);\n\t\n\t        if (ornament.getPosition() === _modifier.Modifier.Position.ABOVE) {\n\t          ornament.setTextLine(state.top_text_line);\n\t          state.top_text_line += increment;\n\t        } else {\n\t          ornament.setTextLine(state.text_line);\n\t          state.text_line += increment;\n\t        }\n\t      }\n\t\n\t      state.left_shift += width / 2;\n\t      state.right_shift += width / 2;\n\t      return true;\n\t    }\n\t\n\t    // Create a new ornament of type `type`, which is an entry in\n\t    // `Vex.Flow.ornamentCodes` in `tables.js`.\n\t\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'ornaments';\n\t    }\n\t  }]);\n\t\n\t  function Ornament(type) {\n\t    _classCallCheck(this, Ornament);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Ornament).call(this));\n\t\n\t    _this.setAttribute('type', 'Ornament');\n\t\n\t    _this.note = null;\n\t    _this.index = null;\n\t    _this.type = type;\n\t    _this.position = _modifier.Modifier.Position.ABOVE;\n\t    _this.delayed = false;\n\t\n\t    _this.accidentalUpper = null;\n\t    _this.accidentalLower = null;\n\t\n\t    _this.render_options = {\n\t      font_scale: 38,\n\t      accidentalLowerPadding: 3,\n\t      accidentalUpperPadding: 3\n\t    };\n\t\n\t    _this.ornament = _tables.Flow.ornamentCodes(_this.type);\n\t    if (!_this.ornament) {\n\t      throw new _vex.Vex.RERR('ArgumentError', 'Ornament not found: \\'' + _this.type + '\\'');\n\t    }\n\t\n\t    _this.glyph = new _glyph.Glyph(_this.ornament.code, _this.render_options.font_scale);\n\t    _this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Ornament, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Ornament.CATEGORY;\n\t    }\n\t\n\t    // Set whether the ornament is to be delayed\n\t\n\t  }, {\n\t    key: 'setDelayed',\n\t    value: function setDelayed(delayed) {\n\t      this.delayed = delayed;return this;\n\t    }\n\t\n\t    // Set the upper accidental for the ornament\n\t\n\t  }, {\n\t    key: 'setUpperAccidental',\n\t    value: function setUpperAccidental(accid) {\n\t      var scale = this.render_options.font_scale / 1.3;\n\t      this.accidentalUpper = new _glyph.Glyph(_tables.Flow.accidentalCodes(accid).code, scale);\n\t      this.accidentalUpper.setOrigin(0.5, 1.0);\n\t      return this;\n\t    }\n\t\n\t    // Set the lower accidental for the ornament\n\t\n\t  }, {\n\t    key: 'setLowerAccidental',\n\t    value: function setLowerAccidental(accid) {\n\t      var scale = this.render_options.font_scale / 1.3;\n\t      this.accidentalLower = new _glyph.Glyph(_tables.Flow.accidentalCodes(accid).code, scale);\n\t      this.accidentalLower.setOrigin(0.5, 1.0);\n\t      return this;\n\t    }\n\t\n\t    // Render ornament in position next to note.\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t\n\t      if (!this.note || this.index == null) {\n\t        throw new _vex.Vex.RERR('NoAttachedNote', \"Can't draw Ornament without a note and index.\");\n\t      }\n\t\n\t      this.setRendered();\n\t\n\t      var ctx = this.context;\n\t      var stemDir = this.note.getStemDirection();\n\t      var stave = this.note.getStave();\n\t\n\t      // Get stem extents\n\t      var stemExtents = this.note.getStem().getExtents();\n\t      var y = stemDir === _stavenote.StaveNote.STEM_DOWN ? stemExtents.baseY : stemExtents.topY;\n\t\n\t      // TabNotes don't have stems attached to them. Tab stems are rendered\n\t      // outside the stave.\n\t      if (this.note.getCategory() === 'tabnotes') {\n\t        if (this.note.hasStem()) {\n\t          if (stemDir === _stavenote.StaveNote.STEM_DOWN) {\n\t            y = stave.getYForTopText(this.text_line);\n\t          }\n\t        } else {\n\t          // Without a stem\n\t          y = stave.getYForTopText(this.text_line);\n\t        }\n\t      }\n\t\n\t      var isPlacedOnNoteheadSide = stemDir === _stavenote.StaveNote.STEM_DOWN;\n\t      var spacing = stave.getSpacingBetweenLines();\n\t      var lineSpacing = 1;\n\t\n\t      // Beamed stems are longer than quarter note stems, adjust accordingly\n\t      if (!isPlacedOnNoteheadSide && this.note.beam) {\n\t        lineSpacing += 0.5;\n\t      }\n\t\n\t      var totalSpacing = spacing * (this.text_line + lineSpacing);\n\t      var glyphYBetweenLines = y - totalSpacing;\n\t\n\t      // Get initial coordinates for the modifier position\n\t      var start = this.note.getModifierStartXY(this.position, this.index);\n\t      var glyphX = start.x;\n\t      var glyphY = Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);\n\t      glyphY += this.y_shift;\n\t\n\t      // Ajdust x position if ornament is delayed\n\t      if (this.delayed) {\n\t        glyphX += this.glyph.getMetrics().width;\n\t        var nextContext = _tickcontext.TickContext.getNextContext(this.note.getTickContext());\n\t        if (nextContext) {\n\t          glyphX += (nextContext.getX() - glyphX) * 0.5;\n\t        } else {\n\t          glyphX += (stave.x + stave.width - glyphX) * 0.5;\n\t        }\n\t      }\n\t\n\t      L('Rendering ornament: ', this.ornament, glyphX, glyphY);\n\t\n\t      if (this.accidentalLower) {\n\t        this.accidentalLower.render(ctx, glyphX, glyphY);\n\t        glyphY -= this.accidentalLower.getMetrics().height;\n\t        glyphY -= this.render_options.accidentalLowerPadding;\n\t      }\n\t\n\t      this.glyph.render(ctx, glyphX, glyphY);\n\t      glyphY -= this.glyph.getMetrics().height;\n\t\n\t      if (this.accidentalUpper) {\n\t        glyphY -= this.render_options.accidentalUpperPadding;\n\t        this.accidentalUpper.render(ctx, glyphX, glyphY);\n\t      }\n\t    }\n\t  }]);\n\n\t  return Ornament;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.TickContext = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tickable = __webpack_require__(23);\n\t\n\tvar _fraction = __webpack_require__(3);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// A formatter for abstract tickable objects, such as notes, chords,\n\t// tabs, etc.\n\t\n\tvar TickContext = exports.TickContext = function (_Tickable) {\n\t  _inherits(TickContext, _Tickable);\n\t\n\t  _createClass(TickContext, null, [{\n\t    key: 'getNextContext',\n\t    value: function getNextContext(tContext) {\n\t      var contexts = tContext.tContexts;\n\t      var index = contexts.indexOf(tContext);\n\t\n\t      return contexts[index + 1];\n\t    }\n\t  }]);\n\t\n\t  function TickContext() {\n\t    _classCallCheck(this, TickContext);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TickContext).call(this));\n\t\n\t    _this.setAttribute('type', 'TickContext');\n\t    _this.currentTick = new _fraction.Fraction(0, 1);\n\t    _this.maxTicks = new _fraction.Fraction(0, 1);\n\t    _this.minTicks = null;\n\t    _this.padding = 3; // padding on each side (width += padding * 2)\n\t    _this.x = 0;\n\t    _this.tickables = []; // Notes, tabs, chords, lyrics.\n\t    _this.notePx = 0; // width of widest note in this context\n\t    _this.extraLeftPx = 0; // Extra left pixels for modifers & displace notes\n\t    _this.extraRightPx = 0; // Extra right pixels for modifers & displace notes\n\t    _this.tContexts = []; // Parent array of tick contexts\n\t    return _this;\n\t  }\n\t\n\t  _createClass(TickContext, [{\n\t    key: 'getX',\n\t    value: function getX() {\n\t      return this.x;\n\t    }\n\t  }, {\n\t    key: 'setX',\n\t    value: function setX(x) {\n\t      this.x = x;return this;\n\t    }\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      return this.width + this.padding * 2;\n\t    }\n\t  }, {\n\t    key: 'setPadding',\n\t    value: function setPadding(padding) {\n\t      this.padding = padding;return this;\n\t    }\n\t  }, {\n\t    key: 'getMaxTicks',\n\t    value: function getMaxTicks() {\n\t      return this.maxTicks;\n\t    }\n\t  }, {\n\t    key: 'getMinTicks',\n\t    value: function getMinTicks() {\n\t      return this.minTicks;\n\t    }\n\t  }, {\n\t    key: 'getTickables',\n\t    value: function getTickables() {\n\t      return this.tickables;\n\t    }\n\t  }, {\n\t    key: 'getCenterAlignedTickables',\n\t    value: function getCenterAlignedTickables() {\n\t      return this.tickables.filter(function (tickable) {\n\t        return tickable.isCenterAligned();\n\t      });\n\t    }\n\t\n\t    // Get widths context, note and left/right modifiers for formatting\n\t\n\t  }, {\n\t    key: 'getMetrics',\n\t    value: function getMetrics() {\n\t      return { width: this.width, notePx: this.notePx,\n\t        extraLeftPx: this.extraLeftPx, extraRightPx: this.extraRightPx };\n\t    }\n\t  }, {\n\t    key: 'getCurrentTick',\n\t    value: function getCurrentTick() {\n\t      return this.currentTick;\n\t    }\n\t  }, {\n\t    key: 'setCurrentTick',\n\t    value: function setCurrentTick(tick) {\n\t      this.currentTick = tick;\n\t      this.preFormatted = false;\n\t    }\n\t\n\t    // ### DEPRECATED ###\n\t    // Get left & right pixels used for modifiers. THIS METHOD IS DEPRECATED. Use\n\t    // the getMetrics() method instead!\n\t\n\t  }, {\n\t    key: 'getExtraPx',\n\t    value: function getExtraPx() {\n\t      var left_shift = 0;\n\t      var right_shift = 0;\n\t      var extraLeftPx = 0;\n\t      var extraRightPx = 0;\n\t      for (var i = 0; i < this.tickables.length; i++) {\n\t        extraLeftPx = Math.max(this.tickables[i].extraLeftPx || 0, extraLeftPx);\n\t        extraRightPx = Math.max(this.tickables[i].extraRightPx || 0, extraRightPx);\n\t        var mContext = this.tickables[i].modifierContext;\n\t        if (mContext && mContext != null) {\n\t          left_shift = Math.max(left_shift, mContext.state.left_shift);\n\t          right_shift = Math.max(right_shift, mContext.state.right_shift);\n\t        }\n\t      }\n\t      return {\n\t        left: left_shift,\n\t        right: right_shift,\n\t        extraLeft: extraLeftPx,\n\t        extraRight: extraRightPx\n\t      };\n\t    }\n\t  }, {\n\t    key: 'addTickable',\n\t    value: function addTickable(tickable) {\n\t      if (!tickable) {\n\t        throw new _vex.Vex.RERR('BadArgument', 'Invalid tickable added.');\n\t      }\n\t\n\t      if (!tickable.shouldIgnoreTicks()) {\n\t        this.ignore_ticks = false;\n\t\n\t        var ticks = tickable.getTicks();\n\t\n\t        if (ticks.greaterThan(this.maxTicks)) {\n\t          this.maxTicks = ticks.clone();\n\t        }\n\t\n\t        if (this.minTicks == null) {\n\t          this.minTicks = ticks.clone();\n\t        } else if (ticks.lessThan(this.minTicks)) {\n\t          this.minTicks = ticks.clone();\n\t        }\n\t      }\n\t\n\t      tickable.setTickContext(this);\n\t      this.tickables.push(tickable);\n\t      this.preFormatted = false;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      if (this.preFormatted) return this;\n\t\n\t      for (var i = 0; i < this.tickables.length; ++i) {\n\t        var tickable = this.tickables[i];\n\t        tickable.preFormat();\n\t        var metrics = tickable.getMetrics();\n\t\n\t        // Maintain max extra pixels from all tickables in the context\n\t        this.extraLeftPx = Math.max(this.extraLeftPx, metrics.extraLeftPx + metrics.modLeftPx);\n\t        this.extraRightPx = Math.max(this.extraRightPx, metrics.extraRightPx + metrics.modRightPx);\n\t\n\t        // Maintain the widest note for all tickables in the context\n\t        this.notePx = Math.max(this.notePx, metrics.noteWidth);\n\t\n\t        // Recalculate the tick context total width\n\t        this.width = this.notePx + this.extraLeftPx + this.extraRightPx;\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'postFormat',\n\t    value: function postFormat() {\n\t      if (this.postFormatted) return this;\n\t      this.postFormatted = true;\n\t      return this;\n\t    }\n\t  }]);\n\n\t  return TickContext;\n\t}(_tickable.Tickable);\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Annotation = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This file implements text annotations as modifiers that can be attached to\n\t// notes.\n\t//\n\t// See `tests/annotation_tests.js` for usage examples.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (Annotation.DEBUG) _vex.Vex.L('Vex.Flow.Annotation', args);\n\t}\n\t\n\tvar Annotation = exports.Annotation = function (_Modifier) {\n\t  _inherits(Annotation, _Modifier);\n\t\n\t  _createClass(Annotation, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // Arrange annotations within a `ModifierContext`\n\t    value: function format(annotations, state) {\n\t      if (!annotations || annotations.length === 0) return false;\n\t\n\t      var width = 0;\n\t      for (var i = 0; i < annotations.length; ++i) {\n\t        var annotation = annotations[i];\n\t        width = Math.max(annotation.getWidth(), width);\n\t        if (annotation.getPosition() === _modifier.Modifier.Position.ABOVE) {\n\t          annotation.setTextLine(state.top_text_line);\n\t          state.top_text_line++;\n\t        } else {\n\t          annotation.setTextLine(state.text_line);\n\t          state.text_line++;\n\t        }\n\t      }\n\t\n\t      state.left_shift += width / 2;\n\t      state.right_shift += width / 2;\n\t      return true;\n\t    }\n\t\n\t    // ## Prototype Methods\n\t    //\n\t    // Annotations inherit from `Modifier` and is positioned correctly when\n\t    // in a `ModifierContext`.\n\t    // Create a new `Annotation` with the string `text`.\n\t\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'annotations';\n\t    }\n\t\n\t    // Text annotations can be positioned and justified relative to the note.\n\t\n\t  }, {\n\t    key: 'Justify',\n\t    get: function get() {\n\t      return {\n\t        LEFT: 1,\n\t        CENTER: 2,\n\t        RIGHT: 3,\n\t        CENTER_STEM: 4\n\t      };\n\t    }\n\t  }, {\n\t    key: 'JustifyString',\n\t    get: function get() {\n\t      return {\n\t        left: Annotation.Justify.LEFT,\n\t        right: Annotation.Justify.RIGHT,\n\t        center: Annotation.Justify.CENTER,\n\t        centerStem: Annotation.Justify.CENTER_STEM\n\t      };\n\t    }\n\t  }, {\n\t    key: 'VerticalJustify',\n\t    get: function get() {\n\t      return {\n\t        TOP: 1,\n\t        CENTER: 2,\n\t        BOTTOM: 3,\n\t        CENTER_STEM: 4\n\t      };\n\t    }\n\t  }, {\n\t    key: 'VerticalJustifyString',\n\t    get: function get() {\n\t      return {\n\t        above: Annotation.VerticalJustify.TOP,\n\t        top: Annotation.VerticalJustify.TOP,\n\t        below: Annotation.VerticalJustify.BOTTOM,\n\t        bottom: Annotation.VerticalJustify.BOTTOM,\n\t        center: Annotation.VerticalJustify.CENTER,\n\t        centerStem: Annotation.VerticalJustify.CENTER_STEM\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function Annotation(text) {\n\t    _classCallCheck(this, Annotation);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Annotation).call(this));\n\t\n\t    _this.setAttribute('type', 'Annotation');\n\t\n\t    _this.note = null;\n\t    _this.index = null;\n\t    _this.text = text;\n\t    _this.justification = Annotation.Justify.CENTER;\n\t    _this.vert_justification = Annotation.VerticalJustify.TOP;\n\t    _this.font = {\n\t      family: 'Arial',\n\t      size: 10,\n\t      weight: ''\n\t    };\n\t\n\t    // The default width is calculated from the text.\n\t    _this.setWidth(_tables.Flow.textWidth(text));\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Annotation, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Annotation.CATEGORY;\n\t    }\n\t\n\t    // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.\n\t\n\t  }, {\n\t    key: 'setFont',\n\t    value: function setFont(family, size, weight) {\n\t      this.font = { family: family, size: size, weight: weight };\n\t      return this;\n\t    }\n\t\n\t    // Set vertical position of text (above or below stave). `just` must be\n\t    // a value in `Annotation.VerticalJustify`.\n\t\n\t  }, {\n\t    key: 'setVerticalJustification',\n\t    value: function setVerticalJustification(just) {\n\t      this.vert_justification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n\t      return this;\n\t    }\n\t\n\t    // Get and set horizontal justification. `justification` is a value in\n\t    // `Annotation.Justify`.\n\t\n\t  }, {\n\t    key: 'getJustification',\n\t    value: function getJustification() {\n\t      return this.justification;\n\t    }\n\t  }, {\n\t    key: 'setJustification',\n\t    value: function setJustification(just) {\n\t      this.justification = typeof just === 'string' ? Annotation.JustifyString[just] : just;\n\t      return this;\n\t    }\n\t\n\t    // Render text beside the note.\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t\n\t      if (!this.note) {\n\t        throw new _vex.Vex.RERR('NoNoteForAnnotation', \"Can't draw text annotation without an attached note.\");\n\t      }\n\t\n\t      this.setRendered();\n\t      var start = this.note.getModifierStartXY(_modifier.Modifier.Position.ABOVE, this.index);\n\t\n\t      // We're changing context parameters. Save current state.\n\t      this.context.save();\n\t      this.context.setFont(this.font.family, this.font.size, this.font.weight);\n\t      var text_width = this.context.measureText(this.text).width;\n\t\n\t      // Estimate text height to be the same as the width of an 'm'.\n\t      //\n\t      // This is a hack to work around the inability to measure text height\n\t      // in HTML5 Canvas (and SVG).\n\t      var text_height = this.context.measureText('m').width;\n\t      var x = void 0;\n\t      var y = void 0;\n\t\n\t      if (this.justification === Annotation.Justify.LEFT) {\n\t        x = start.x;\n\t      } else if (this.justification === Annotation.Justify.RIGHT) {\n\t        x = start.x - text_width;\n\t      } else if (this.justification === Annotation.Justify.CENTER) {\n\t        x = start.x - text_width / 2;\n\t      } else /* CENTER_STEM */{\n\t          x = this.note.getStemX() - text_width / 2;\n\t        }\n\t\n\t      var stem_ext = void 0;\n\t      var spacing = void 0;\n\t      var has_stem = this.note.hasStem();\n\t      var stave = this.note.getStave();\n\t\n\t      // The position of the text varies based on whether or not the note\n\t      // has a stem.\n\t      if (has_stem) {\n\t        stem_ext = this.note.getStem().getExtents();\n\t        spacing = stave.getSpacingBetweenLines();\n\t      }\n\t\n\t      if (this.vert_justification === Annotation.VerticalJustify.BOTTOM) {\n\t        // HACK: We need to compensate for the text's height since its origin\n\t        // is bottom-right.\n\t        y = stave.getYForBottomText(this.text_line + _tables.Flow.TEXT_HEIGHT_OFFSET_HACK);\n\t        if (has_stem) {\n\t          var stem_base = this.note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n\t          y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n\t        }\n\t      } else if (this.vert_justification === Annotation.VerticalJustify.CENTER) {\n\t        var yt = this.note.getYForTopText(this.text_line) - 1;\n\t        var yb = stave.getYForBottomText(this.text_line);\n\t        y = yt + (yb - yt) / 2 + text_height / 2;\n\t      } else if (this.vert_justification === Annotation.VerticalJustify.TOP) {\n\t        y = Math.min(stave.getYForTopText(this.text_line), this.note.getYs()[0] - 10);\n\t        if (has_stem) {\n\t          y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n\t        }\n\t      } else /* CENTER_STEM */{\n\t          var extents = this.note.getStemExtents();\n\t          y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;\n\t        }\n\t\n\t      L('Rendering annotation: ', this.text, x, y);\n\t      this.context.fillText(this.text, x, y);\n\t      this.context.restore();\n\t    }\n\t  }]);\n\n\t  return Annotation;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Bend = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This file implements tablature bends.\n\t\n\t/**\n\t   @param text Text for bend (\"Full\", \"Half\", etc.) (DEPRECATED)\n\t   @param release If true, render a release. (DEPRECATED)\n\t   @param phrase If set, ignore \"text\" and \"release\", and use the more\n\t                 sophisticated phrase specified.\n\t\n\t   Example of a phrase:\n\t\n\t     [{\n\t       type: UP,\n\t       text: \"whole\"\n\t       width: 8;\n\t     },\n\t     {\n\t       type: DOWN,\n\t       text: \"whole\"\n\t       width: 8;\n\t     },\n\t     {\n\t       type: UP,\n\t       text: \"half\"\n\t       width: 8;\n\t     },\n\t     {\n\t       type: UP,\n\t       text: \"whole\"\n\t       width: 8;\n\t     },\n\t     {\n\t       type: DOWN,\n\t       text: \"1 1/2\"\n\t       width: 8;\n\t     }]\n\t */\n\tvar Bend = exports.Bend = function (_Modifier) {\n\t  _inherits(Bend, _Modifier);\n\t\n\t  _createClass(Bend, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // ## Static Methods\n\t    // Arrange bends in `ModifierContext`\n\t    value: function format(bends, state) {\n\t      if (!bends || bends.length === 0) return false;\n\t\n\t      var last_width = 0;\n\t      // Bends are always on top.\n\t      var text_line = state.top_text_line;\n\t\n\t      // Format Bends\n\t      for (var i = 0; i < bends.length; ++i) {\n\t        var bend = bends[i];\n\t        bend.setXShift(last_width);\n\t        last_width = bend.getWidth();\n\t        bend.setTextLine(text_line);\n\t      }\n\t\n\t      state.right_shift += last_width;\n\t      state.top_text_line += 1;\n\t      return true;\n\t    }\n\t\n\t    // ## Prototype Methods\n\t\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'bends';\n\t    }\n\t  }, {\n\t    key: 'UP',\n\t    get: function get() {\n\t      return 0;\n\t    }\n\t  }, {\n\t    key: 'DOWN',\n\t    get: function get() {\n\t      return 1;\n\t    }\n\t  }]);\n\t\n\t  function Bend(text, release, phrase) {\n\t    _classCallCheck(this, Bend);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Bend).call(this));\n\t\n\t    _this.setAttribute('type', 'Bend');\n\t\n\t    _this.text = text;\n\t    _this.x_shift = 0;\n\t    _this.release = release || false;\n\t    _this.font = '10pt Arial';\n\t    _this.render_options = {\n\t      line_width: 1.5,\n\t      line_style: '#777777',\n\t      bend_width: 8,\n\t      release_width: 8\n\t    };\n\t\n\t    if (phrase) {\n\t      _this.phrase = phrase;\n\t    } else {\n\t      // Backward compatibility\n\t      _this.phrase = [{ type: Bend.UP, text: _this.text }];\n\t      if (_this.release) _this.phrase.push({ type: Bend.DOWN, text: '' });\n\t    }\n\t\n\t    _this.updateWidth();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Bend, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Bend.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'setXShift',\n\t    value: function setXShift(value) {\n\t      this.x_shift = value;\n\t      this.updateWidth();\n\t    }\n\t  }, {\n\t    key: 'setFont',\n\t    value: function setFont(font) {\n\t      this.font = font;return this;\n\t    }\n\t  }, {\n\t    key: 'getText',\n\t    value: function getText() {\n\t      return this.text;\n\t    }\n\t  }, {\n\t    key: 'updateWidth',\n\t    value: function updateWidth() {\n\t      var that = this;\n\t\n\t      function measure_text(text) {\n\t        var text_width = void 0;\n\t        if (that.context) {\n\t          text_width = that.context.measureText(text).width;\n\t        } else {\n\t          text_width = _tables.Flow.textWidth(text);\n\t        }\n\t\n\t        return text_width;\n\t      }\n\t\n\t      var total_width = 0;\n\t      for (var i = 0; i < this.phrase.length; ++i) {\n\t        var bend = this.phrase[i];\n\t        if ('width' in bend) {\n\t          total_width += bend.width;\n\t        } else {\n\t          var additional_width = bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;\n\t\n\t          bend.width = _vex.Vex.Max(additional_width, measure_text(bend.text)) + 3;\n\t          bend.draw_width = bend.width / 2;\n\t          total_width += bend.width;\n\t        }\n\t      }\n\t\n\t      this.setWidth(total_width + this.x_shift);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      if (!(this.note && this.index != null)) {\n\t        throw new _vex.Vex.RERR('NoNoteForBend', \"Can't draw bend without a note or index.\");\n\t      }\n\t\n\t      this.setRendered();\n\t\n\t      var start = this.note.getModifierStartXY(_modifier.Modifier.Position.RIGHT, this.index);\n\t      start.x += 3;\n\t      start.y += 0.5;\n\t      var x_shift = this.x_shift;\n\t\n\t      var ctx = this.context;\n\t      var bend_height = this.note.getStave().getYForTopText(this.text_line) + 3;\n\t      var annotation_y = this.note.getStave().getYForTopText(this.text_line) - 1;\n\t      var that = this;\n\t\n\t      function renderBend(x, y, width, height) {\n\t        var cp_x = x + width;\n\t        var cp_y = y;\n\t\n\t        ctx.save();\n\t        ctx.beginPath();\n\t        ctx.setLineWidth(that.render_options.line_width);\n\t        ctx.setStrokeStyle(that.render_options.line_style);\n\t        ctx.setFillStyle(that.render_options.line_style);\n\t        ctx.moveTo(x, y);\n\t        ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\n\t        ctx.stroke();\n\t        ctx.restore();\n\t      }\n\t\n\t      function renderRelease(x, y, width, height) {\n\t        ctx.save();\n\t        ctx.beginPath();\n\t        ctx.setLineWidth(that.render_options.line_width);\n\t        ctx.setStrokeStyle(that.render_options.line_style);\n\t        ctx.setFillStyle(that.render_options.line_style);\n\t        ctx.moveTo(x, height);\n\t        ctx.quadraticCurveTo(x + width, height, x + width, y);\n\t        ctx.stroke();\n\t        ctx.restore();\n\t      }\n\t\n\t      function renderArrowHead(x, y, direction) {\n\t        var width = 4;\n\t        var dir = direction || 1;\n\t\n\t        ctx.beginPath();\n\t        ctx.moveTo(x, y);\n\t        ctx.lineTo(x - width, y + width * dir);\n\t        ctx.lineTo(x + width, y + width * dir);\n\t        ctx.closePath();\n\t        ctx.fill();\n\t      }\n\t\n\t      function renderText(x, text) {\n\t        ctx.save();\n\t        ctx.setRawFont(that.font);\n\t        var render_x = x - ctx.measureText(text).width / 2;\n\t        ctx.fillText(text, render_x, annotation_y);\n\t        ctx.restore();\n\t      }\n\t\n\t      var last_bend = null;\n\t      var last_drawn_width = 0;\n\t      for (var i = 0; i < this.phrase.length; ++i) {\n\t        var bend = this.phrase[i];\n\t        if (i === 0) bend.draw_width += x_shift;\n\t\n\t        last_drawn_width = bend.draw_width + (last_bend ? last_bend.draw_width : 0) - (i === 1 ? x_shift : 0);\n\t        if (bend.type === Bend.UP) {\n\t          if (last_bend && last_bend.type === Bend.UP) {\n\t            renderArrowHead(start.x, bend_height);\n\t          }\n\t\n\t          renderBend(start.x, start.y, last_drawn_width, bend_height);\n\t        }\n\t\n\t        if (bend.type === Bend.DOWN) {\n\t          if (last_bend && last_bend.type === Bend.UP) {\n\t            renderRelease(start.x, start.y, last_drawn_width, bend_height);\n\t          }\n\t\n\t          if (last_bend && last_bend.type === Bend.DOWN) {\n\t            renderArrowHead(start.x, start.y, -1);\n\t            renderRelease(start.x, start.y, last_drawn_width, bend_height);\n\t          }\n\t\n\t          if (last_bend === null) {\n\t            last_drawn_width = bend.draw_width;\n\t            renderRelease(start.x, start.y, last_drawn_width, bend_height);\n\t          }\n\t        }\n\t\n\t        renderText(start.x + last_drawn_width, bend.text);\n\t        last_bend = bend;\n\t        last_bend.x = start.x;\n\t\n\t        start.x += last_drawn_width;\n\t      }\n\t\n\t      // Final arrowhead and text\n\t      if (last_bend.type === Bend.UP) {\n\t        renderArrowHead(last_bend.x + last_drawn_width, bend_height);\n\t      } else if (last_bend.type === Bend.DOWN) {\n\t        renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\n\t      }\n\t    }\n\t  }]);\n\n\t  return Bend;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Vibrato = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _bend = __webpack_require__(41);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// This class implements vibratos.\n\t\n\tvar Vibrato = exports.Vibrato = function (_Modifier) {\n\t  _inherits(Vibrato, _Modifier);\n\t\n\t  _createClass(Vibrato, null, [{\n\t    key: 'format',\n\t\n\t\n\t    // ## Static Methods\n\t    // Arrange vibratos inside a `ModifierContext`.\n\t    value: function format(vibratos, state, context) {\n\t      if (!vibratos || vibratos.length === 0) return false;\n\t\n\t      // Vibratos are always on top.\n\t      var text_line = state.top_text_line;\n\t      var width = 0;\n\t      var shift = state.right_shift - 7;\n\t\n\t      // If there's a bend, drop the text line\n\t      var bends = context.getModifiers(_bend.Bend.CATEGORY);\n\t      if (bends && bends.length > 0) {\n\t        text_line--;\n\t      }\n\t\n\t      // Format Vibratos\n\t      for (var i = 0; i < vibratos.length; ++i) {\n\t        var vibrato = vibratos[i];\n\t        vibrato.setXShift(shift);\n\t        vibrato.setTextLine(text_line);\n\t        width += vibrato.getWidth();\n\t        shift += width;\n\t      }\n\t\n\t      state.right_shift += width;\n\t      state.top_text_line += 1;\n\t      return true;\n\t    }\n\t\n\t    // ## Prototype Methods\n\t\n\t  }, {\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'vibratos';\n\t    }\n\t  }]);\n\t\n\t  function Vibrato() {\n\t    _classCallCheck(this, Vibrato);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Vibrato).call(this));\n\t\n\t    _this.setAttribute('type', 'Vibrato');\n\t\n\t    _this.position = _modifier.Modifier.Position.RIGHT;\n\t    _this.render_options = {\n\t      harsh: false,\n\t      vibrato_width: 20,\n\t      wave_height: 6,\n\t      wave_width: 4,\n\t      wave_girth: 2\n\t    };\n\t\n\t    _this.setVibratoWidth(_this.render_options.vibrato_width);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Vibrato, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Vibrato.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'setHarsh',\n\t    value: function setHarsh(harsh) {\n\t      this.render_options.harsh = harsh;return this;\n\t    }\n\t  }, {\n\t    key: 'setVibratoWidth',\n\t    value: function setVibratoWidth(width) {\n\t      this.render_options.vibrato_width = width;\n\t      this.setWidth(width);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var ctx = this.checkContext();\n\t\n\t      if (!this.note) {\n\t        throw new _vex.Vex.RERR('NoNoteForVibrato', \"Can't draw vibrato without an attached note.\");\n\t      }\n\t\n\t      this.setRendered();\n\t      var start = this.note.getModifierStartXY(_modifier.Modifier.Position.RIGHT, this.index);\n\t\n\t      var vx = start.x + this.x_shift;\n\t      var vy = this.note.getYForTopText(this.text_line) + 2;\n\t\n\t      Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\n\t    }\n\t\n\t    // Static rendering method that can be called from\n\t    // other classes (e.g. VibratoBracket)\n\t\n\t  }], [{\n\t    key: 'renderVibrato',\n\t    value: function renderVibrato(ctx, x, y, opts) {\n\t      var harsh = opts.harsh;\n\t      var vibrato_width = opts.vibrato_width;\n\t      var wave_width = opts.wave_width;\n\t      var wave_girth = opts.wave_girth;\n\t      var wave_height = opts.wave_height;\n\t\n\t      var num_waves = vibrato_width / wave_width;\n\t\n\t      ctx.beginPath();\n\t\n\t      var i = void 0;\n\t      if (harsh) {\n\t        ctx.moveTo(x, y + wave_girth + 1);\n\t        for (i = 0; i < num_waves / 2; ++i) {\n\t          ctx.lineTo(x + wave_width, y - wave_height / 2);\n\t          x += wave_width;\n\t          ctx.lineTo(x + wave_width, y + wave_height / 2);\n\t          x += wave_width;\n\t        }\n\t        for (i = 0; i < num_waves / 2; ++i) {\n\t          ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);\n\t          x -= wave_width;\n\t          ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);\n\t          x -= wave_width;\n\t        }\n\t        ctx.fill();\n\t      } else {\n\t        ctx.moveTo(x, y + wave_girth);\n\t        for (i = 0; i < num_waves / 2; ++i) {\n\t          ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);\n\t          x += wave_width;\n\t          ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);\n\t          x += wave_width;\n\t        }\n\t\n\t        for (i = 0; i < num_waves / 2; ++i) {\n\t          ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n\t          x -= wave_width;\n\t          ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n\t          x -= wave_width;\n\t        }\n\t        ctx.fill();\n\t      }\n\t    }\n\t  }]);\n\n\t  return Vibrato;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Stave = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _stavebarline = __webpack_require__(44);\n\t\n\tvar _stavemodifier = __webpack_require__(45);\n\t\n\tvar _staverepetition = __webpack_require__(46);\n\t\n\tvar _stavesection = __webpack_require__(47);\n\t\n\tvar _stavetempo = __webpack_require__(48);\n\t\n\tvar _stavetext = __webpack_require__(49);\n\t\n\tvar _boundingbox = __webpack_require__(8);\n\t\n\tvar _clef = __webpack_require__(51);\n\t\n\tvar _keysignature = __webpack_require__(52);\n\t\n\tvar _timesignature = __webpack_require__(53);\n\t\n\tvar _stavevolta = __webpack_require__(54);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t\n\tvar Stave = exports.Stave = function (_Element) {\n\t  _inherits(Stave, _Element);\n\t\n\t  function Stave(x, y, width, options) {\n\t    _classCallCheck(this, Stave);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Stave).call(this));\n\t\n\t    _this.setAttribute('type', 'Stave');\n\t\n\t    _this.x = x;\n\t    _this.y = y;\n\t    _this.width = width;\n\t    _this.formatted = false;\n\t    _this.start_x = x + 5;\n\t    _this.end_x = x + width;\n\t    _this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n\t    _this.measure = 0;\n\t    _this.clef = 'treble';\n\t    _this.font = {\n\t      family: 'sans-serif',\n\t      size: 8,\n\t      weight: ''\n\t    };\n\t    _this.options = {\n\t      vertical_bar_width: 10, // Width around vertical bar end-marker\n\t      glyph_spacing_px: 10,\n\t      num_lines: 5,\n\t      fill_style: '#999999',\n\t      left_bar: true, // draw vertical bar on left\n\t      right_bar: true, // draw vertical bar on right\n\t      spacing_between_lines_px: 10, // in pixels\n\t      space_above_staff_ln: 4, // in staff lines\n\t      space_below_staff_ln: 4, // in staff lines\n\t      top_text_position: 1 };\n\t    _this.bounds = { x: _this.x, y: _this.y, w: _this.width, h: 0 };\n\t    _vex.Vex.Merge(_this.options, options);\n\t\n\t    _this.resetLines();\n\t\n\t    var BARTYPE = _stavebarline.Barline.type;\n\t    // beg bar\n\t    _this.addModifier(new _stavebarline.Barline(_this.options.left_bar ? BARTYPE.SINGLE : BARTYPE.NONE));\n\t    // end bar\n\t    _this.addEndModifier(new _stavebarline.Barline(_this.options.right_bar ? BARTYPE.SINGLE : BARTYPE.NONE));\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Stave, [{\n\t    key: 'space',\n\t    value: function space(spacing) {\n\t      return this.options.spacing_between_lines_px * spacing;\n\t    }\n\t  }, {\n\t    key: 'resetLines',\n\t    value: function resetLines() {\n\t      this.options.line_config = [];\n\t      for (var i = 0; i < this.options.num_lines; i++) {\n\t        this.options.line_config.push({ visible: true });\n\t      }\n\t      this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;\n\t      this.options.bottom_text_position = this.options.num_lines;\n\t    }\n\t  }, {\n\t    key: 'getOptions',\n\t    value: function getOptions() {\n\t      return this.options;\n\t    }\n\t  }, {\n\t    key: 'setNoteStartX',\n\t    value: function setNoteStartX(x) {\n\t      if (!this.formatted) this.format();\n\t\n\t      this.start_x = x;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getNoteStartX',\n\t    value: function getNoteStartX() {\n\t      if (!this.formatted) this.format();\n\t\n\t      return this.start_x;\n\t    }\n\t  }, {\n\t    key: 'getNoteEndX',\n\t    value: function getNoteEndX() {\n\t      if (!this.formatted) this.format();\n\t\n\t      return this.end_x;\n\t    }\n\t  }, {\n\t    key: 'getTieStartX',\n\t    value: function getTieStartX() {\n\t      return this.start_x;\n\t    }\n\t  }, {\n\t    key: 'getTieEndX',\n\t    value: function getTieEndX() {\n\t      return this.x + this.width;\n\t    }\n\t  }, {\n\t    key: 'getX',\n\t    value: function getX() {\n\t      return this.x;\n\t    }\n\t  }, {\n\t    key: 'getNumLines',\n\t    value: function getNumLines() {\n\t      return this.options.num_lines;\n\t    }\n\t  }, {\n\t    key: 'setNumLines',\n\t    value: function setNumLines(lines) {\n\t      this.options.num_lines = parseInt(lines, 10);\n\t      this.resetLines();\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setY',\n\t    value: function setY(y) {\n\t      this.y = y;return this;\n\t    }\n\t  }, {\n\t    key: 'getTopLineTopY',\n\t    value: function getTopLineTopY() {\n\t      return this.getYForLine(0) - _tables.Flow.STAVE_LINE_THICKNESS / 2;\n\t    }\n\t  }, {\n\t    key: 'getBottomLineBottomY',\n\t    value: function getBottomLineBottomY() {\n\t      return this.getYForLine(this.getNumLines() - 1) + _tables.Flow.STAVE_LINE_THICKNESS / 2;\n\t    }\n\t  }, {\n\t    key: 'setX',\n\t    value: function setX(x) {\n\t      var shift = x - this.x;\n\t      this.formatted = false;\n\t      this.x = x;\n\t      this.start_x += shift;\n\t      this.end_x += shift;\n\t      for (var i = 0; i < this.modifiers.length; i++) {\n\t        var mod = this.modifiers[i];\n\t        if (mod.x !== undefined) {\n\t          mod.x += shift;\n\t        }\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setWidth',\n\t    value: function setWidth(width) {\n\t      this.formatted = false;\n\t      this.width = width;\n\t      this.end_x = this.x + width;\n\t\n\t      // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n\t      // this.modifiers[1].setX(this.end_x);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      return this.width;\n\t    }\n\t  }, {\n\t    key: 'setMeasure',\n\t    value: function setMeasure(measure) {\n\t      this.measure = measure;return this;\n\t    }\n\t\n\t    /**\n\t     * Gets the pixels to shift from the beginning of the stave\n\t     * following the modifier at the provided index\n\t     * @param  {Number} index The index from which to determine the shift\n\t     * @return {Number}       The amount of pixels shifted\n\t     */\n\t\n\t  }, {\n\t    key: 'getModifierXShift',\n\t    value: function getModifierXShift() {\n\t      var index = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\t\n\t      if (typeof index !== 'number') {\n\t        throw new _vex.Vex.RERR('InvalidIndex', 'Must be of number type');\n\t      }\n\t\n\t      if (!this.formatted) this.format();\n\t\n\t      if (this.getModifiers(_stavemodifier.StaveModifier.Position.BEGIN).length === 1) {\n\t        return 0;\n\t      }\n\t\n\t      var start_x = this.start_x - this.x;\n\t      var begBarline = this.modifiers[0];\n\t      if (begBarline.getType() === _stavebarline.Barline.type.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n\t        start_x -= begBarline.getWidth();\n\t      }\n\t\n\t      return start_x;\n\t    }\n\t\n\t    // Coda & Segno Symbol functions\n\t\n\t  }, {\n\t    key: 'setRepetitionTypeLeft',\n\t    value: function setRepetitionTypeLeft(type, y) {\n\t      this.modifiers.push(new _staverepetition.Repetition(type, this.x, y));\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setRepetitionTypeRight',\n\t    value: function setRepetitionTypeRight(type, y) {\n\t      this.modifiers.push(new _staverepetition.Repetition(type, this.x, y));\n\t      return this;\n\t    }\n\t\n\t    // Volta functions\n\t\n\t  }, {\n\t    key: 'setVoltaType',\n\t    value: function setVoltaType(type, number_t, y) {\n\t      this.modifiers.push(new _stavevolta.Volta(type, number_t, this.x, y));\n\t      return this;\n\t    }\n\t\n\t    // Section functions\n\t\n\t  }, {\n\t    key: 'setSection',\n\t    value: function setSection(section, y) {\n\t      this.modifiers.push(new _stavesection.StaveSection(section, this.x, y));\n\t      return this;\n\t    }\n\t\n\t    // Tempo functions\n\t\n\t  }, {\n\t    key: 'setTempo',\n\t    value: function setTempo(tempo, y) {\n\t      this.modifiers.push(new _stavetempo.StaveTempo(tempo, this.x, y));\n\t      return this;\n\t    }\n\t\n\t    // Text functions\n\t\n\t  }, {\n\t    key: 'setText',\n\t    value: function setText(text, position, options) {\n\t      this.modifiers.push(new _stavetext.StaveText(text, position, options));\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getHeight',\n\t    value: function getHeight() {\n\t      return this.height;\n\t    }\n\t  }, {\n\t    key: 'getSpacingBetweenLines',\n\t    value: function getSpacingBetweenLines() {\n\t      return this.options.spacing_between_lines_px;\n\t    }\n\t  }, {\n\t    key: 'getBoundingBox',\n\t    value: function getBoundingBox() {\n\t      return new _boundingbox.BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n\t    }\n\t  }, {\n\t    key: 'getBottomY',\n\t    value: function getBottomY() {\n\t      var options = this.options;\n\t      var spacing = options.spacing_between_lines_px;\n\t      var score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;\n\t\n\t      return score_bottom;\n\t    }\n\t  }, {\n\t    key: 'getBottomLineY',\n\t    value: function getBottomLineY() {\n\t      return this.getYForLine(this.options.num_lines);\n\t    }\n\t\n\t    // This returns the y for the *center* of a staff line\n\t\n\t  }, {\n\t    key: 'getYForLine',\n\t    value: function getYForLine(line) {\n\t      var options = this.options;\n\t      var spacing = options.spacing_between_lines_px;\n\t      var headroom = options.space_above_staff_ln;\n\t\n\t      var y = this.y + line * spacing + headroom * spacing;\n\t\n\t      return y;\n\t    }\n\t  }, {\n\t    key: 'getLineForY',\n\t    value: function getLineForY(y) {\n\t      // Does the reverse of getYForLine - somewhat dumb and just calls\n\t      // getYForLine until the right value is reaches\n\t\n\t      var options = this.options;\n\t      var spacing = options.spacing_between_lines_px;\n\t      var headroom = options.space_above_staff_ln;\n\t      return (y - this.y) / spacing - headroom;\n\t    }\n\t  }, {\n\t    key: 'getYForTopText',\n\t    value: function getYForTopText(line) {\n\t      var l = line || 0;\n\t      return this.getYForLine(-l - this.options.top_text_position);\n\t    }\n\t  }, {\n\t    key: 'getYForBottomText',\n\t    value: function getYForBottomText(line) {\n\t      var l = line || 0;\n\t      return this.getYForLine(this.options.bottom_text_position + l);\n\t    }\n\t  }, {\n\t    key: 'getYForNote',\n\t    value: function getYForNote(line) {\n\t      var options = this.options;\n\t      var spacing = options.spacing_between_lines_px;\n\t      var headroom = options.space_above_staff_ln;\n\t      var y = this.y + headroom * spacing + 5 * spacing - line * spacing;\n\t\n\t      return y;\n\t    }\n\t  }, {\n\t    key: 'getYForGlyphs',\n\t    value: function getYForGlyphs() {\n\t      return this.getYForLine(3);\n\t    }\n\t  }, {\n\t    key: 'addModifier',\n\t    value: function addModifier(modifier, position) {\n\t      if (position !== undefined) {\n\t        modifier.setPosition(position);\n\t      }\n\t\n\t      modifier.setStave(this);\n\t      this.formatted = false;\n\t      this.modifiers.push(modifier);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'addEndModifier',\n\t    value: function addEndModifier(modifier) {\n\t      this.addModifier(modifier, _stavemodifier.StaveModifier.Position.END);\n\t      return this;\n\t    }\n\t\n\t    // Bar Line functions\n\t\n\t  }, {\n\t    key: 'setBegBarType',\n\t    value: function setBegBarType(type) {\n\t      // Only valid bar types at beginning of stave is none, single or begin repeat\n\t      var _Barline$type = _stavebarline.Barline.type;\n\t      var SINGLE = _Barline$type.SINGLE;\n\t      var REPEAT_BEGIN = _Barline$type.REPEAT_BEGIN;\n\t      var NONE = _Barline$type.NONE;\n\t\n\t      if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n\t        this.modifiers[0].setType(type);\n\t        this.formatted = false;\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setEndBarType',\n\t    value: function setEndBarType(type) {\n\t      // Repeat end not valid at end of stave\n\t      if (type !== _stavebarline.Barline.type.REPEAT_BEGIN) {\n\t        this.modifiers[1].setType(type);\n\t        this.formatted = false;\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setClef',\n\t    value: function setClef(clefSpec, size, annotation, position) {\n\t      if (position === undefined) {\n\t        position = _stavemodifier.StaveModifier.Position.BEGIN;\n\t      }\n\t\n\t      this.clef = clefSpec;\n\t      var clefs = this.getModifiers(position, _clef.Clef.CATEGORY);\n\t      if (clefs.length === 0) {\n\t        this.addClef(clefSpec, size, annotation, position);\n\t      } else {\n\t        clefs[0].setType(clefSpec, size, annotation);\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setEndClef',\n\t    value: function setEndClef(clefSpec, size, annotation) {\n\t      this.setClef(clefSpec, size, annotation, _stavemodifier.StaveModifier.Position.END);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setKeySignature',\n\t    value: function setKeySignature(keySpec, cancelKeySpec, position) {\n\t      if (position === undefined) {\n\t        position = _stavemodifier.StaveModifier.Position.BEGIN;\n\t      }\n\t\n\t      var keySignatures = this.getModifiers(position, _keysignature.KeySignature.CATEGORY);\n\t      if (keySignatures.length === 0) {\n\t        this.addKeySignature(keySpec, cancelKeySpec, position);\n\t      } else {\n\t        keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setEndKeySignature',\n\t    value: function setEndKeySignature(keySpec, cancelKeySpec) {\n\t      this.setKeySignature(keySpec, cancelKeySpec, _stavemodifier.StaveModifier.Position.END);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setTimeSignature',\n\t    value: function setTimeSignature(timeSpec, customPadding, position) {\n\t      if (position === undefined) {\n\t        position = _stavemodifier.StaveModifier.Position.BEGIN;\n\t      }\n\t\n\t      var timeSignatures = this.getModifiers(position, _timesignature.TimeSignature.CATEGORY);\n\t      if (timeSignatures.length === 0) {\n\t        this.addTimeSignature(timeSpec, customPadding, position);\n\t      } else {\n\t        timeSignatures[0].setTimeSig(timeSpec);\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setEndTimeSignature',\n\t    value: function setEndTimeSignature(timeSpec, customPadding) {\n\t      this.setTimeSignature(timeSpec, customPadding, _stavemodifier.StaveModifier.Position.END);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'addKeySignature',\n\t    value: function addKeySignature(keySpec, cancelKeySpec, position) {\n\t      this.addModifier(new _keysignature.KeySignature(keySpec, cancelKeySpec), position);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'addClef',\n\t    value: function addClef(clef, size, annotation, position) {\n\t      if (position === undefined || position === _stavemodifier.StaveModifier.Position.BEGIN) {\n\t        this.clef = clef;\n\t      }\n\t\n\t      this.addModifier(new _clef.Clef(clef, size, annotation), position);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'addEndClef',\n\t    value: function addEndClef(clef, size, annotation) {\n\t      this.addClef(clef, size, annotation, _stavemodifier.StaveModifier.Position.END);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'addTimeSignature',\n\t    value: function addTimeSignature(timeSpec, customPadding, position) {\n\t      this.addModifier(new _timesignature.TimeSignature(timeSpec, customPadding), position);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'addEndTimeSignature',\n\t    value: function addEndTimeSignature(timeSpec, customPadding) {\n\t      this.addTimeSignature(timeSpec, customPadding, _stavemodifier.StaveModifier.Position.END);\n\t      return this;\n\t    }\n\t\n\t    // Deprecated\n\t\n\t  }, {\n\t    key: 'addTrebleGlyph',\n\t    value: function addTrebleGlyph() {\n\t      this.addClef('treble');\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getModifiers',\n\t    value: function getModifiers(position, category) {\n\t      if (position === undefined) return this.modifiers;\n\t\n\t      return this.modifiers.filter(function (modifier) {\n\t        return position === modifier.getPosition() && (category === undefined || category === modifier.getCategory());\n\t      });\n\t    }\n\t  }, {\n\t    key: 'sortByCategory',\n\t    value: function sortByCategory(items, order) {\n\t      for (var i = items.length - 1; i >= 0; i--) {\n\t        for (var j = 0; j < i; j++) {\n\t          if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n\t            var temp = items[j];\n\t            items[j] = items[j + 1];\n\t            items[j + 1] = temp;\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'format',\n\t    value: function format() {\n\t      var begBarline = this.modifiers[0];\n\t      var endBarline = this.modifiers[1];\n\t\n\t      var begModifiers = this.getModifiers(_stavemodifier.StaveModifier.Position.BEGIN);\n\t      var endModifiers = this.getModifiers(_stavemodifier.StaveModifier.Position.END);\n\t\n\t      this.sortByCategory(begModifiers, {\n\t        barlines: 0, clefs: 1, keysignatures: 2, timesignatures: 3\n\t      });\n\t\n\t      this.sortByCategory(endModifiers, {\n\t        timesignatures: 0, keysignatures: 1, barlines: 2, clefs: 3\n\t      });\n\t\n\t      if (begModifiers.length > 1 && begBarline.getType() === _stavebarline.Barline.type.REPEAT_BEGIN) {\n\t        begModifiers.push(begModifiers.splice(0, 1)[0]);\n\t        begModifiers.splice(0, 0, new _stavebarline.Barline(_stavebarline.Barline.type.SINGLE));\n\t      }\n\t\n\t      if (endModifiers.indexOf(endBarline) > 0) {\n\t        endModifiers.splice(0, 0, new _stavebarline.Barline(_stavebarline.Barline.type.NONE));\n\t      }\n\t\n\t      var width = void 0;\n\t      var padding = void 0;\n\t      var modifier = void 0;\n\t      var offset = 0;\n\t      var x = this.x;\n\t      for (var i = 0; i < begModifiers.length; i++) {\n\t        modifier = begModifiers[i];\n\t        padding = modifier.getPadding(i + offset);\n\t        width = modifier.getWidth();\n\t\n\t        x += padding;\n\t        modifier.setX(x);\n\t        x += width;\n\t\n\t        if (padding + width === 0) offset--;\n\t      }\n\t\n\t      this.start_x = x;\n\t      x = this.x + this.width;\n\t\n\t      for (var _i = 0; _i < endModifiers.length; _i++) {\n\t        modifier = endModifiers[_i];\n\t        x -= modifier.getPadding(_i);\n\t        if (_i !== 0) {\n\t          x -= modifier.getWidth();\n\t        }\n\t\n\t        modifier.setX(x);\n\t\n\t        if (_i === 0) {\n\t          x -= modifier.getWidth();\n\t        }\n\t      }\n\t\n\t      this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n\t      this.formatted = true;\n\t    }\n\t\n\t    /**\n\t     * All drawing functions below need the context to be set.\n\t     */\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      this.setRendered();\n\t\n\t      if (!this.formatted) this.format();\n\t\n\t      var num_lines = this.options.num_lines;\n\t      var width = this.width;\n\t      var x = this.x;\n\t      var y = void 0;\n\t\n\t      // Render lines\n\t      for (var line = 0; line < num_lines; line++) {\n\t        y = this.getYForLine(line);\n\t\n\t        this.context.save();\n\t        this.context.setFillStyle(this.options.fill_style);\n\t        this.context.setStrokeStyle(this.options.fill_style);\n\t        this.context.setLineWidth(_tables.Flow.STAVE_LINE_THICKNESS);\n\t        if (this.options.line_config[line].visible) {\n\t          this.context.beginPath();\n\t          this.context.moveTo(x, y);\n\t          this.context.lineTo(x + width, y);\n\t          this.context.stroke();\n\t        }\n\t        this.context.restore();\n\t      }\n\t\n\t      // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n\t      for (var i = 0; i < this.modifiers.length; i++) {\n\t        // Only draw modifier if it has a draw function\n\t        if (typeof this.modifiers[i].draw === 'function') {\n\t          this.modifiers[i].draw(this, this.getModifierXShift(i));\n\t        }\n\t      }\n\t\n\t      // Render measure numbers\n\t      if (this.measure > 0) {\n\t        this.context.save();\n\t        this.context.setFont(this.font.family, this.font.size, this.font.weight);\n\t        var text_width = this.context.measureText('' + this.measure).width;\n\t        y = this.getYForTopText(0) + 3;\n\t        this.context.fillText('' + this.measure, this.x - text_width / 2, y);\n\t        this.context.restore();\n\t      }\n\t\n\t      return this;\n\t    }\n\t\n\t    // Draw Simple barlines for backward compatability\n\t    // Do not delete - draws the beginning bar of the stave\n\t\n\t  }, {\n\t    key: 'drawVertical',\n\t    value: function drawVertical(x, isDouble) {\n\t      this.drawVerticalFixed(this.x + x, isDouble);\n\t    }\n\t  }, {\n\t    key: 'drawVerticalFixed',\n\t    value: function drawVerticalFixed(x, isDouble) {\n\t      this.checkContext();\n\t\n\t      var top_line = this.getYForLine(0);\n\t      var bottom_line = this.getYForLine(this.options.num_lines - 1);\n\t      if (isDouble) {\n\t        this.context.fillRect(x - 3, top_line, 1, bottom_line - top_line + 1);\n\t      }\n\t      this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);\n\t    }\n\t  }, {\n\t    key: 'drawVerticalBar',\n\t    value: function drawVerticalBar(x) {\n\t      this.drawVerticalBarFixed(this.x + x, false);\n\t    }\n\t  }, {\n\t    key: 'drawVerticalBarFixed',\n\t    value: function drawVerticalBarFixed(x) {\n\t      this.checkContext();\n\t\n\t      var top_line = this.getYForLine(0);\n\t      var bottom_line = this.getYForLine(this.options.num_lines - 1);\n\t      this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);\n\t    }\n\t\n\t    /**\n\t     * Get the current configuration for the Stave.\n\t     * @return {Array} An array of configuration objects.\n\t     */\n\t\n\t  }, {\n\t    key: 'getConfigForLines',\n\t    value: function getConfigForLines() {\n\t      return this.options.line_config;\n\t    }\n\t\n\t    /**\n\t     * Configure properties of the lines in the Stave\n\t     * @param line_number The index of the line to configure.\n\t     * @param line_config An configuration object for the specified line.\n\t     * @throws Vex.RERR \"StaveConfigError\" When the specified line number is out of\n\t     *   range of the number of lines specified in the constructor.\n\t     */\n\t\n\t  }, {\n\t    key: 'setConfigForLine',\n\t    value: function setConfigForLine(line_number, line_config) {\n\t      if (line_number >= this.options.num_lines || line_number < 0) {\n\t        throw new _vex.Vex.RERR('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');\n\t      }\n\t\n\t      if (line_config.visible === undefined) {\n\t        throw new _vex.Vex.RERR('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n\t      }\n\t\n\t      if (typeof line_config.visible !== 'boolean') {\n\t        throw new _vex.Vex.RERR('StaveConfigError', \"The line configuration objects 'visible' property must be true or false.\");\n\t      }\n\t\n\t      this.options.line_config[line_number] = line_config;\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Set the staff line configuration array for all of the lines at once.\n\t     * @param lines_configuration An array of line configuration objects.  These objects\n\t     *   are of the same format as the single one passed in to setLineConfiguration().\n\t     *   The caller can set null for any line config entry if it is desired that the default be used\n\t     * @throws Vex.RERR \"StaveConfigError\" When the lines_configuration array does not have\n\t     *   exactly the same number of elements as the num_lines configuration object set in\n\t     *   the constructor.\n\t     */\n\t\n\t  }, {\n\t    key: 'setConfigForLines',\n\t    value: function setConfigForLines(lines_configuration) {\n\t      if (lines_configuration.length !== this.options.num_lines) {\n\t        throw new _vex.Vex.RERR('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');\n\t      }\n\t\n\t      // Make sure the defaults are present in case an incomplete set of\n\t      //  configuration options were supplied.\n\t      for (var line_config in lines_configuration) {\n\t        // Allow 'null' to be used if the caller just wants the default for a particular node.\n\t        if (!lines_configuration[line_config]) {\n\t          lines_configuration[line_config] = this.options.line_config[line_config];\n\t        }\n\t        _vex.Vex.Merge(this.options.line_config[line_config], lines_configuration[line_config]);\n\t      }\n\t\n\t      this.options.line_config = lines_configuration;\n\t\n\t      return this;\n\t    }\n\t  }]);\n\n\t  return Stave;\n\t}(_element.Element);\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Barline = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _stavemodifier = __webpack_require__(45);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// Author Larry Kuhns 2011\n\t\n\tvar Barline = exports.Barline = function (_StaveModifier) {\n\t  _inherits(Barline, _StaveModifier);\n\t\n\t  _createClass(Barline, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'barlines';\n\t    }\n\t  }, {\n\t    key: 'type',\n\t    get: function get() {\n\t      return {\n\t        SINGLE: 1,\n\t        DOUBLE: 2,\n\t        END: 3,\n\t        REPEAT_BEGIN: 4,\n\t        REPEAT_END: 5,\n\t        REPEAT_BOTH: 6,\n\t        NONE: 7\n\t      };\n\t    }\n\t\n\t    /**\n\t     * @constructor\n\t     */\n\t\n\t  }]);\n\t\n\t  function Barline(type) {\n\t    _classCallCheck(this, Barline);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Barline).call(this));\n\t\n\t    _this.setAttribute('type', 'Barline');\n\t    _this.thickness = _tables.Flow.STAVE_LINE_THICKNESS;\n\t\n\t    var TYPE = Barline.type;\n\t    _this.widths = {};\n\t    _this.widths[TYPE.SINGLE] = 5;\n\t    _this.widths[TYPE.DOUBLE] = 5;\n\t    _this.widths[TYPE.END] = 5;\n\t    _this.widths[TYPE.REPEAT_BEGIN] = 5;\n\t    _this.widths[TYPE.REPEAT_END] = 5;\n\t    _this.widths[TYPE.REPEAT_BOTH] = 5;\n\t    _this.widths[TYPE.NONE] = 5;\n\t\n\t    _this.paddings = {};\n\t    _this.paddings[TYPE.SINGLE] = 0;\n\t    _this.paddings[TYPE.DOUBLE] = 0;\n\t    _this.paddings[TYPE.END] = 0;\n\t    _this.paddings[TYPE.REPEAT_BEGIN] = 15;\n\t    _this.paddings[TYPE.REPEAT_END] = 15;\n\t    _this.paddings[TYPE.REPEAT_BOTH] = 15;\n\t    _this.paddings[TYPE.NONE] = 0;\n\t\n\t    _this.setPosition(_stavemodifier.StaveModifier.Position.BEGIN);\n\t    _this.setType(type);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Barline, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Barline.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'getType',\n\t    value: function getType() {\n\t      return this.type;\n\t    }\n\t  }, {\n\t    key: 'setType',\n\t    value: function setType(type) {\n\t      this.type = type;\n\t      this.setWidth(this.widths[this.type]);\n\t      this.setPadding(this.paddings[this.type]);\n\t      return this;\n\t    }\n\t\n\t    // Draw barlines\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(stave) {\n\t      stave.checkContext();\n\t      this.setRendered();\n\t\n\t      switch (this.type) {\n\t        case Barline.type.SINGLE:\n\t          this.drawVerticalBar(stave, this.x, false);\n\t          break;\n\t        case Barline.type.DOUBLE:\n\t          this.drawVerticalBar(stave, this.x, true);\n\t          break;\n\t        case Barline.type.END:\n\t          this.drawVerticalEndBar(stave, this.x);\n\t          break;\n\t        case Barline.type.REPEAT_BEGIN:\n\t          // If the barline is shifted over (in front of clef/time/key)\n\t          // Draw vertical bar at the beginning.\n\t          this.drawRepeatBar(stave, this.x, true);\n\t          if (stave.getX() !== this.x) {\n\t            this.drawVerticalBar(stave, stave.getX());\n\t          }\n\t\n\t          break;\n\t        case Barline.type.REPEAT_END:\n\t          this.drawRepeatBar(stave, this.x, false);\n\t          break;\n\t        case Barline.type.REPEAT_BOTH:\n\t          this.drawRepeatBar(stave, this.x, false);\n\t          this.drawRepeatBar(stave, this.x, true);\n\t          break;\n\t        default:\n\t          // Default is NONE, so nothing to draw\n\t          break;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'drawVerticalBar',\n\t    value: function drawVerticalBar(stave, x, double_bar) {\n\t      stave.checkContext();\n\t      var topY = stave.getTopLineTopY();\n\t      var botY = stave.getBottomLineBottomY();\n\t      if (double_bar) {\n\t        stave.context.fillRect(x - 3, topY, 1, botY - topY);\n\t      }\n\t      stave.context.fillRect(x, topY, 1, botY - topY);\n\t    }\n\t  }, {\n\t    key: 'drawVerticalEndBar',\n\t    value: function drawVerticalEndBar(stave, x) {\n\t      stave.checkContext();\n\t      var topY = stave.getTopLineTopY();\n\t      var botY = stave.getBottomLineBottomY();\n\t      stave.context.fillRect(x - 5, topY, 1, botY - topY);\n\t      stave.context.fillRect(x - 2, topY, 3, botY - topY);\n\t    }\n\t  }, {\n\t    key: 'drawRepeatBar',\n\t    value: function drawRepeatBar(stave, x, begin) {\n\t      stave.checkContext();\n\t\n\t      var topY = stave.getTopLineTopY();\n\t      var botY = stave.getBottomLineBottomY();\n\t      var x_shift = 3;\n\t\n\t      if (!begin) {\n\t        x_shift = -5;\n\t      }\n\t\n\t      stave.context.fillRect(x + x_shift, topY, 1, botY - topY);\n\t      stave.context.fillRect(x - 2, topY, 3, botY - topY);\n\t\n\t      var dot_radius = 2;\n\t\n\t      // Shift dots left or right\n\t      if (begin) {\n\t        x_shift += 4;\n\t      } else {\n\t        x_shift -= 4;\n\t      }\n\t\n\t      var dot_x = x + x_shift + dot_radius / 2;\n\t\n\t      // calculate the y offset based on number of stave lines\n\t      var y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n\t      y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;\n\t      var dot_y = topY + y_offset + dot_radius / 2;\n\t\n\t      // draw the top repeat dot\n\t      stave.context.beginPath();\n\t      stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n\t      stave.context.fill();\n\t\n\t      // draw the bottom repeat dot\n\t      dot_y += stave.getSpacingBetweenLines();\n\t      stave.context.beginPath();\n\t      stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n\t      stave.context.fill();\n\t    }\n\t  }]);\n\n\t  return Barline;\n\t}(_stavemodifier.StaveModifier);\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.StaveModifier = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// A base class for stave modifiers (e.g. clefs, key signatures)\n\t\n\tvar StaveModifier = exports.StaveModifier = function (_Element) {\n\t  _inherits(StaveModifier, _Element);\n\t\n\t  _createClass(StaveModifier, null, [{\n\t    key: 'Position',\n\t    get: function get() {\n\t      return {\n\t        LEFT: 1,\n\t        RIGHT: 2,\n\t        ABOVE: 3,\n\t        BELOW: 4,\n\t        BEGIN: 5,\n\t        END: 6\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function StaveModifier() {\n\t    _classCallCheck(this, StaveModifier);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveModifier).call(this));\n\t\n\t    _this.setAttribute('type', 'StaveModifier');\n\t\n\t    _this.padding = 10;\n\t    _this.position = StaveModifier.Position.ABOVE;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(StaveModifier, [{\n\t    key: 'getPosition',\n\t    value: function getPosition() {\n\t      return this.position;\n\t    }\n\t  }, {\n\t    key: 'setPosition',\n\t    value: function setPosition(position) {\n\t      this.position = position;return this;\n\t    }\n\t  }, {\n\t    key: 'getStave',\n\t    value: function getStave() {\n\t      return this.stave;\n\t    }\n\t  }, {\n\t    key: 'setStave',\n\t    value: function setStave(stave) {\n\t      this.stave = stave;return this;\n\t    }\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      return this.width;\n\t    }\n\t  }, {\n\t    key: 'setWidth',\n\t    value: function setWidth(width) {\n\t      this.width = width;return this;\n\t    }\n\t  }, {\n\t    key: 'getX',\n\t    value: function getX() {\n\t      return this.x;\n\t    }\n\t  }, {\n\t    key: 'setX',\n\t    value: function setX(x) {\n\t      this.x = x;return this;\n\t    }\n\t  }, {\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return '';\n\t    }\n\t  }, {\n\t    key: 'makeSpacer',\n\t    value: function makeSpacer(padding) {\n\t      // TODO(0xfe): Return an instance of type `Spacer` based on `GhostNote`\n\t      // instead of this hack.\n\t\n\t      return {\n\t        getContext: function getContext() {\n\t          return true;\n\t        },\n\t        setStave: function setStave() {},\n\t        renderToStave: function renderToStave() {},\n\t        getMetrics: function getMetrics() {\n\t          return { width: padding };\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: 'placeGlyphOnLine',\n\t    value: function placeGlyphOnLine(glyph, stave, line) {\n\t      glyph.setYShift(stave.getYForLine(line) - stave.getYForGlyphs());\n\t    }\n\t  }, {\n\t    key: 'getPadding',\n\t    value: function getPadding(index) {\n\t      return index !== undefined && index < 2 ? 0 : this.padding;\n\t    }\n\t  }, {\n\t    key: 'setPadding',\n\t    value: function setPadding(padding) {\n\t      this.padding = padding;return this;\n\t    }\n\t  }]);\n\n\t  return StaveModifier;\n\t}(_element.Element);\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Repetition = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _stavemodifier = __webpack_require__(45);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author Larry Kuhns 2011\n\t\n\tvar Repetition = exports.Repetition = function (_StaveModifier) {\n\t  _inherits(Repetition, _StaveModifier);\n\t\n\t  _createClass(Repetition, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'repetitions';\n\t    }\n\t  }, {\n\t    key: 'type',\n\t    get: function get() {\n\t      return {\n\t        NONE: 1, // no coda or segno\n\t        CODA_LEFT: 2, // coda at beginning of stave\n\t        CODA_RIGHT: 3, // coda at end of stave\n\t        SEGNO_LEFT: 4, // segno at beginning of stave\n\t        SEGNO_RIGHT: 5, // segno at end of stave\n\t        DC: 6, // D.C. at end of stave\n\t        DC_AL_CODA: 7, // D.C. al coda at end of stave\n\t        DC_AL_FINE: 8, // D.C. al Fine end of stave\n\t        DS: 9, // D.S. at end of stave\n\t        DS_AL_CODA: 10, // D.S. al coda at end of stave\n\t        DS_AL_FINE: 11, // D.S. al Fine at end of stave\n\t        FINE: 12 };\n\t    }\n\t  }]);\n\t\n\t  function Repetition(type, x, y_shift) {\n\t    _classCallCheck(this, Repetition);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Repetition).call(this));\n\t\n\t    _this.setAttribute('type', 'Repetition');\n\t\n\t    _this.symbol_type = type;\n\t    _this.x = x;\n\t    _this.x_shift = 0;\n\t    _this.y_shift = y_shift;\n\t    _this.font = {\n\t      family: 'times',\n\t      size: 12,\n\t      weight: 'bold italic'\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Repetition, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Repetition.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'setShiftX',\n\t    value: function setShiftX(x) {\n\t      this.x_shift = x;return this;\n\t    }\n\t  }, {\n\t    key: 'setShiftY',\n\t    value: function setShiftY(y) {\n\t      this.y_shift = y;return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(stave, x) {\n\t      this.setRendered();\n\t\n\t      switch (this.symbol_type) {\n\t        case Repetition.type.CODA_RIGHT:\n\t          this.drawCodaFixed(stave, x + stave.width);\n\t          break;\n\t        case Repetition.type.CODA_LEFT:\n\t          this.drawSymbolText(stave, x, 'Coda', true);\n\t          break;\n\t        case Repetition.type.SEGNO_LEFT:\n\t          this.drawSignoFixed(stave, x);\n\t          break;\n\t        case Repetition.type.SEGNO_RIGHT:\n\t          this.drawSignoFixed(stave, x + stave.width);\n\t          break;\n\t        case Repetition.type.DC:\n\t          this.drawSymbolText(stave, x, 'D.C.', false);\n\t          break;\n\t        case Repetition.type.DC_AL_CODA:\n\t          this.drawSymbolText(stave, x, 'D.C. al', true);\n\t          break;\n\t        case Repetition.type.DC_AL_FINE:\n\t          this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n\t          break;\n\t        case Repetition.type.DS:\n\t          this.drawSymbolText(stave, x, 'D.S.', false);\n\t          break;\n\t        case Repetition.type.DS_AL_CODA:\n\t          this.drawSymbolText(stave, x, 'D.S. al', true);\n\t          break;\n\t        case Repetition.type.DS_AL_FINE:\n\t          this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n\t          break;\n\t        case Repetition.type.FINE:\n\t          this.drawSymbolText(stave, x, 'Fine', false);\n\t          break;\n\t        default:\n\t          break;\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'drawCodaFixed',\n\t    value: function drawCodaFixed(stave, x) {\n\t      var y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n\t      _glyph.Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 40, 'v4d', true);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'drawSignoFixed',\n\t    value: function drawSignoFixed(stave, x) {\n\t      var y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n\t      _glyph.Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 30, 'v8c', true);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'drawSymbolText',\n\t    value: function drawSymbolText(stave, x, text, draw_coda) {\n\t      var ctx = stave.checkContext();\n\t\n\t      ctx.save();\n\t      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\t      // Default to right symbol\n\t      var text_x = 0 + this.x_shift;\n\t      var symbol_x = x + this.x_shift;\n\t      if (this.symbol_type === Repetition.type.CODA_LEFT) {\n\t        // Offset Coda text to right of stave beginning\n\t        text_x = this.x + stave.options.vertical_bar_width;\n\t        symbol_x = text_x + ctx.measureText(text).width + 12;\n\t      } else {\n\t        // Offset Signo text to left stave end\n\t        symbol_x = this.x + x + stave.width - 5 + this.x_shift;\n\t        text_x = symbol_x - +ctx.measureText(text).width - 12;\n\t      }\n\t\n\t      var y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n\t      if (draw_coda) {\n\t        _glyph.Glyph.renderGlyph(ctx, symbol_x, y, 40, 'v4d', true);\n\t      }\n\t\n\t      ctx.fillText(text, text_x, y + 5);\n\t      ctx.restore();\n\t\n\t      return this;\n\t    }\n\t  }]);\n\n\t  return Repetition;\n\t}(_stavemodifier.StaveModifier);\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.StaveSection = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _stavemodifier = __webpack_require__(45);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author Larry Kuhns 2011\n\t\n\tvar StaveSection = exports.StaveSection = function (_StaveModifier) {\n\t  _inherits(StaveSection, _StaveModifier);\n\t\n\t  _createClass(StaveSection, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'stavesection';\n\t    }\n\t  }]);\n\t\n\t  function StaveSection(section, x, shift_y) {\n\t    _classCallCheck(this, StaveSection);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveSection).call(this));\n\t\n\t    _this.setAttribute('type', 'StaveSection');\n\t\n\t    _this.setWidth(16);\n\t    _this.section = section;\n\t    _this.x = x;\n\t    _this.shift_x = 0;\n\t    _this.shift_y = shift_y;\n\t    _this.font = {\n\t      family: 'sans-serif',\n\t      size: 12,\n\t      weight: 'bold'\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  _createClass(StaveSection, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return StaveSection.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'setStaveSection',\n\t    value: function setStaveSection(section) {\n\t      this.section = section;return this;\n\t    }\n\t  }, {\n\t    key: 'setShiftX',\n\t    value: function setShiftX(x) {\n\t      this.shift_x = x;return this;\n\t    }\n\t  }, {\n\t    key: 'setShiftY',\n\t    value: function setShiftY(y) {\n\t      this.shift_y = y;return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(stave, shift_x) {\n\t      var ctx = stave.checkContext();\n\t      this.setRendered();\n\t\n\t      ctx.save();\n\t      ctx.lineWidth = 2;\n\t      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\t      var text_width = ctx.measureText('' + this.section).width;\n\t      var width = text_width + 6; // add left & right padding\n\t      if (width < 18) width = 18;\n\t      var height = 20;\n\t      //  Seems to be a good default y\n\t      var y = stave.getYForTopText(3) + this.shift_y;\n\t      var x = this.x + shift_x;\n\t      ctx.beginPath();\n\t      ctx.lineWidth = 2;\n\t      ctx.rect(x, y, width, height);\n\t      ctx.stroke();\n\t      x += (width - text_width) / 2;\n\t      ctx.fillText('' + this.section, x, y + 16);\n\t      ctx.restore();\n\t      return this;\n\t    }\n\t  }]);\n\n\t  return StaveSection;\n\t}(_stavemodifier.StaveModifier);\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.StaveTempo = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _stavemodifier = __webpack_require__(45);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author Radosaw Eichler 2012\n\t\n\tvar StaveTempo = exports.StaveTempo = function (_StaveModifier) {\n\t  _inherits(StaveTempo, _StaveModifier);\n\t\n\t  _createClass(StaveTempo, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'stavetempo';\n\t    }\n\t  }]);\n\t\n\t  function StaveTempo(tempo, x, shift_y) {\n\t    _classCallCheck(this, StaveTempo);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveTempo).call(this));\n\t\n\t    _this.setAttribute('type', 'StaveTempo');\n\t\n\t    _this.tempo = tempo;\n\t    _this.position = _modifier.Modifier.Position.ABOVE;\n\t    _this.x = x;\n\t    _this.shift_x = 10;\n\t    _this.shift_y = shift_y;\n\t    _this.font = {\n\t      family: 'times',\n\t      size: 14,\n\t      weight: 'bold'\n\t    };\n\t    _this.render_options = {\n\t      glyph_font_scale: 30 };\n\t    return _this;\n\t  }\n\t\n\t  _createClass(StaveTempo, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return StaveTempo.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'setTempo',\n\t    value: function setTempo(tempo) {\n\t      this.tempo = tempo;return this;\n\t    }\n\t  }, {\n\t    key: 'setShiftX',\n\t    value: function setShiftX(x) {\n\t      this.shift_x = x;return this;\n\t    }\n\t  }, {\n\t    key: 'setShiftY',\n\t    value: function setShiftY(y) {\n\t      this.shift_y = y;return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(stave, shift_x) {\n\t      var ctx = stave.checkContext();\n\t      this.setRendered();\n\t\n\t      var options = this.render_options;\n\t      // FIXME: What does the '38' mean? Why 38? Is that supposed to\n\t      // be the default font size for standard notation?\n\t      var scale = options.glyph_font_scale / 38;\n\t      var name = this.tempo.name;\n\t      var duration = this.tempo.duration;\n\t      var dots = this.tempo.dots;\n\t      var bpm = this.tempo.bpm;\n\t      var font = this.font;\n\t      var x = this.x + this.shift_x + shift_x;\n\t      var y = stave.getYForTopText(1) + this.shift_y;\n\t\n\t      ctx.save();\n\t\n\t      if (name) {\n\t        ctx.setFont(font.family, font.size, font.weight);\n\t        ctx.fillText(name, x, y);\n\t        x += ctx.measureText(name).width;\n\t      }\n\t\n\t      if (duration && bpm) {\n\t        ctx.setFont(font.family, font.size, 'normal');\n\t\n\t        if (name) {\n\t          x += ctx.measureText(' ').width;\n\t          ctx.fillText('(', x, y);\n\t          x += ctx.measureText('(').width;\n\t        }\n\t\n\t        var code = _tables.Flow.durationToGlyph(duration);\n\t\n\t        x += 3 * scale;\n\t        _glyph.Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);\n\t        x += code.getWidth() * scale;\n\t\n\t        // Draw stem and flags\n\t        if (code.stem) {\n\t          var stem_height = 30;\n\t\n\t          if (code.beam_count) stem_height += 3 * (code.beam_count - 1);\n\t\n\t          stem_height *= scale;\n\t\n\t          var y_top = y - stem_height;\n\t          ctx.fillRect(x - scale, y_top, scale, stem_height);\n\t\n\t          if (code.flag) {\n\t            _glyph.Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem);\n\t\n\t            if (!dots) x += 6 * scale;\n\t          }\n\t        }\n\t\n\t        // Draw dot\n\t        for (var i = 0; i < dots; i++) {\n\t          x += 6 * scale;\n\t          ctx.beginPath();\n\t          ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n\t          ctx.fill();\n\t        }\n\t\n\t        ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n\t      }\n\t\n\t      ctx.restore();\n\t      return this;\n\t    }\n\t  }]);\n\n\t  return StaveTempo;\n\t}(_stavemodifier.StaveModifier);\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.StaveText = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _stavemodifier = __webpack_require__(45);\n\t\n\tvar _textnote = __webpack_require__(50);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author Taehoon Moon 2014\n\t\n\tvar StaveText = exports.StaveText = function (_StaveModifier) {\n\t  _inherits(StaveText, _StaveModifier);\n\t\n\t  _createClass(StaveText, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'stavetext';\n\t    }\n\t  }]);\n\t\n\t  function StaveText(text, position, options) {\n\t    _classCallCheck(this, StaveText);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveText).call(this));\n\t\n\t    _this.setAttribute('type', 'StaveText');\n\t\n\t    _this.setWidth(16);\n\t    _this.text = text;\n\t    _this.position = position;\n\t    _this.options = {\n\t      shift_x: 0,\n\t      shift_y: 0,\n\t      justification: _textnote.TextNote.Justification.CENTER\n\t    };\n\t    _vex.Vex.Merge(_this.options, options);\n\t\n\t    _this.font = {\n\t      family: 'times',\n\t      size: 16,\n\t      weight: 'normal'\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  _createClass(StaveText, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return StaveText.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'setStaveText',\n\t    value: function setStaveText(text) {\n\t      this.text = text;return this;\n\t    }\n\t  }, {\n\t    key: 'setShiftX',\n\t    value: function setShiftX(x) {\n\t      this.shift_x = x;return this;\n\t    }\n\t  }, {\n\t    key: 'setShiftY',\n\t    value: function setShiftY(y) {\n\t      this.shift_y = y;return this;\n\t    }\n\t  }, {\n\t    key: 'setFont',\n\t    value: function setFont(font) {\n\t      _vex.Vex.Merge(this.font, font);\n\t    }\n\t  }, {\n\t    key: 'setText',\n\t    value: function setText(text) {\n\t      this.text = text;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(stave) {\n\t      var ctx = stave.checkContext();\n\t      this.setRendered();\n\t\n\t      ctx.save();\n\t      ctx.lineWidth = 2;\n\t      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\t      var text_width = ctx.measureText('' + this.text).width;\n\t\n\t      var x = void 0;\n\t      var y = void 0;\n\t      var Position = _stavemodifier.StaveModifier.Position;\n\t      var Justification = _textnote.TextNote.Justification;\n\t      switch (this.position) {\n\t        case Position.LEFT:\n\t        case Position.RIGHT:\n\t          y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\n\t          if (this.position === Position.LEFT) {\n\t            x = stave.getX() - text_width - 24 + this.options.shift_x;\n\t          } else {\n\t            x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\n\t          }\n\t          break;\n\t        case Position.ABOVE:\n\t        case Position.BELOW:\n\t          x = stave.getX() + this.options.shift_x;\n\t          if (this.options.justification === Justification.CENTER) {\n\t            x += stave.getWidth() / 2 - text_width / 2;\n\t          } else if (this.options.justification === Justification.RIGHT) {\n\t            x += stave.getWidth() - text_width;\n\t          }\n\t\n\t          if (this.position === Position.ABOVE) {\n\t            y = stave.getYForTopText(2) + this.options.shift_y;\n\t          } else {\n\t            y = stave.getYForBottomText(2) + this.options.shift_y;\n\t          }\n\t          break;\n\t        default:\n\t          throw new _vex.Vex.RERR('InvalidPosition', 'Value Must be in Modifier.Position.');\n\t      }\n\t\n\t      ctx.fillText('' + this.text, x, y + 4);\n\t      ctx.restore();\n\t      return this;\n\t    }\n\t  }]);\n\n\t  return StaveText;\n\t}(_stavemodifier.StaveModifier);\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.TextNote = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _note = __webpack_require__(22);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// `TextNote` is a notation element that is positioned in time. Generally\n\t// meant for objects that sit above/below the staff and inline with each other.\n\t// Examples of this would be such as dynamics, lyrics, chord changes, etc.\n\t\n\tvar TextNote = exports.TextNote = function (_Note) {\n\t  _inherits(TextNote, _Note);\n\t\n\t  _createClass(TextNote, null, [{\n\t    key: 'Justification',\n\t    get: function get() {\n\t      return {\n\t        LEFT: 1,\n\t        CENTER: 2,\n\t        RIGHT: 3\n\t      };\n\t    }\n\t\n\t    // Glyph data\n\t\n\t  }, {\n\t    key: 'GLYPHS',\n\t    get: function get() {\n\t      return {\n\t        'segno': {\n\t          code: 'v8c',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: -10\n\t        },\n\t        'tr': {\n\t          code: 'v1f',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t        'mordent_upper': {\n\t          code: 'v1e',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t        'mordent_lower': {\n\t          code: 'v45',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t        'f': {\n\t          code: 'vba',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t        'p': {\n\t          code: 'vbf',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t        'm': {\n\t          code: 'v62',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t        's': {\n\t          code: 'v4a',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t        'z': {\n\t          code: 'v80',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t        'coda': {\n\t          code: 'v4d',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: -8\n\t        },\n\t        'pedal_open': {\n\t          code: 'v36',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t        'pedal_close': {\n\t          code: 'v5d',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 3\n\t        },\n\t        'caesura_straight': {\n\t          code: 'v34',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 2\n\t        },\n\t        'caesura_curved': {\n\t          code: 'v4b',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 2\n\t        },\n\t        'breath': {\n\t          code: 'v6c',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t        'tick': {\n\t          code: 'v6f',\n\t          point: 50,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t        'turn': {\n\t          code: 'v72',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t        'turn_inverted': {\n\t          code: 'v33',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        },\n\t\n\t        // DEPRECATED - please use \"mordent_upper\" or \"mordent_lower\"\n\t        'mordent': {\n\t          code: 'v1e',\n\t          point: 40,\n\t          x_shift: 0,\n\t          y_shift: 0\n\t        }\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function TextNote(text_struct) {\n\t    _classCallCheck(this, TextNote);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TextNote).call(this, text_struct));\n\t\n\t    _this.setAttribute('type', 'TextNote');\n\t\n\t    // Note properties\n\t    _this.text = text_struct.text;\n\t    _this.superscript = text_struct.superscript;\n\t    _this.subscript = text_struct.subscript;\n\t    _this.glyph_type = text_struct.glyph;\n\t    _this.glyph = null;\n\t    _this.font = {\n\t      family: 'Arial',\n\t      size: 12,\n\t      weight: ''\n\t    };\n\t\n\t    // Set font\n\t    if (text_struct.font) _this.font = text_struct.font;\n\t\n\t    // Determine and set initial note width. Note that the text width is\n\t    // an approximation and isn't very accurate. The only way to accurately\n\t    // measure the length of text is with `canvasmeasureText()`\n\t    if (_this.glyph_type) {\n\t      var struct = TextNote.GLYPHS[_this.glyph_type];\n\t      if (!struct) throw new _vex.Vex.RERR('Invalid glyph type: ' + _this.glyph_type);\n\t\n\t      _this.glyph = new _glyph.Glyph(struct.code, struct.point, { cache: false });\n\t\n\t      if (struct.width) {\n\t        _this.setWidth(struct.width);\n\t      } else {\n\t        _this.setWidth(_this.glyph.getMetrics().width);\n\t      }\n\t\n\t      _this.glyph_struct = struct;\n\t    } else {\n\t      _this.setWidth(_tables.Flow.textWidth(_this.text));\n\t    }\n\t    _this.line = text_struct.line || 0;\n\t    _this.smooth = text_struct.smooth || false;\n\t    _this.ignore_ticks = text_struct.ignore_ticks || false;\n\t    _this.justification = TextNote.Justification.LEFT;\n\t    return _this;\n\t  }\n\t\n\t  // Set the horizontal justification of the TextNote\n\t\n\t\n\t  _createClass(TextNote, [{\n\t    key: 'setJustification',\n\t    value: function setJustification(just) {\n\t      this.justification = just;\n\t      return this;\n\t    }\n\t\n\t    // Set the Stave line on which the note should be placed\n\t\n\t  }, {\n\t    key: 'setLine',\n\t    value: function setLine(line) {\n\t      this.line = line;\n\t      return this;\n\t    }\n\t\n\t    // Pre-render formatting\n\t\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      this.checkContext();\n\t\n\t      if (this.preFormatted) return;\n\t\n\t      if (this.smooth) {\n\t        this.setWidth(0);\n\t      } else {\n\t        if (this.glyph) {\n\t          // Width already set.\n\t        } else {\n\t          this.setWidth(this.context.measureText(this.text).width);\n\t        }\n\t      }\n\t\n\t      if (this.justification === TextNote.Justification.CENTER) {\n\t        this.extraLeftPx = this.width / 2;\n\t      } else if (this.justification === TextNote.Justification.RIGHT) {\n\t        this.extraLeftPx = this.width;\n\t      }\n\t\n\t      this.setPreFormatted(true);\n\t    }\n\t\n\t    // Renders the TextNote\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t\n\t      if (!this.stave) {\n\t        throw new _vex.Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\t      }\n\t\n\t      this.setRendered();\n\t      var ctx = this.context;\n\t      var x = this.getAbsoluteX();\n\t      if (this.justification === TextNote.Justification.CENTER) {\n\t        x -= this.getWidth() / 2;\n\t      } else if (this.justification === TextNote.Justification.RIGHT) {\n\t        x -= this.getWidth();\n\t      }\n\t\n\t      var y = void 0;\n\t      if (this.glyph) {\n\t        y = this.stave.getYForLine(this.line + -3);\n\t        this.glyph.render(this.context, x + this.glyph_struct.x_shift, y + this.glyph_struct.y_shift);\n\t      } else {\n\t        y = this.stave.getYForLine(this.line + -3);\n\t        ctx.save();\n\t        ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\t        ctx.fillText(this.text, x, y);\n\t\n\t        // Width of the letter M gives us the approximate height of the text\n\t        var height = ctx.measureText('M').width;\n\t        // Get accurate width of text\n\t        var width = ctx.measureText(this.text).width;\n\t\n\t        // Write superscript\n\t        if (this.superscript) {\n\t          ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n\t          ctx.fillText(this.superscript, x + width + 2, y - height / 2.2);\n\t        }\n\t\n\t        // Write subscript\n\t        if (this.subscript) {\n\t          ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n\t          ctx.fillText(this.subscript, x + width + 2, y + height / 2.2 - 1);\n\t        }\n\t\n\t        ctx.restore();\n\t      }\n\t    }\n\t  }]);\n\n\t  return TextNote;\n\t}(_note.Note);\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Clef = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _stavemodifier = __webpack_require__(45);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n\t// Co-author: Benjamin W. Bohl\n\t//\n\t// ## Description\n\t//\n\t// This file implements various types of clefs that can be rendered on a stave.\n\t//\n\t// See `tests/clef_tests.js` for usage examples.\n\t\n\t// To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (Clef.DEBUG) _vex.Vex.L('Vex.Flow.Clef', args);\n\t}\n\t\n\tvar Clef = exports.Clef = function (_StaveModifier) {\n\t  _inherits(Clef, _StaveModifier);\n\t\n\t  _createClass(Clef, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'clefs';\n\t    }\n\t\n\t    // Every clef name is associated with a glyph code from the font file\n\t    // and a default stave line number.\n\t\n\t  }, {\n\t    key: 'types',\n\t    get: function get() {\n\t      return {\n\t        'treble': {\n\t          code: 'v83',\n\t          line: 3\n\t        },\n\t        'bass': {\n\t          code: 'v79',\n\t          line: 1\n\t        },\n\t        'alto': {\n\t          code: 'vad',\n\t          line: 2\n\t        },\n\t        'tenor': {\n\t          code: 'vad',\n\t          line: 1\n\t        },\n\t        'percussion': {\n\t          code: 'v59',\n\t          line: 2\n\t        },\n\t        'soprano': {\n\t          code: 'vad',\n\t          line: 4\n\t        },\n\t        'mezzo-soprano': {\n\t          code: 'vad',\n\t          line: 3\n\t        },\n\t        'baritone-c': {\n\t          code: 'vad',\n\t          line: 0\n\t        },\n\t        'baritone-f': {\n\t          code: 'v79',\n\t          line: 2\n\t        },\n\t        'subbass': {\n\t          code: 'v79',\n\t          line: 0\n\t        },\n\t        'french': {\n\t          code: 'v83',\n\t          line: 4\n\t        },\n\t        'tab': {\n\t          code: 'v2f'\n\t        }\n\t      };\n\t    }\n\t\n\t    // Sizes affect the point-size of the clef.\n\t\n\t  }, {\n\t    key: 'sizes',\n\t    get: function get() {\n\t      return {\n\t        'default': 40,\n\t        'small': 32\n\t      };\n\t    }\n\t\n\t    // Annotations attach to clefs -- such as \"8\" for octave up or down.\n\t\n\t  }, {\n\t    key: 'annotations',\n\t    get: function get() {\n\t      return {\n\t        '8va': {\n\t          code: 'v8',\n\t          sizes: {\n\t            'default': {\n\t              point: 20,\n\t              attachments: {\n\t                'treble': {\n\t                  line: -1.2,\n\t                  x_shift: 11\n\t                }\n\t              }\n\t            },\n\t            'small': {\n\t              point: 18,\n\t              attachments: {\n\t                'treble': {\n\t                  line: -0.4,\n\t                  x_shift: 8\n\t                }\n\t              }\n\t            }\n\t          }\n\t        },\n\t        '8vb': {\n\t          code: 'v8',\n\t          sizes: {\n\t            'default': {\n\t              point: 20,\n\t              attachments: {\n\t                'treble': {\n\t                  line: 6.3,\n\t                  x_shift: 10\n\t                },\n\t                'bass': {\n\t                  line: 4,\n\t                  x_shift: 1\n\t                }\n\t              }\n\t            },\n\t            'small': {\n\t              point: 18,\n\t              attachments: {\n\t                'treble': {\n\t                  line: 5.8,\n\t                  x_shift: 6\n\t                },\n\t                'bass': {\n\t                  line: 3.5,\n\t                  x_shift: 0.5\n\t                }\n\t              }\n\t            }\n\t          }\n\t        }\n\t      };\n\t    }\n\t\n\t    // Create a new clef. The parameter `clef` must be a key from\n\t    // `Clef.types`.\n\t\n\t  }]);\n\t\n\t  function Clef(type, size, annotation) {\n\t    _classCallCheck(this, Clef);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Clef).call(this));\n\t\n\t    _this.setAttribute('type', 'Clef');\n\t\n\t    _this.setPosition(_stavemodifier.StaveModifier.Position.BEGIN);\n\t    _this.setType(type, size, annotation);\n\t    _this.setWidth(_this.glyph.getMetrics().width);\n\t    L('Creating clef:', type);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Clef, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Clef.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'setType',\n\t    value: function setType(type, size, annotation) {\n\t      this.type = type;\n\t      this.clef = Clef.types[type];\n\t      if (size === undefined) {\n\t        this.size = 'default';\n\t      } else {\n\t        this.size = size;\n\t      }\n\t      this.clef.point = Clef.sizes[this.size];\n\t      this.glyph = new _glyph.Glyph(this.clef.code, this.clef.point);\n\t\n\t      // If an annotation, such as 8va, is specified, add it to the Clef object.\n\t      if (annotation !== undefined) {\n\t        var anno_dict = Clef.annotations[annotation];\n\t        this.annotation = {\n\t          code: anno_dict.code,\n\t          point: anno_dict.sizes[this.size].point,\n\t          line: anno_dict.sizes[this.size].attachments[this.type].line,\n\t          x_shift: anno_dict.sizes[this.size].attachments[this.type].x_shift\n\t        };\n\t\n\t        this.attachment = new _glyph.Glyph(this.annotation.code, this.annotation.point);\n\t        this.attachment.metrics.x_max = 0;\n\t        this.attachment.setXShift(this.annotation.x_shift);\n\t      } else {\n\t        this.annotation = undefined;\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      if (this.type === 'tab' && !this.stave) {\n\t        throw new _vex.Vex.RERR('ClefError', \"Can't get width without stave.\");\n\t      }\n\t\n\t      return this.width;\n\t    }\n\t  }, {\n\t    key: 'setStave',\n\t    value: function setStave(stave) {\n\t      this.stave = stave;\n\t\n\t      if (this.type !== 'tab') return this;\n\t\n\t      var glyphScale = void 0;\n\t      var glyphOffset = void 0;\n\t      var numLines = this.stave.getOptions().num_lines;\n\t      switch (numLines) {\n\t        case 8:\n\t          glyphScale = 55;\n\t          glyphOffset = 14;\n\t          break;\n\t        case 7:\n\t          glyphScale = 47;\n\t          glyphOffset = 8;\n\t          break;\n\t        case 6:\n\t          glyphScale = 40;\n\t          glyphOffset = 1;\n\t          break;\n\t        case 5:\n\t          glyphScale = 30;\n\t          glyphOffset = -6;\n\t          break;\n\t        case 4:\n\t          glyphScale = 23;\n\t          glyphOffset = -12;\n\t          break;\n\t        default:\n\t          throw new _vex.Vex.RERR('ClefError', 'Invalid number of lines: ' + numLines);\n\t      }\n\t\n\t      this.glyph.setPoint(glyphScale);\n\t      this.glyph.setYShift(glyphOffset);\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      if (!this.x) throw new _vex.Vex.RERR('ClefError', \"Can't draw clef without x.\");\n\t      if (!this.stave) throw new _vex.Vex.RERR('ClefError', \"Can't draw clef without stave.\");\n\t      this.setRendered();\n\t\n\t      this.glyph.setStave(this.stave);\n\t      this.glyph.setContext(this.stave.context);\n\t      if (this.clef.line !== undefined) {\n\t        this.placeGlyphOnLine(this.glyph, this.stave, this.clef.line);\n\t      }\n\t\n\t      this.glyph.renderToStave(this.x);\n\t\n\t      if (this.annotation !== undefined) {\n\t        this.placeGlyphOnLine(this.attachment, this.stave, this.annotation.line);\n\t        this.attachment.setStave(this.stave);\n\t        this.attachment.setContext(this.stave.context);\n\t        this.attachment.renderToStave(this.x);\n\t      }\n\t    }\n\t  }]);\n\n\t  return Clef;\n\t}(_stavemodifier.StaveModifier);\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.KeySignature = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _stavemodifier = __webpack_require__(45);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author: Cyril Silverman\n\t//\n\t// ## Description\n\t//\n\t// This file implements key signatures. A key signature sits on a stave\n\t// and indicates the notes with implicit accidentals.\n\t\n\tvar KeySignature = exports.KeySignature = function (_StaveModifier) {\n\t  _inherits(KeySignature, _StaveModifier);\n\t\n\t  _createClass(KeySignature, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'keysignatures';\n\t    }\n\t\n\t    // Space between natural and following accidental depending\n\t    // on vertical position\n\t\n\t  }, {\n\t    key: 'accidentalSpacing',\n\t    get: function get() {\n\t      return {\n\t        '#': {\n\t          above: 6,\n\t          below: 4\n\t        },\n\t        'b': {\n\t          above: 4,\n\t          below: 7\n\t        },\n\t        'n': {\n\t          above: 4,\n\t          below: 1\n\t        },\n\t        '##': {\n\t          above: 6,\n\t          below: 4\n\t        },\n\t        'bb': {\n\t          above: 4,\n\t          below: 7\n\t        },\n\t        'db': {\n\t          above: 4,\n\t          below: 7\n\t        },\n\t        'd': {\n\t          above: 4,\n\t          below: 7\n\t        },\n\t        'bbs': {\n\t          above: 4,\n\t          below: 7\n\t        },\n\t        '++': {\n\t          above: 6,\n\t          below: 4\n\t        },\n\t        '+': {\n\t          above: 6,\n\t          below: 4\n\t        },\n\t        '+-': {\n\t          above: 6,\n\t          below: 4\n\t        },\n\t        '++-': {\n\t          above: 6,\n\t          below: 4\n\t        },\n\t        'bs': {\n\t          above: 4,\n\t          below: 10\n\t        },\n\t        'bss': {\n\t          above: 4,\n\t          below: 10\n\t        }\n\t      };\n\t    }\n\t\n\t    // Create a new Key Signature based on a `key_spec`\n\t\n\t  }]);\n\t\n\t  function KeySignature(keySpec, cancelKeySpec, alterKeySpec) {\n\t    _classCallCheck(this, KeySignature);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(KeySignature).call(this));\n\t\n\t    _this.setAttribute('type', 'KeySignature');\n\t\n\t    _this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n\t    _this.setPosition(_stavemodifier.StaveModifier.Position.BEGIN);\n\t    _this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?\n\t    _this.glyphs = [];\n\t    _this.xPositions = []; // relative to this.x\n\t    _this.paddingForced = false;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(KeySignature, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return KeySignature.CATEGORY;\n\t    }\n\t\n\t    // Add an accidental glyph to the `KeySignature` instance which represents\n\t    // the provided `acc`. If `nextAcc` is also provided, the appropriate\n\t    // spacing will be included in the glyph's position\n\t\n\t  }, {\n\t    key: 'convertToGlyph',\n\t    value: function convertToGlyph(acc, nextAcc) {\n\t      var accGlyphData = _tables.Flow.accidentalCodes(acc.type);\n\t      var glyph = new _glyph.Glyph(accGlyphData.code, this.glyphFontScale);\n\t\n\t      // Determine spacing between current accidental and the next accidental\n\t      var extraWidth = 1;\n\t      if (acc.type === 'n' && nextAcc) {\n\t        var spacing = KeySignature.accidentalSpacing[nextAcc.type];\n\t        if (spacing) {\n\t          var isAbove = nextAcc.line >= acc.line;\n\t          extraWidth = isAbove ? spacing.above : spacing.below;\n\t        }\n\t      }\n\t\n\t      // Place the glyph on the stave\n\t      this.placeGlyphOnLine(glyph, this.stave, acc.line);\n\t      this.glyphs.push(glyph);\n\t\n\t      var xPosition = this.xPositions[this.xPositions.length - 1];\n\t      var glyphWidth = glyph.getMetrics().width + extraWidth;\n\t      // Store the next accidental's x position\n\t      this.xPositions.push(xPosition + glyphWidth);\n\t      // Expand size of key signature\n\t      this.width += glyphWidth;\n\t    }\n\t\n\t    // Cancel out a key signature provided in the `spec` parameter. This will\n\t    // place appropriate natural accidentals before the key signature.\n\t\n\t  }, {\n\t    key: 'cancelKey',\n\t    value: function cancelKey(spec) {\n\t      this.formatted = false;\n\t      this.cancelKeySpec = spec;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'convertToCancelAccList',\n\t    value: function convertToCancelAccList(spec) {\n\t      // Get the accidental list for the cancelled key signature\n\t      var cancel_accList = _tables.Flow.keySignature(spec);\n\t\n\t      // If the cancelled key has a different accidental type, ie: # vs b\n\t      var different_types = this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;\n\t\n\t      // Determine how many naturals needed to add\n\t      var naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;\n\t\n\t      // Return if no naturals needed\n\t      if (naturals < 1) return;\n\t\n\t      // Get the line position for each natural\n\t      var cancelled = [];\n\t      for (var i = 0; i < naturals; i++) {\n\t        var index = i;\n\t        if (!different_types) {\n\t          index = cancel_accList.length - naturals + i;\n\t        }\n\t\n\t        var acc = cancel_accList[index];\n\t        cancelled.push({ type: 'n', line: acc.line });\n\t      }\n\t\n\t      // Combine naturals with main accidental list for the key signature\n\t      this.accList = cancelled.concat(this.accList);\n\t    }\n\t\n\t    // Deprecated\n\t\n\t  }, {\n\t    key: 'addToStave',\n\t    value: function addToStave(stave) {\n\t      this.paddingForced = true;\n\t      stave.addModifier(this);\n\t\n\t      return this;\n\t    }\n\t\n\t    // Apply the accidental staff line placement based on the `clef` and\n\t    // the  accidental `type` for the key signature ('# or 'b').\n\t\n\t  }, {\n\t    key: 'convertAccLines',\n\t    value: function convertAccLines(clef, type) {\n\t      var offset = 0.0; // if clef === \"treble\"\n\t      var customLines = void 0; // when clef doesn't follow treble key sig shape\n\t\n\t      switch (clef) {\n\t        // Treble & Subbass both have offsets of 0, so are not included.\n\t        case 'soprano':\n\t          if (type === '#') customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];else offset = -1;\n\t          break;\n\t        case 'mezzo-soprano':\n\t          if (type === 'b') customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];else offset = 1.5;\n\t          break;\n\t        case 'alto':\n\t          offset = 0.5;\n\t          break;\n\t        case 'tenor':\n\t          if (type === '#') customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];else offset = -0.5;\n\t          break;\n\t        case 'baritone-f':\n\t        case 'baritone-c':\n\t          if (type === 'b') customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];else offset = 2;\n\t          break;\n\t        case 'bass':\n\t        case 'french':\n\t          offset = 1;\n\t          break;\n\t        default:\n\t          break;\n\t      }\n\t\n\t      // If there's a special case, assign those lines/spaces:\n\t      var i = void 0;\n\t      if (typeof customLines !== 'undefined') {\n\t        for (i = 0; i < this.accList.length; ++i) {\n\t          this.accList[i].line = customLines[i];\n\t        }\n\t      } else if (offset !== 0) {\n\t        for (i = 0; i < this.accList.length; ++i) {\n\t          this.accList[i].line += offset;\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getPadding',\n\t    value: function getPadding(index) {\n\t      if (!this.formatted) this.format();\n\t\n\t      return this.glyphs.length === 0 || !this.paddingForced && index < 2 ? 0 : this.padding;\n\t    }\n\t  }, {\n\t    key: 'getWidth',\n\t    value: function getWidth() {\n\t      if (!this.formatted) this.format();\n\t\n\t      return this.width;\n\t    }\n\t  }, {\n\t    key: 'setKeySig',\n\t    value: function setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\n\t      this.formatted = false;\n\t      this.keySpec = keySpec;\n\t      this.cancelKeySpec = cancelKeySpec;\n\t      this.alterKeySpec = alterKeySpec;\n\t\n\t      return this;\n\t    }\n\t\n\t    // Alter the accidentals of a key spec one by one.\n\t    // Each alteration is a new accidental that replaces the\n\t    // original accidental (or the canceled one).\n\t\n\t  }, {\n\t    key: 'alterKey',\n\t    value: function alterKey(alterKeySpec) {\n\t      this.formatted = false;\n\t      this.alterKeySpec = alterKeySpec;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'convertToAlterAccList',\n\t    value: function convertToAlterAccList(alterKeySpec) {\n\t      var max = Math.min(alterKeySpec.length, this.accList.length);\n\t      for (var i = 0; i < max; ++i) {\n\t        if (alterKeySpec[i]) {\n\t          this.accList[i].type = alterKeySpec[i];\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'format',\n\t    value: function format() {\n\t      if (!this.stave) {\n\t        throw new _vex.Vex.RERR('KeySignatureError', \"Can't draw key signature without stave.\");\n\t      }\n\t\n\t      this.width = 0;\n\t      this.glyphs = [];\n\t      this.xPositions = [0]; // initialize with initial x position\n\t      this.accList = _tables.Flow.keySignature(this.keySpec);\n\t      if (this.cancelKeySpec) {\n\t        this.convertToCancelAccList(this.cancelKeySpec);\n\t      }\n\t      var firstAccidentalType = this.accList.length > 0 ? this.accList[0].type : null;\n\t      if (this.alterKeySpec) {\n\t        this.convertToAlterAccList(this.alterKeySpec);\n\t      }\n\t\n\t      if (this.accList.length > 0) {\n\t        this.convertAccLines(this.stave.clef, firstAccidentalType);\n\t        for (var i = 0; i < this.accList.length; ++i) {\n\t          this.convertToGlyph(this.accList[i], this.accList[i + 1]);\n\t        }\n\t      }\n\t\n\t      this.formatted = true;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      if (!this.x) {\n\t        throw new _vex.Vex.RERR('KeySignatureError', \"Can't draw key signature without x.\");\n\t      }\n\t\n\t      if (!this.stave) {\n\t        throw new _vex.Vex.RERR('KeySignatureError', \"Can't draw key signature without stave.\");\n\t      }\n\t\n\t      if (!this.formatted) this.format();\n\t      this.setRendered();\n\t\n\t      for (var i = 0; i < this.glyphs.length; i++) {\n\t        var glyph = this.glyphs[i];\n\t        var x = this.x + this.xPositions[i];\n\t        glyph.setStave(this.stave);\n\t        glyph.setContext(this.stave.context);\n\t        glyph.renderToStave(x);\n\t      }\n\t    }\n\t  }]);\n\n\t  return KeySignature;\n\t}(_stavemodifier.StaveModifier);\n\n/***/ },\n/* 53 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.TimeSignature = undefined;\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _glyph3 = __webpack_require__(4);\n\t\n\tvar _stavemodifier = __webpack_require__(45);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// Implements time signatures glyphs for staffs\n\t// See tables.js for the internal time signatures\n\t// representation\n\t\n\tvar assertIsValidFraction = function assertIsValidFraction(timeSpec) {\n\t  var numbers = timeSpec.split('/').filter(function (number) {\n\t    return number !== '';\n\t  });\n\t\n\t  if (numbers.length !== 2) {\n\t    throw new _vex.Vex.RERR('BadTimeSignature', 'Invalid time spec: ' + timeSpec + '. Must be in the form \"<numerator>/<denominator>\"');\n\t  }\n\t\n\t  numbers.forEach(function (number) {\n\t    if (isNaN(Number(number))) {\n\t      throw new _vex.Vex.RERR('BadTimeSignature', 'Invalid time spec: ' + timeSpec + '. Must contain two valid numbers.');\n\t    }\n\t  });\n\t};\n\t\n\tvar TimeSignature = exports.TimeSignature = function (_StaveModifier) {\n\t  _inherits(TimeSignature, _StaveModifier);\n\t\n\t  _createClass(TimeSignature, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'timesignatures';\n\t    }\n\t  }, {\n\t    key: 'glyphs',\n\t    get: function get() {\n\t      return {\n\t        'C': {\n\t          code: 'v41',\n\t          point: 40,\n\t          line: 2\n\t        },\n\t        'C|': {\n\t          code: 'vb6',\n\t          point: 40,\n\t          line: 2\n\t        }\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function TimeSignature() {\n\t    var timeSpec = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\t    var customPadding = arguments.length <= 1 || arguments[1] === undefined ? 15 : arguments[1];\n\t\n\t    _classCallCheck(this, TimeSignature);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TimeSignature).call(this));\n\t\n\t    _this.setAttribute('type', 'TimeSignature');\n\t\n\t    if (timeSpec === null) return _possibleConstructorReturn(_this);\n\t\n\t    var padding = customPadding;\n\t\n\t    _this.point = 40;\n\t    _this.topLine = 2;\n\t    _this.bottomLine = 4;\n\t    _this.setPosition(_stavemodifier.StaveModifier.Position.BEGIN);\n\t    _this.setTimeSig(timeSpec);\n\t    _this.setWidth(_this.timeSig.glyph.getMetrics().width);\n\t    _this.setPadding(padding);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(TimeSignature, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return TimeSignature.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'parseTimeSpec',\n\t    value: function parseTimeSpec(timeSpec) {\n\t      if (timeSpec === 'C' || timeSpec === 'C|') {\n\t        var _TimeSignature$glyphs = TimeSignature.glyphs[timeSpec];\n\t        var line = _TimeSignature$glyphs.line;\n\t        var code = _TimeSignature$glyphs.code;\n\t        var point = _TimeSignature$glyphs.point;\n\t\n\t        return {\n\t          line: line,\n\t          num: false,\n\t          glyph: new _glyph3.Glyph(code, point)\n\t        };\n\t      }\n\t\n\t      assertIsValidFraction(timeSpec);\n\t\n\t      var _timeSpec$split$map = timeSpec.split('/').map(function (number) {\n\t        return number.split('');\n\t      });\n\t\n\t      var _timeSpec$split$map2 = _slicedToArray(_timeSpec$split$map, 2);\n\t\n\t      var topDigits = _timeSpec$split$map2[0];\n\t      var botDigits = _timeSpec$split$map2[1];\n\t\n\t\n\t      return {\n\t        num: true,\n\t        glyph: this.makeTimeSignatureGlyph(topDigits, botDigits)\n\t      };\n\t    }\n\t  }, {\n\t    key: 'makeTimeSignatureGlyph',\n\t    value: function makeTimeSignatureGlyph(topDigits, botDigits) {\n\t      var glyph = new _glyph3.Glyph('v0', this.point);\n\t      glyph.topGlyphs = [];\n\t      glyph.botGlyphs = [];\n\t\n\t      var topWidth = 0;\n\t      for (var i = 0; i < topDigits.length; ++i) {\n\t        var num = topDigits[i];\n\t        var topGlyph = new _glyph3.Glyph('v' + num, this.point);\n\t\n\t        glyph.topGlyphs.push(topGlyph);\n\t        topWidth += topGlyph.getMetrics().width;\n\t      }\n\t\n\t      var botWidth = 0;\n\t      for (var _i = 0; _i < botDigits.length; ++_i) {\n\t        var _num = botDigits[_i];\n\t        var botGlyph = new _glyph3.Glyph('v' + _num, this.point);\n\t\n\t        glyph.botGlyphs.push(botGlyph);\n\t        botWidth += botGlyph.getMetrics().width;\n\t      }\n\t\n\t      var width = topWidth > botWidth ? topWidth : botWidth;\n\t      var xMin = glyph.getMetrics().x_min;\n\t\n\t      glyph.getMetrics = function () {\n\t        return {\n\t          x_min: xMin,\n\t          x_max: xMin + width,\n\t          width: width\n\t        };\n\t      };\n\t\n\t      var topStartX = (width - topWidth) / 2.0;\n\t      var botStartX = (width - botWidth) / 2.0;\n\t\n\t      var that = this;\n\t      glyph.renderToStave = function renderToStave(x) {\n\t        var start_x = x + topStartX;\n\t        for (var _i2 = 0; _i2 < this.topGlyphs.length; ++_i2) {\n\t          var _glyph = this.topGlyphs[_i2];\n\t          _glyph3.Glyph.renderOutline(this.context, _glyph.metrics.outline, _glyph.scale, start_x + _glyph.x_shift, this.stave.getYForLine(that.topLine) + 1);\n\t          start_x += _glyph.getMetrics().width;\n\t        }\n\t\n\t        start_x = x + botStartX;\n\t        for (var _i3 = 0; _i3 < this.botGlyphs.length; ++_i3) {\n\t          var _glyph2 = this.botGlyphs[_i3];\n\t          that.placeGlyphOnLine(_glyph2, this.stave, _glyph2.line);\n\t          _glyph3.Glyph.renderOutline(this.context, _glyph2.metrics.outline, _glyph2.scale, start_x + _glyph2.x_shift, this.stave.getYForLine(that.bottomLine) + 1);\n\t          start_x += _glyph2.getMetrics().width;\n\t        }\n\t      };\n\t\n\t      return glyph;\n\t    }\n\t  }, {\n\t    key: 'getTimeSig',\n\t    value: function getTimeSig() {\n\t      return this.timeSig;\n\t    }\n\t  }, {\n\t    key: 'setTimeSig',\n\t    value: function setTimeSig(timeSpec) {\n\t      this.timeSig = this.parseTimeSpec(timeSpec);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      if (!this.x) {\n\t        throw new _vex.Vex.RERR('TimeSignatureError', \"Can't draw time signature without x.\");\n\t      }\n\t\n\t      if (!this.stave) {\n\t        throw new _vex.Vex.RERR('TimeSignatureError', \"Can't draw time signature without stave.\");\n\t      }\n\t\n\t      this.setRendered();\n\t      this.timeSig.glyph.setStave(this.stave);\n\t      this.timeSig.glyph.setContext(this.stave.context);\n\t      this.placeGlyphOnLine(this.timeSig.glyph, this.stave, this.timeSig.line);\n\t      this.timeSig.glyph.renderToStave(this.x);\n\t    }\n\t  }]);\n\n\t  return TimeSignature;\n\t}(_stavemodifier.StaveModifier);\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Volta = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _stavemodifier = __webpack_require__(45);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author Larry Kuhns 2011\n\t\n\tvar Volta = exports.Volta = function (_StaveModifier) {\n\t  _inherits(Volta, _StaveModifier);\n\t\n\t  _createClass(Volta, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'voltas';\n\t    }\n\t  }, {\n\t    key: 'type',\n\t    get: function get() {\n\t      return {\n\t        NONE: 1,\n\t        BEGIN: 2,\n\t        MID: 3,\n\t        END: 4,\n\t        BEGIN_END: 5\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function Volta(type, number, x, y_shift) {\n\t    _classCallCheck(this, Volta);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Volta).call(this));\n\t\n\t    _this.setAttribute('type', 'Volta');\n\t    _this.volta = type;\n\t    _this.x = x;\n\t    _this.y_shift = y_shift;\n\t    _this.number = number;\n\t    _this.font = {\n\t      family: 'sans-serif',\n\t      size: 9,\n\t      weight: 'bold'\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Volta, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Volta.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'setShiftY',\n\t    value: function setShiftY(y) {\n\t      this.y_shift = y;return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw(stave, x) {\n\t      var ctx = stave.checkContext();\n\t      this.setRendered();\n\t\n\t      var width = stave.width;\n\t      var top_y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n\t      var vert_height = 1.5 * stave.options.spacing_between_lines_px;\n\t      switch (this.volta) {\n\t        case Volta.type.BEGIN:\n\t          ctx.fillRect(this.x + x, top_y, 1, vert_height);\n\t          break;\n\t        case Volta.type.END:\n\t          width -= 5;\n\t          ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n\t          break;\n\t        case Volta.type.BEGIN_END:\n\t          width -= 3;\n\t          ctx.fillRect(this.x + x, top_y, 1, vert_height);\n\t          ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n\t          break;\n\t        default:\n\t          break;\n\t      }\n\t      // If the beginning of a volta, draw measure number\n\t      if (this.volta === Volta.type.BEGIN || this.volta === Volta.type.BEGIN_END) {\n\t        ctx.save();\n\t        ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\t        ctx.fillText(this.number, this.x + x + 5, top_y + 15);\n\t        ctx.restore();\n\t      }\n\t\n\t      ctx.fillRect(this.x + x, top_y, width, 1);\n\t      return this;\n\t    }\n\t  }]);\n\n\t  return Volta;\n\t}(_stavemodifier.StaveModifier);\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.TabStave = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _stave = __webpack_require__(43);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t\n\tvar TabStave = exports.TabStave = function (_Stave) {\n\t  _inherits(TabStave, _Stave);\n\t\n\t  function TabStave(x, y, width, options) {\n\t    _classCallCheck(this, TabStave);\n\t\n\t    var tab_options = {\n\t      spacing_between_lines_px: 13,\n\t      num_lines: 6,\n\t      top_text_position: 1\n\t    };\n\t\n\t    _vex.Vex.Merge(tab_options, options);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TabStave).call(this, x, y, width, tab_options));\n\t\n\t    _this.setAttribute('type', 'TabStave');\n\t    return _this;\n\t  }\n\t\n\t  _createClass(TabStave, [{\n\t    key: 'getYForGlyphs',\n\t    value: function getYForGlyphs() {\n\t      return this.getYForLine(2.5);\n\t    }\n\t\n\t    // Deprecated\n\t\n\t  }, {\n\t    key: 'addTabGlyph',\n\t    value: function addTabGlyph() {\n\t      this.addClef('tab');\n\t      return this;\n\t    }\n\t  }]);\n\n\t  return TabStave;\n\t}(_stave.Stave);\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.TabNote = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _stem = __webpack_require__(17);\n\t\n\tvar _stemmablenote = __webpack_require__(24);\n\t\n\tvar _dot = __webpack_require__(26);\n\t\n\tvar _glyph2 = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// The file implements notes for Tablature notation. This consists of one or\n\t// more fret positions, and can either be drawn with or without stems.\n\t//\n\t// See `tests/tabnote_tests.js` for usage examples\n\t\n\t// Gets the unused strings grouped together if consecutive.\n\t//\n\t// Parameters:\n\t// * num_lines - The number of lines\n\t// * strings_used - An array of numbers representing which strings have fret positions\n\tfunction getUnusedStringGroups(num_lines, strings_used) {\n\t  var stem_through = [];\n\t  var group = [];\n\t  for (var string = 1; string <= num_lines; string++) {\n\t    var is_used = strings_used.indexOf(string) > -1;\n\t\n\t    if (!is_used) {\n\t      group.push(string);\n\t    } else {\n\t      stem_through.push(group);\n\t      group = [];\n\t    }\n\t  }\n\t  if (group.length > 0) stem_through.push(group);\n\t\n\t  return stem_through;\n\t}\n\t\n\t// Gets groups of points that outline the partial stem lines\n\t// between fret positions\n\t//\n\t// Parameters:\n\t// * stem_Y - The `y` coordinate the stem is located on\n\t// * unused_strings - An array of groups of unused strings\n\t// * stave - The stave to use for reference\n\t// * stem_direction - The direction of the stem\n\tfunction getPartialStemLines(stem_y, unused_strings, stave, stem_direction) {\n\t  var up_stem = stem_direction !== 1;\n\t  var down_stem = stem_direction !== -1;\n\t\n\t  var line_spacing = stave.getSpacingBetweenLines();\n\t  var total_lines = stave.getNumLines();\n\t\n\t  var stem_lines = [];\n\t\n\t  unused_strings.forEach(function (strings) {\n\t    var containsLastString = strings.indexOf(total_lines) > -1;\n\t    var containsFirstString = strings.indexOf(1) > -1;\n\t\n\t    if (up_stem && containsFirstString || down_stem && containsLastString) {\n\t      return;\n\t    }\n\t\n\t    // If there's only one string in the group, push a duplicate value.\n\t    // We do this because we need 2 strings to convert into upper/lower y\n\t    // values.\n\t    if (strings.length === 1) {\n\t      strings.push(strings[0]);\n\t    }\n\t\n\t    var line_ys = [];\n\t    // Iterate through each group string and store it's y position\n\t    strings.forEach(function (string, index, strings) {\n\t      var isTopBound = string === 1;\n\t      var isBottomBound = string === total_lines;\n\t\n\t      // Get the y value for the appropriate staff line,\n\t      // we adjust for a 0 index array, since string numbers are index 1\n\t      var y = stave.getYForLine(string - 1);\n\t\n\t      // Unless the string is the first or last, add padding to each side\n\t      // of the line\n\t      if (index === 0 && !isTopBound) {\n\t        y -= line_spacing / 2 - 1;\n\t      } else if (index === strings.length - 1 && !isBottomBound) {\n\t        y += line_spacing / 2 - 1;\n\t      }\n\t\n\t      // Store the y value\n\t      line_ys.push(y);\n\t\n\t      // Store a subsequent y value connecting this group to the main\n\t      // stem above/below the stave if it's the top/bottom string\n\t      if (stem_direction === 1 && isTopBound) {\n\t        line_ys.push(stem_y - 2);\n\t      } else if (stem_direction === -1 && isBottomBound) {\n\t        line_ys.push(stem_y + 2);\n\t      }\n\t    });\n\t\n\t    // Add the sorted y values to the\n\t    stem_lines.push(line_ys.sort(function (a, b) {\n\t      return a - b;\n\t    }));\n\t  });\n\t\n\t  return stem_lines;\n\t}\n\t\n\tvar TabNote = exports.TabNote = function (_StemmableNote) {\n\t  _inherits(TabNote, _StemmableNote);\n\t\n\t  _createClass(TabNote, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'tabnotes';\n\t    }\n\t\n\t    // Initialize the TabNote with a `tab_struct` full of properties\n\t    // and whether to `draw_stem` when rendering the note\n\t\n\t  }]);\n\t\n\t  function TabNote(tab_struct, draw_stem) {\n\t    _classCallCheck(this, TabNote);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TabNote).call(this, tab_struct));\n\t\n\t    _this.setAttribute('type', 'TabNote');\n\t\n\t    _this.ghost = false; // Renders parenthesis around notes\n\t    // Note properties\n\t    //\n\t    // The fret positions in the note. An array of `{ str: X, fret: X }`\n\t    _this.positions = tab_struct.positions;\n\t\n\t    // Render Options\n\t    _vex.Vex.Merge(_this.render_options, {\n\t      // font size for note heads and rests\n\t      glyph_font_scale: _tables.Flow.DEFAULT_TABLATURE_FONT_SCALE,\n\t      // Flag to draw a stem\n\t      draw_stem: draw_stem,\n\t      // Flag to draw dot modifiers\n\t      draw_dots: draw_stem,\n\t      // Flag to extend the main stem through the stave and fret positions\n\t      draw_stem_through_stave: false,\n\t      // vertical shift from stave line\n\t      y_shift: 0,\n\t      // normal glyph scale\n\t      scale: 1.0,\n\t      // default tablature font\n\t      font: '10pt Arial'\n\t    });\n\t\n\t    _this.glyph = _tables.Flow.durationToGlyph(_this.duration, _this.noteType);\n\t\n\t    if (!_this.glyph) {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'Invalid note initialization data (No glyph found): ' + JSON.stringify(tab_struct));\n\t    }\n\t\n\t    _this.buildStem();\n\t\n\t    if (tab_struct.stem_direction) {\n\t      _this.setStemDirection(tab_struct.stem_direction);\n\t    } else {\n\t      _this.setStemDirection(_stem.Stem.UP);\n\t    }\n\t\n\t    // Renders parenthesis around notes\n\t    _this.ghost = false;\n\t    _this.updateWidth();\n\t    return _this;\n\t  }\n\t\n\t  // The ModifierContext category\n\t\n\t\n\t  _createClass(TabNote, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return TabNote.CATEGORY;\n\t    }\n\t\n\t    // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n\t    // Often used for indicating frets that are being bent to\n\t\n\t  }, {\n\t    key: 'setGhost',\n\t    value: function setGhost(ghost) {\n\t      this.ghost = ghost;\n\t      this.updateWidth();\n\t      return this;\n\t    }\n\t\n\t    // Determine if the note has a stem\n\t\n\t  }, {\n\t    key: 'hasStem',\n\t    value: function hasStem() {\n\t      return this.render_options.draw_stem;\n\t    }\n\t\n\t    // Get the default stem extension for the note\n\t\n\t  }, {\n\t    key: 'getStemExtension',\n\t    value: function getStemExtension() {\n\t      var glyph = this.getGlyph();\n\t\n\t      if (this.stem_extension_override != null) {\n\t        return this.stem_extension_override;\n\t      }\n\t\n\t      if (glyph) {\n\t        return this.getStemDirection() === 1 ? glyph.tabnote_stem_up_extension : glyph.tabnote_stem_down_extension;\n\t      }\n\t\n\t      return 0;\n\t    }\n\t\n\t    // Add a dot to the note\n\t\n\t  }, {\n\t    key: 'addDot',\n\t    value: function addDot() {\n\t      var dot = new _dot.Dot();\n\t      this.dots += 1;\n\t      return this.addModifier(dot, 0);\n\t    }\n\t\n\t    // Calculate and store the width of the note\n\t\n\t  }, {\n\t    key: 'updateWidth',\n\t    value: function updateWidth() {\n\t      var _this2 = this;\n\t\n\t      this.glyphs = [];\n\t      this.width = 0;\n\t      for (var i = 0; i < this.positions.length; ++i) {\n\t        var fret = this.positions[i].fret;\n\t        if (this.ghost) fret = '(' + fret + ')';\n\t        var glyph = _tables.Flow.tabToGlyph(fret, this.render_options.scale);\n\t        this.glyphs.push(glyph);\n\t        this.width = Math.max(glyph.getWidth(), this.width);\n\t      }\n\t      // For some reason we associate a notehead glyph with a TabNote, and this\n\t      // glyph is used for certain width calculations. Of course, this is totally\n\t      // incorrect since a notehead is a poor approximation for the dimensions of\n\t      // a fret number which can have multiple digits. As a result, we must\n\t      // overwrite getWidth() to return the correct width\n\t      this.glyph.getWidth = function () {\n\t        return _this2.width;\n\t      };\n\t    }\n\t\n\t    // Set the `stave` to the note\n\t\n\t  }, {\n\t    key: 'setStave',\n\t    value: function setStave(stave) {\n\t      var _this3 = this;\n\t\n\t      _get(Object.getPrototypeOf(TabNote.prototype), 'setStave', this).call(this, stave);\n\t      this.context = stave.context;\n\t\n\t      // Calculate the fret number width based on font used\n\t      var i = void 0;\n\t      if (this.context) {\n\t        var ctx = this.context;\n\t        this.width = 0;\n\t\n\t        var _loop = function _loop() {\n\t          var glyph = _this3.glyphs[i];\n\t          var text = '' + glyph.text;\n\t          if (text.toUpperCase() !== 'X') {\n\t            ctx.save();\n\t            ctx.setRawFont(_this3.render_options.font);\n\t            glyph.width = ctx.measureText(text).width;\n\t            ctx.restore();\n\t            glyph.getWidth = function () {\n\t              return glyph.width;\n\t            };\n\t          }\n\t          _this3.width = Math.max(glyph.getWidth(), _this3.width);\n\t        };\n\t\n\t        for (i = 0; i < this.glyphs.length; ++i) {\n\t          _loop();\n\t        }\n\t        this.glyph.getWidth = function () {\n\t          return _this3.width;\n\t        };\n\t      }\n\t\n\t      // we subtract 1 from `line` because getYForLine expects a 0-based index,\n\t      // while the position.str is a 1-based index\n\t      var ys = this.positions.map(function (_ref) {\n\t        var line = _ref.str;\n\t        return stave.getYForLine(line - 1);\n\t      });\n\t\n\t      this.setYs(ys);\n\t\n\t      if (this.stem) {\n\t        this.stem.setYBounds(this.getStemY(), this.getStemY());\n\t      }\n\t\n\t      return this;\n\t    }\n\t\n\t    // Get the fret positions for the note\n\t\n\t  }, {\n\t    key: 'getPositions',\n\t    value: function getPositions() {\n\t      return this.positions;\n\t    }\n\t\n\t    // Add self to the provided modifier context `mc`\n\t\n\t  }, {\n\t    key: 'addToModifierContext',\n\t    value: function addToModifierContext(mc) {\n\t      this.setModifierContext(mc);\n\t      for (var i = 0; i < this.modifiers.length; ++i) {\n\t        this.modifierContext.addModifier(this.modifiers[i]);\n\t      }\n\t      this.modifierContext.addModifier(this);\n\t      this.preFormatted = false;\n\t      return this;\n\t    }\n\t\n\t    // Get the `x` coordinate to the right of the note\n\t\n\t  }, {\n\t    key: 'getTieRightX',\n\t    value: function getTieRightX() {\n\t      var tieStartX = this.getAbsoluteX();\n\t      var note_glyph_width = this.glyph.getWidth();\n\t      tieStartX += note_glyph_width / 2;\n\t      tieStartX += -this.width / 2 + this.width + 2;\n\t\n\t      return tieStartX;\n\t    }\n\t\n\t    // Get the `x` coordinate to the left of the note\n\t\n\t  }, {\n\t    key: 'getTieLeftX',\n\t    value: function getTieLeftX() {\n\t      var tieEndX = this.getAbsoluteX();\n\t      var note_glyph_width = this.glyph.getWidth();\n\t      tieEndX += note_glyph_width / 2;\n\t      tieEndX -= this.width / 2 + 2;\n\t\n\t      return tieEndX;\n\t    }\n\t\n\t    // Get the default `x` and `y` coordinates for a modifier at a specific\n\t    // `position` at a fret position `index`\n\t\n\t  }, {\n\t    key: 'getModifierStartXY',\n\t    value: function getModifierStartXY(position, index) {\n\t      if (!this.preFormatted) {\n\t        throw new _vex.Vex.RERR('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n\t      }\n\t\n\t      if (this.ys.length === 0) {\n\t        throw new _vex.Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');\n\t      }\n\t\n\t      var x = 0;\n\t      if (position === _modifier.Modifier.Position.LEFT) {\n\t        x = -1 * 2; // extra_left_px\n\t      } else if (position === _modifier.Modifier.Position.RIGHT) {\n\t        x = this.width + 2; // extra_right_px\n\t      } else if (position === _modifier.Modifier.Position.BELOW || position === _modifier.Modifier.Position.ABOVE) {\n\t        var note_glyph_width = this.glyph.getWidth();\n\t        x = note_glyph_width / 2;\n\t      }\n\t\n\t      return {\n\t        x: this.getAbsoluteX() + x,\n\t        y: this.ys[index]\n\t      };\n\t    }\n\t\n\t    // Get the default line for rest\n\t\n\t  }, {\n\t    key: 'getLineForRest',\n\t    value: function getLineForRest() {\n\t      return this.positions[0].str;\n\t    }\n\t\n\t    // Pre-render formatting\n\t\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      if (this.preFormatted) return;\n\t      if (this.modifierContext) this.modifierContext.preFormat();\n\t      // width is already set during init()\n\t      this.setPreFormatted(true);\n\t    }\n\t\n\t    // Get the x position for the stem\n\t\n\t  }, {\n\t    key: 'getStemX',\n\t    value: function getStemX() {\n\t      return this.getCenterGlyphX();\n\t    }\n\t\n\t    // Get the y position for the stem\n\t\n\t  }, {\n\t    key: 'getStemY',\n\t    value: function getStemY() {\n\t      var num_lines = this.stave.getNumLines();\n\t\n\t      // The decimal staff line amounts provide optimal spacing between the\n\t      // fret number and the stem\n\t      var stemUpLine = -0.5;\n\t      var stemDownLine = num_lines - 0.5;\n\t      var stemStartLine = _stem.Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\n\t\n\t      return this.stave.getYForLine(stemStartLine);\n\t    }\n\t\n\t    // Get the stem extents for the tabnote\n\t\n\t  }, {\n\t    key: 'getStemExtents',\n\t    value: function getStemExtents() {\n\t      return this.stem.getExtents();\n\t    }\n\t\n\t    // Draw the fal onto the context\n\t\n\t  }, {\n\t    key: 'drawFlag',\n\t    value: function drawFlag() {\n\t      var beam = this.beam;\n\t      var glyph = this.glyph;\n\t      var context = this.context;\n\t      var stem = this.stem;\n\t      var stem_direction = this.stem_direction;\n\t      var _render_options = this.render_options;\n\t      var draw_stem = _render_options.draw_stem;\n\t      var glyph_font_scale = _render_options.glyph_font_scale;\n\t\n\t\n\t      var shouldDrawFlag = beam == null && draw_stem;\n\t\n\t      // Now it's the flag's turn.\n\t      if (glyph.flag && shouldDrawFlag) {\n\t        var flag_x = this.getStemX() + 1;\n\t        var flag_y = this.getStemY() - stem.getHeight();\n\t\n\t        var flag_code = stem_direction === _stem.Stem.DOWN ? glyph.code_flag_downstem // Down stems have flags on the left.\n\t        : glyph.code_flag_upstem;\n\t\n\t        // Draw the Flag\n\t        _glyph2.Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code);\n\t      }\n\t    }\n\t\n\t    // Render the modifiers onto the context\n\t\n\t  }, {\n\t    key: 'drawModifiers',\n\t    value: function drawModifiers() {\n\t      var _this4 = this;\n\t\n\t      // Draw the modifiers\n\t      this.modifiers.forEach(function (modifier) {\n\t        // Only draw the dots if enabled\n\t        if (modifier.getCategory() === 'dots' && !_this4.render_options.draw_dots) return;\n\t\n\t        modifier.setContext(_this4.context);\n\t        modifier.draw();\n\t      });\n\t    }\n\t\n\t    // Render the stem extension through the fret positions\n\t\n\t  }, {\n\t    key: 'drawStemThrough',\n\t    value: function drawStemThrough() {\n\t      var stem_x = this.getStemX();\n\t      var stem_y = this.getStemY();\n\t      var ctx = this.context;\n\t\n\t      var stem_through = this.render_options.draw_stem_through_stave;\n\t      var draw_stem = this.render_options.draw_stem;\n\t      if (draw_stem && stem_through) {\n\t        var total_lines = this.stave.getNumLines();\n\t        var strings_used = this.positions.map(function (position) {\n\t          return position.str;\n\t        });\n\t\n\t        var unused_strings = getUnusedStringGroups(total_lines, strings_used);\n\t        var stem_lines = getPartialStemLines(stem_y, unused_strings, this.getStave(), this.getStemDirection());\n\t\n\t        ctx.save();\n\t        ctx.setLineWidth(_stem.Stem.WIDTH);\n\t        stem_lines.forEach(function (bounds) {\n\t          if (bounds.length === 0) return;\n\t\n\t          ctx.beginPath();\n\t          ctx.moveTo(stem_x, bounds[0]);\n\t          ctx.lineTo(stem_x, bounds[bounds.length - 1]);\n\t          ctx.stroke();\n\t          ctx.closePath();\n\t        });\n\t        ctx.restore();\n\t      }\n\t    }\n\t\n\t    // Render the fret positions onto the context\n\t\n\t  }, {\n\t    key: 'drawPositions',\n\t    value: function drawPositions() {\n\t      var ctx = this.context;\n\t      var x = this.getAbsoluteX();\n\t      var ys = this.ys;\n\t      for (var i = 0; i < this.positions.length; ++i) {\n\t        var y = ys[i] + this.render_options.y_shift;\n\t        var _glyph = this.glyphs[i];\n\t\n\t        // Center the fret text beneath the notation note head\n\t        var note_glyph_width = this.glyph.getWidth();\n\t        var tab_x = x + note_glyph_width / 2 - _glyph.getWidth() / 2;\n\t\n\t        // FIXME: Magic numbers.\n\t        ctx.clearRect(tab_x - 2, y - 3, _glyph.getWidth() + 4, 6);\n\t\n\t        if (_glyph.code) {\n\t          _glyph2.Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, _glyph.code);\n\t        } else {\n\t          ctx.save();\n\t          ctx.setRawFont(this.render_options.font);\n\t          var _text = _glyph.text.toString();\n\t          ctx.fillText(_text, tab_x, y + 5 * this.render_options.scale);\n\t          ctx.restore();\n\t        }\n\t      }\n\t    }\n\t\n\t    // The main rendering function for the entire note\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t\n\t      if (!this.stave) {\n\t        throw new _vex.Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\t      }\n\t\n\t      if (this.ys.length === 0) {\n\t        throw new _vex.Vex.RERR('NoYValues', \"Can't draw note without Y values.\");\n\t      }\n\t\n\t      this.setRendered();\n\t      var render_stem = this.beam == null && this.render_options.draw_stem;\n\t\n\t      this.drawPositions();\n\t      this.drawStemThrough();\n\t\n\t      var stem_x = this.getStemX();\n\t\n\t      this.stem.setNoteHeadXBounds(stem_x, stem_x);\n\t\n\t      if (render_stem) {\n\t        this.context.openGroup('stem', null, { pointerBBox: true });\n\t        this.stem.setContext(this.context).draw();\n\t        this.context.closeGroup();\n\t      }\n\t\n\t      this.drawFlag();\n\t      this.drawModifiers();\n\t    }\n\t  }]);\n\n\t  return TabNote;\n\t}(_stemmablenote.StemmableNote);\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.VibratoBracket = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _vibrato = __webpack_require__(42);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author: Balazs Forian-Szabo\n\t//\n\t// ## Description\n\t//\n\t// This file implements `VibratoBrackets`\n\t// that renders vibrato effect between two notes.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (VibratoBracket.DEBUG) _vex.Vex.L('Vex.Flow.VibratoBracket', args);\n\t}\n\t\n\tvar VibratoBracket = exports.VibratoBracket = function (_Element) {\n\t  _inherits(VibratoBracket, _Element);\n\t\n\t  // bracket_data = {\n\t  //   start: Vex.Flow.Note (optional)\n\t  //   stop: Vex.Flow.Note (optional)\n\t  // };\n\t  // Either the stop or start note must be set, or both of them.\n\t  // A null value for the start or stop note indicates that the vibrato\n\t  // is drawn from the beginning or until the end of the stave accordingly.\n\t  function VibratoBracket(bracket_data) {\n\t    _classCallCheck(this, VibratoBracket);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(VibratoBracket).call(this));\n\t\n\t    _this.setAttribute('type', 'VibratoBracket');\n\t\n\t    _this.start = bracket_data.start;\n\t    _this.stop = bracket_data.stop;\n\t\n\t    _this.line = 1;\n\t\n\t    _this.render_options = {\n\t      harsh: false,\n\t      wave_height: 6,\n\t      wave_width: 4,\n\t      wave_girth: 2\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  // Set line position of the vibrato bracket\n\t\n\t\n\t  _createClass(VibratoBracket, [{\n\t    key: 'setLine',\n\t    value: function setLine(line) {\n\t      this.line = line;return this;\n\t    }\n\t  }, {\n\t    key: 'setHarsh',\n\t    value: function setHarsh(harsh) {\n\t      this.render_options.harsh = harsh;return this;\n\t    }\n\t\n\t    // Draw the vibrato bracket on the rendering context\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var ctx = this.context;\n\t      this.setRendered();\n\t\n\t      var y = this.start ? this.start.getStave().getYForTopText(this.line) : this.stop.getStave().getYForTopText(this.line);\n\t\n\t      // If start note is not set then vibrato will be drawn\n\t      // from the beginning of the stave\n\t      var start_x = this.start ? this.start.getAbsoluteX() : this.stop.getStave().getTieStartX();\n\t\n\t      // If stop note is not set then vibrato will be drawn\n\t      // until the end of the stave\n\t      var stop_x = this.stop ? this.stop.getAbsoluteX() - this.stop.getWidth() - 5 : this.start.getStave().getTieEndX() - 10;\n\t\n\t      this.render_options.vibrato_width = stop_x - start_x;\n\t\n\t      L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);\n\t\n\t      _vibrato.Vibrato.renderVibrato(ctx, start_x, y, this.render_options);\n\t    }\n\t  }]);\n\n\t  return VibratoBracket;\n\t}(_element.Element);\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ClefNote = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _boundingbox = __webpack_require__(8);\n\t\n\tvar _note = __webpack_require__(22);\n\t\n\tvar _clef = __webpack_require__(51);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Copyright Mohit Muthanna 2010\n\t//\n\t// Author Taehoon Moon 2014\n\t\n\t/** @constructor */\n\tvar ClefNote = exports.ClefNote = function (_Note) {\n\t  _inherits(ClefNote, _Note);\n\t\n\t  _createClass(ClefNote, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'clefnote';\n\t    }\n\t  }]);\n\t\n\t  function ClefNote(type, size, annotation) {\n\t    _classCallCheck(this, ClefNote);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ClefNote).call(this, { duration: 'b' }));\n\t\n\t    _this.setAttribute('type', 'ClefNote');\n\t\n\t    _this.setType(type, size, annotation);\n\t\n\t    // Note properties\n\t    _this.ignore_ticks = true;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ClefNote, [{\n\t    key: 'setType',\n\t    value: function setType(type, size, annotation) {\n\t      this.type = type;\n\t      this.clef_obj = new _clef.Clef(type, size, annotation);\n\t      this.clef = this.clef_obj.clef;\n\t      this.glyph = new _glyph.Glyph(this.clef.code, this.clef.point);\n\t      this.setWidth(this.glyph.getMetrics().width);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getClef',\n\t    value: function getClef() {\n\t      return this.clef;\n\t    }\n\t  }, {\n\t    key: 'setContext',\n\t    value: function setContext(context) {\n\t      this.context = context;\n\t      this.glyph.setContext(this.context);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getBoundingBox',\n\t    value: function getBoundingBox() {\n\t      return new _boundingbox.BoundingBox(0, 0, 0, 0);\n\t    }\n\t  }, {\n\t    key: 'addToModifierContext',\n\t    value: function addToModifierContext() {\n\t      /* overridden to ignore */\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return ClefNote.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      this.setPreFormatted(true);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      if (!this.stave) throw new _vex.Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\t\n\t      if (!this.glyph.getContext()) {\n\t        this.glyph.setContext(this.context);\n\t      }\n\t\n\t      this.setRendered();\n\t      var abs_x = this.getAbsoluteX();\n\t\n\t      this.glyph.setStave(this.stave);\n\t      this.glyph.setYShift(this.stave.getYForLine(this.clef.line) - this.stave.getYForGlyphs());\n\t      this.glyph.renderToStave(abs_x);\n\t\n\t      // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n\t      if (this.clef_obj.annotation !== undefined) {\n\t        var attachment = new _glyph.Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n\t        if (!attachment.getContext()) {\n\t          attachment.setContext(this.context);\n\t        }\n\t        attachment.setStave(this.stave);\n\t        attachment.setYShift(this.stave.getYForLine(this.clef_obj.annotation.line) - this.stave.getYForGlyphs());\n\t        attachment.setXShift(this.clef_obj.annotation.x_shift);\n\t        attachment.renderToStave(abs_x);\n\t      }\n\t    }\n\t  }]);\n\n\t  return ClefNote;\n\t}(_note.Note);\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.TimeSigNote = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _boundingbox = __webpack_require__(8);\n\t\n\tvar _note = __webpack_require__(22);\n\t\n\tvar _timesignature = __webpack_require__(53);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author Taehoon Moon 2014\n\t\n\tvar TimeSigNote = exports.TimeSigNote = function (_Note) {\n\t  _inherits(TimeSigNote, _Note);\n\t\n\t  function TimeSigNote(timeSpec, customPadding) {\n\t    _classCallCheck(this, TimeSigNote);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TimeSigNote).call(this, { duration: 'b' }));\n\t\n\t    _this.setAttribute('type', 'TimeSigNote');\n\t\n\t    var timeSignature = new _timesignature.TimeSignature(timeSpec, customPadding);\n\t    _this.timeSig = timeSignature.getTimeSig();\n\t    _this.setWidth(_this.timeSig.glyph.getMetrics().width);\n\t\n\t    // Note properties\n\t    _this.ignore_ticks = true;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(TimeSigNote, [{\n\t    key: 'getBoundingBox',\n\t    value: function getBoundingBox() {\n\t      return new _boundingbox.BoundingBox(0, 0, 0, 0);\n\t    }\n\t  }, {\n\t    key: 'addToModifierContext',\n\t    value: function addToModifierContext() {\n\t      /* overridden to ignore */\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      this.setPreFormatted(true);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.stave.checkContext();\n\t      this.setRendered();\n\t\n\t      if (!this.timeSig.glyph.getContext()) {\n\t        this.timeSig.glyph.setContext(this.context);\n\t      }\n\t\n\t      this.timeSig.glyph.setStave(this.stave);\n\t      this.timeSig.glyph.setYShift(this.stave.getYForLine(this.timeSig.line) - this.stave.getYForGlyphs());\n\t      this.timeSig.glyph.renderToStave(this.getAbsoluteX());\n\t    }\n\t  }]);\n\n\t  return TimeSigNote;\n\t}(_note.Note);\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.TabSlide = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tabtie = __webpack_require__(34);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// This class implements varies types of ties between contiguous notes. The\n\t// ties include: regular ties, hammer ons, pull offs, and slides.\n\t\n\tvar TabSlide = exports.TabSlide = function (_TabTie) {\n\t  _inherits(TabSlide, _TabTie);\n\t\n\t  _createClass(TabSlide, null, [{\n\t    key: 'createSlideUp',\n\t    value: function createSlideUp(notes) {\n\t      return new TabSlide(notes, TabSlide.SLIDE_UP);\n\t    }\n\t  }, {\n\t    key: 'createSlideDown',\n\t    value: function createSlideDown(notes) {\n\t      return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n\t    }\n\t  }, {\n\t    key: 'SLIDE_UP',\n\t    get: function get() {\n\t      return 1;\n\t    }\n\t  }, {\n\t    key: 'SLIDE_DOWN',\n\t    get: function get() {\n\t      return -1;\n\t    }\n\t  }]);\n\t\n\t  function TabSlide(notes, direction) {\n\t    _classCallCheck(this, TabSlide);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TabSlide).call(this, notes, 'sl.'));\n\t    /**\n\t     * Notes is a struct that has:\n\t     *\n\t     *  {\n\t     *    first_note: Note,\n\t     *    last_note: Note,\n\t     *    first_indices: [n1, n2, n3],\n\t     *    last_indices: [n1, n2, n3]\n\t     *  }\n\t     *\n\t     **/\n\t\n\t\n\t    _this.setAttribute('type', 'TabSlide');\n\t\n\t    if (!direction) {\n\t      var first_fret = notes.first_note.getPositions()[0].fret;\n\t      var last_fret = notes.last_note.getPositions()[0].fret;\n\t\n\t      direction = parseInt(first_fret, 10) > parseInt(last_fret, 10) ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n\t    }\n\t\n\t    _this.slide_direction = direction;\n\t    _this.render_options.cp1 = 11;\n\t    _this.render_options.cp2 = 14;\n\t    _this.render_options.y_shift = 0.5;\n\t\n\t    _this.setFont({ font: 'Times', size: 10, style: 'bold italic' });\n\t    _this.setNotes(notes);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(TabSlide, [{\n\t    key: 'renderTie',\n\t    value: function renderTie(params) {\n\t      if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'No Y-values to render');\n\t      }\n\t\n\t      var ctx = this.context;\n\t      var first_x_px = params.first_x_px;\n\t      var first_ys = params.first_ys;\n\t      var last_x_px = params.last_x_px;\n\t\n\t      var direction = this.slide_direction;\n\t      if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n\t        throw new _vex.Vex.RERR('BadSlide', 'Invalid slide direction');\n\t      }\n\t\n\t      for (var i = 0; i < this.first_indices.length; ++i) {\n\t        var slide_y = first_ys[this.first_indices[i]] + this.render_options.y_shift;\n\t\n\t        if (isNaN(slide_y)) {\n\t          throw new _vex.Vex.RERR('BadArguments', 'Bad indices for slide rendering.');\n\t        }\n\t\n\t        ctx.beginPath();\n\t        ctx.moveTo(first_x_px, slide_y + 3 * direction);\n\t        ctx.lineTo(last_x_px, slide_y - 3 * direction);\n\t        ctx.closePath();\n\t        ctx.stroke();\n\t      }\n\t\n\t      this.setRendered();\n\t    }\n\t  }]);\n\n\t  return TabSlide;\n\t}(_tabtie.TabTie);\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.GraceNote = undefined;\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _stavenote = __webpack_require__(20);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t\n\tvar GraceNote = exports.GraceNote = function (_StaveNote) {\n\t  _inherits(GraceNote, _StaveNote);\n\t\n\t  _createClass(GraceNote, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'gracenotes';\n\t    }\n\t  }, {\n\t    key: 'LEDGER_LINE_OFFSET',\n\t    get: function get() {\n\t      return 2;\n\t    }\n\t  }, {\n\t    key: 'SCALE',\n\t    get: function get() {\n\t      return 0.66;\n\t    }\n\t  }]);\n\t\n\t  function GraceNote(note_struct) {\n\t    _classCallCheck(this, GraceNote);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GraceNote).call(this, _extends(note_struct, {\n\t      glyph_font_scale: _tables.Flow.DEFAULT_NOTATION_FONT_SCALE * GraceNote.SCALE,\n\t      stroke_px: GraceNote.LEDGER_LINE_OFFSET\n\t    })));\n\t\n\t    _this.setAttribute('type', 'GraceNote');\n\t\n\t    _this.slash = note_struct.slash;\n\t    _this.slur = true;\n\t\n\t    _this.buildNoteHeads();\n\t\n\t    _this.width = 3;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(GraceNote, [{\n\t    key: 'getStemExtension',\n\t    value: function getStemExtension() {\n\t      var glyph = this.getGlyph();\n\t\n\t      if (this.stem_extension_override != null) {\n\t        return this.stem_extension_override;\n\t      }\n\t\n\t      if (glyph) {\n\t        return this.getStemDirection() === 1 ? glyph.gracenote_stem_up_extension : glyph.gracenote_stem_down_extension;\n\t      }\n\t\n\t      return 0;\n\t    }\n\t  }, {\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return GraceNote.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      _get(Object.getPrototypeOf(GraceNote.prototype), 'draw', this).call(this);\n\t      this.setRendered();\n\t      var ctx = this.context;\n\t      var stem_direction = this.getStemDirection();\n\t\n\t      if (this.slash) {\n\t        ctx.beginPath();\n\t\n\t        var x = this.getAbsoluteX();\n\t        var y = this.getYs()[0] - this.stem.getHeight() / 2.8;\n\t        if (stem_direction === 1) {\n\t          x += 1;\n\t          ctx.moveTo(x, y);\n\t          ctx.lineTo(x + 13, y - 9);\n\t        } else if (stem_direction === -1) {\n\t          x -= 4;\n\t          y += 1;\n\t          ctx.moveTo(x, y);\n\t          ctx.lineTo(x + 13, y + 9);\n\t        }\n\t\n\t        ctx.closePath();\n\t        ctx.stroke();\n\t      }\n\t    }\n\t  }]);\n\n\t  return GraceNote;\n\t}(_stavenote.StaveNote);\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.GraceTabNote = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tabnote = __webpack_require__(56);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// @author Balazs Forian-Szabo\n\t//\n\t// ## Description\n\t//\n\t// A basic implementation of grace notes\n\t// to be rendered on a tab stave.\n\t//\n\t// See `tests/gracetabnote_tests.js` for usage examples.\n\t\n\tvar GraceTabNote = exports.GraceTabNote = function (_TabNote) {\n\t  _inherits(GraceTabNote, _TabNote);\n\t\n\t  _createClass(GraceTabNote, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'gracetabnotes';\n\t    }\n\t  }]);\n\t\n\t  function GraceTabNote(note_struct) {\n\t    _classCallCheck(this, GraceTabNote);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GraceTabNote).call(this, note_struct, false));\n\t\n\t    _this.setAttribute('type', 'GraceTabNote');\n\t\n\t    _vex.Vex.Merge(_this.render_options, {\n\t      // vertical shift from stave line\n\t      y_shift: 0.3,\n\t      // grace glyph scale\n\t      scale: 0.6,\n\t      // grace tablature font\n\t      font: '7.5pt Arial'\n\t    });\n\t\n\t    _this.updateWidth();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(GraceTabNote, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return GraceTabNote.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      _get(Object.getPrototypeOf(GraceTabNote.prototype), 'draw', this).call(this);\n\t      this.setRendered();\n\t    }\n\t  }]);\n\n\t  return GraceTabNote;\n\t}(_tabnote.TabNote);\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Tuning = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// This class implements varies types of tunings for tablature.\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Tuning = exports.Tuning = function () {\n\t  _createClass(Tuning, null, [{\n\t    key: 'names',\n\t    get: function get() {\n\t      return {\n\t        'standard': 'E/5,B/4,G/4,D/4,A/3,E/3',\n\t        'dagdad': 'D/5,A/4,G/4,D/4,A/3,D/3',\n\t        'dropd': 'E/5,B/4,G/4,D/4,A/3,D/3',\n\t        'eb': 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n\t        'standardBanjo': 'D/5,B/4,G/4,D/4,G/5'\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function Tuning() {\n\t    var tuningString = arguments.length <= 0 || arguments[0] === undefined ? 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2' : arguments[0];\n\t\n\t    _classCallCheck(this, Tuning);\n\t\n\t    // Default to standard tuning.\n\t    this.setTuning(tuningString);\n\t  }\n\t\n\t  _createClass(Tuning, [{\n\t    key: 'noteToInteger',\n\t    value: function noteToInteger(noteString) {\n\t      return _tables.Flow.keyProperties(noteString).int_value;\n\t    }\n\t  }, {\n\t    key: 'setTuning',\n\t    value: function setTuning(noteString) {\n\t      if (Tuning.names[noteString]) {\n\t        noteString = Tuning.names[noteString];\n\t      }\n\t\n\t      this.tuningString = noteString;\n\t      this.tuningValues = [];\n\t      this.numStrings = 0;\n\t\n\t      var keys = noteString.split(/\\s*,\\s*/);\n\t      if (keys.length === 0) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Invalid tuning string: ' + noteString);\n\t      }\n\t\n\t      this.numStrings = keys.length;\n\t      for (var i = 0; i < this.numStrings; ++i) {\n\t        this.tuningValues[i] = this.noteToInteger(keys[i]);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getValueForString',\n\t    value: function getValueForString(stringNum) {\n\t      var s = parseInt(stringNum, 10);\n\t      if (s < 1 || s > this.numStrings) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'String number must be between 1 and ' + this.numStrings + ':' + stringNum);\n\t      }\n\t\n\t      return this.tuningValues[s - 1];\n\t    }\n\t  }, {\n\t    key: 'getValueForFret',\n\t    value: function getValueForFret(fretNum, stringNum) {\n\t      var stringValue = this.getValueForString(stringNum);\n\t      var f = parseInt(fretNum, 10);\n\t\n\t      if (f < 0) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Fret number must be 0 or higher: ' + fretNum);\n\t      }\n\t\n\t      return stringValue + f;\n\t    }\n\t  }, {\n\t    key: 'getNoteForFret',\n\t    value: function getNoteForFret(fretNum, stringNum) {\n\t      var noteValue = this.getValueForFret(fretNum, stringNum);\n\t\n\t      var octave = Math.floor(noteValue / 12);\n\t      var value = noteValue % 12;\n\t\n\t      return _tables.Flow.integerToNote(value) + '/' + octave;\n\t    }\n\t  }]);\n\n\t  return Tuning;\n\t}();\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.KeyManager = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This class implements diatonic key management.\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _music = __webpack_require__(30);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar KeyManager = exports.KeyManager = function () {\n\t  function KeyManager(key) {\n\t    _classCallCheck(this, KeyManager);\n\t\n\t    this.music = new _music.Music();\n\t    this.setKey(key);\n\t  }\n\t\n\t  _createClass(KeyManager, [{\n\t    key: 'setKey',\n\t    value: function setKey(key) {\n\t      this.key = key;\n\t      this.reset();\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getKey',\n\t    value: function getKey() {\n\t      return this.key;\n\t    }\n\t  }, {\n\t    key: 'reset',\n\t    value: function reset() {\n\t      this.keyParts = this.music.getKeyParts(this.key);\n\t\n\t      this.keyString = this.keyParts.root;\n\t      if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;\n\t\n\t      var is_supported_type = _music.Music.scaleTypes[this.keyParts.type];\n\t      if (!is_supported_type) {\n\t        throw new _vex.Vex.RERR('BadArguments', 'Unsupported key type: ' + this.key);\n\t      }\n\t\n\t      this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), _music.Music.scaleTypes[this.keyParts.type]);\n\t\n\t      this.scaleMap = {};\n\t      this.scaleMapByValue = {};\n\t      this.originalScaleMapByValue = {};\n\t\n\t      var noteLocation = _music.Music.root_indices[this.keyParts.root];\n\t\n\t      for (var i = 0; i < _music.Music.roots.length; ++i) {\n\t        var index = (noteLocation + i) % _music.Music.roots.length;\n\t        var rootName = _music.Music.roots[index];\n\t\n\t        var noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n\t        this.scaleMap[rootName] = noteName;\n\t        this.scaleMapByValue[this.scale[i]] = noteName;\n\t        this.originalScaleMapByValue[this.scale[i]] = noteName;\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getAccidental',\n\t    value: function getAccidental(key) {\n\t      var root = this.music.getKeyParts(key).root;\n\t      var parts = this.music.getNoteParts(this.scaleMap[root]);\n\t\n\t      return {\n\t        note: this.scaleMap[root],\n\t        accidental: parts.accidental\n\t      };\n\t    }\n\t  }, {\n\t    key: 'selectNote',\n\t    value: function selectNote(note) {\n\t      note = note.toLowerCase();\n\t      var parts = this.music.getNoteParts(note);\n\t\n\t      // First look for matching note in our altered scale\n\t      var scaleNote = this.scaleMap[parts.root];\n\t      var modparts = this.music.getNoteParts(scaleNote);\n\t\n\t      if (scaleNote === note) {\n\t        return {\n\t          'note': scaleNote,\n\t          'accidental': parts.accidental,\n\t          'change': false\n\t        };\n\t      }\n\t\n\t      // Then search for a note of equivalent value in our altered scale\n\t      var valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n\t      if (valueNote != null) {\n\t        return {\n\t          'note': valueNote,\n\t          'accidental': this.music.getNoteParts(valueNote).accidental,\n\t          'change': false\n\t        };\n\t      }\n\t\n\t      // Then search for a note of equivalent value in the original scale\n\t      var originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n\t      if (originalValueNote != null) {\n\t        this.scaleMap[modparts.root] = originalValueNote;\n\t        delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n\t        this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n\t        return {\n\t          'note': originalValueNote,\n\t          'accidental': this.music.getNoteParts(originalValueNote).accidental,\n\t          'change': true\n\t        };\n\t      }\n\t\n\t      // Then try to unmodify a currently modified note.\n\t      if (modparts.root === note) {\n\t        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n\t        this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n\t        this.scaleMap[modparts.root] = modparts.root;\n\t        return {\n\t          'note': modparts.root,\n\t          'accidental': null,\n\t          'change': true\n\t        };\n\t      }\n\t\n\t      // Last resort -- shitshoot\n\t      delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n\t      this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n\t\n\t      delete this.scaleMap[modparts.root];\n\t      this.scaleMap[modparts.root] = note;\n\t\n\t      return {\n\t        note: note,\n\t        'accidental': parts.accidental,\n\t        'change': true\n\t      };\n\t    }\n\t  }]);\n\n\t  return KeyManager;\n\t}();\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.StaveHairpin = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// This class by Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n\t//\n\t// This class implements hairpins between notes.\n\t// Hairpins can be either Crescendo or Descrescendo.\n\t\n\tvar StaveHairpin = exports.StaveHairpin = function (_Element) {\n\t  _inherits(StaveHairpin, _Element);\n\t\n\t  _createClass(StaveHairpin, null, [{\n\t    key: 'FormatByTicksAndDraw',\n\t\n\t\n\t    /* Helper function to convert ticks into pixels.\n\t     * Requires a Formatter with voices joined and formatted (to\n\t     * get pixels per tick)\n\t     *\n\t     * options is struct that has:\n\t     *\n\t     *  {\n\t     *   height: px,\n\t     *   y_shift: px, //vertical offset\n\t     *   left_shift_ticks: 0, //left horizontal offset expressed in ticks\n\t     *   right_shift_ticks: 0 // right horizontal offset expressed in ticks\n\t     *  }\n\t     *\n\t     **/\n\t    value: function FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\n\t      var ppt = formatter.pixelsPerTick;\n\t\n\t      if (ppt == null) {\n\t        throw new _vex.Vex.RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n\t      }\n\t\n\t      var l_shift_px = ppt * options.left_shift_ticks;\n\t      var r_shift_px = ppt * options.right_shift_ticks;\n\t\n\t      var hairpin_options = {\n\t        height: options.height,\n\t        y_shift: options.y_shift,\n\t        left_shift_px: l_shift_px,\n\t        right_shift_px: r_shift_px };\n\t\n\t      new StaveHairpin({\n\t        first_note: notes.first_note,\n\t        last_note: notes.last_note\n\t      }, type).setContext(ctx).setRenderOptions(hairpin_options).setPosition(position).draw();\n\t    }\n\t\n\t    /**\n\t     * Create a new hairpin from the specified notes.\n\t     *\n\t     * @constructor\n\t     * @param {!Object} notes The notes to tie up.\n\t     * @param {!Object} type The type of hairpin\n\t     */\n\t\n\t  }, {\n\t    key: 'type',\n\t    get: function get() {\n\t      return {\n\t        CRESC: 1,\n\t        DECRESC: 2\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function StaveHairpin(notes, type) {\n\t    _classCallCheck(this, StaveHairpin);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveHairpin).call(this));\n\t    /**\n\t     * Notes is a struct that has:\n\t     *\n\t     *  {\n\t     *    first_note: Note,\n\t     *    last_note: Note,\n\t     *  }\n\t     *\n\t     **/\n\t\n\t\n\t    _this.setAttribute('type', 'StaveHairpin');\n\t    _this.notes = notes;\n\t    _this.hairpin = type;\n\t    _this.position = _modifier.Modifier.Position.BELOW;\n\t\n\t    _this.render_options = {\n\t      height: 10,\n\t      y_shift: 0, // vertical offset\n\t      left_shift_px: 0, // left horizontal offset\n\t      right_shift_px: 0 };\n\t\n\t    _this.setNotes(notes);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(StaveHairpin, [{\n\t    key: 'setPosition',\n\t    value: function setPosition(position) {\n\t      if (position === _modifier.Modifier.Position.ABOVE || position === _modifier.Modifier.Position.BELOW) {\n\t        this.position = position;\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setRenderOptions',\n\t    value: function setRenderOptions(options) {\n\t      if (options.height != null && options.y_shift != null && options.left_shift_px != null && options.right_shift_px != null) {\n\t        this.render_options = options;\n\t      }\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Set the notes to attach this hairpin to.\n\t     *\n\t     * @param {!Object} notes The start and end notes.\n\t     */\n\t\n\t  }, {\n\t    key: 'setNotes',\n\t    value: function setNotes(notes) {\n\t      if (!notes.first_note && !notes.last_note) {\n\t        throw new _vex.Vex.RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');\n\t      }\n\t\n\t      // Success. Lets grab 'em notes.\n\t      this.first_note = notes.first_note;\n\t      this.last_note = notes.last_note;\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'renderHairpin',\n\t    value: function renderHairpin(params) {\n\t      var ctx = this.checkContext();\n\t      var dis = this.render_options.y_shift + 20;\n\t      var y_shift = params.first_y;\n\t\n\t      if (this.position === _modifier.Modifier.Position.ABOVE) {\n\t        dis = -dis + 30;\n\t        y_shift = params.first_y - params.staff_height;\n\t      }\n\t\n\t      var l_shift = this.render_options.left_shift_px;\n\t      var r_shift = this.render_options.right_shift_px;\n\t\n\t      ctx.beginPath();\n\t\n\t      switch (this.hairpin) {\n\t        case StaveHairpin.type.CRESC:\n\t          ctx.moveTo(params.last_x + r_shift, y_shift + dis);\n\t          ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);\n\t          ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\n\t          break;\n\t        case StaveHairpin.type.DECRESC:\n\t          ctx.moveTo(params.first_x + l_shift, y_shift + dis);\n\t          ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);\n\t          ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\n\t          break;\n\t        default:\n\t          // Default is NONE, so nothing to draw\n\t          break;\n\t      }\n\t\n\t      ctx.stroke();\n\t      ctx.closePath();\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      this.setRendered();\n\t\n\t      var firstNote = this.first_note;\n\t      var lastNote = this.last_note;\n\t\n\t      var start = firstNote.getModifierStartXY(this.position, 0);\n\t      var end = lastNote.getModifierStartXY(this.position, 0);\n\t\n\t      this.renderHairpin({\n\t        first_x: start.x,\n\t        last_x: end.x,\n\t        first_y: firstNote.getStave().y + firstNote.getStave().height,\n\t        last_y: lastNote.getStave().y + lastNote.getStave().height,\n\t        staff_height: firstNote.getStave().height\n\t      });\n\t      return true;\n\t    }\n\t  }]);\n\n\t  return StaveHairpin;\n\t}(_element.Element);\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Curve = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // VexFlow - Music Engraving for HTML5\n\t// Copyright Mohit Muthanna 2010\n\t//\n\t// This class implements curves (for slurs)\n\t\n\tvar Curve = exports.Curve = function (_Element) {\n\t  _inherits(Curve, _Element);\n\t\n\t  _createClass(Curve, null, [{\n\t    key: 'Position',\n\t    get: function get() {\n\t      return {\n\t        NEAR_HEAD: 1,\n\t        NEAR_TOP: 2\n\t      };\n\t    }\n\t  }, {\n\t    key: 'PositionString',\n\t    get: function get() {\n\t      return {\n\t        nearHead: Curve.Position.NEAR_HEAD,\n\t        nearTop: Curve.Position.NEAR_TOP\n\t      };\n\t    }\n\t\n\t    // from: Start note\n\t    // to: End note\n\t    // options:\n\t    //    cps: List of control points\n\t    //    x_shift: pixels to shift\n\t    //    y_shift: pixels to shift\n\t\n\t  }]);\n\t\n\t  function Curve(from, to, options) {\n\t    _classCallCheck(this, Curve);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Curve).call(this));\n\t\n\t    _this.setAttribute('type', 'Curve');\n\t\n\t    _this.render_options = {\n\t      spacing: 2,\n\t      thickness: 2,\n\t      x_shift: 0,\n\t      y_shift: 10,\n\t      position: Curve.Position.NEAR_HEAD,\n\t      position_end: Curve.Position.NEAR_HEAD,\n\t      invert: false,\n\t      cps: [{ x: 0, y: 10 }, { x: 0, y: 10 }]\n\t    };\n\t\n\t    _vex.Vex.Merge(_this.render_options, options);\n\t    _this.setNotes(from, to);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Curve, [{\n\t    key: 'setNotes',\n\t    value: function setNotes(from, to) {\n\t      if (!from && !to) {\n\t        throw new _vex.Vex.RuntimeError('BadArguments', 'Curve needs to have either first_note or last_note set.');\n\t      }\n\t\n\t      this.from = from;\n\t      this.to = to;\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * @return {boolean} Returns true if this is a partial bar.\n\t     */\n\t\n\t  }, {\n\t    key: 'isPartial',\n\t    value: function isPartial() {\n\t      return !this.from || !this.to;\n\t    }\n\t  }, {\n\t    key: 'renderCurve',\n\t    value: function renderCurve(params) {\n\t      var ctx = this.context;\n\t      var cps = this.render_options.cps;\n\t\n\t      var x_shift = this.render_options.x_shift;\n\t      var y_shift = this.render_options.y_shift * params.direction;\n\t\n\t      var first_x = params.first_x + x_shift;\n\t      var first_y = params.first_y + y_shift;\n\t      var last_x = params.last_x - x_shift;\n\t      var last_y = params.last_y + y_shift;\n\t      var thickness = this.render_options.thickness;\n\t\n\t      var cp_spacing = (last_x - first_x) / (cps.length + 2);\n\t\n\t      ctx.beginPath();\n\t      ctx.moveTo(first_x, first_y);\n\t      ctx.bezierCurveTo(first_x + cp_spacing + cps[0].x, first_y + cps[0].y * params.direction, last_x - cp_spacing + cps[1].x, last_y + cps[1].y * params.direction, last_x, last_y);\n\t      ctx.bezierCurveTo(last_x - cp_spacing + cps[1].x, last_y + (cps[1].y + thickness) * params.direction, first_x + cp_spacing + cps[0].x, first_y + (cps[0].y + thickness) * params.direction, first_x, first_y);\n\t      ctx.stroke();\n\t      ctx.closePath();\n\t      ctx.fill();\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      this.setRendered();\n\t\n\t      var first_note = this.from;\n\t      var last_note = this.to;\n\t      var first_x = void 0;\n\t      var last_x = void 0;\n\t      var first_y = void 0;\n\t      var last_y = void 0;\n\t      var stem_direction = void 0;\n\t\n\t      var metric = 'baseY';\n\t      var end_metric = 'baseY';\n\t\n\t      function getPosition(position) {\n\t        return typeof position === 'string' ? Curve.PositionString[position] : position;\n\t      }\n\t      var position = getPosition(this.render_options.position);\n\t      var position_end = getPosition(this.render_options.position_end);\n\t\n\t      if (position === Curve.Position.NEAR_TOP) {\n\t        metric = 'topY';\n\t        end_metric = 'topY';\n\t      }\n\t\n\t      if (position_end === Curve.Position.NEAR_HEAD) {\n\t        end_metric = 'baseY';\n\t      } else if (position_end === Curve.Position.NEAR_TOP) {\n\t        end_metric = 'topY';\n\t      }\n\t\n\t      if (first_note) {\n\t        first_x = first_note.getTieRightX();\n\t        stem_direction = first_note.getStemDirection();\n\t        first_y = first_note.getStemExtents()[metric];\n\t      } else {\n\t        first_x = last_note.getStave().getTieStartX();\n\t        first_y = last_note.getStemExtents()[metric];\n\t      }\n\t\n\t      if (last_note) {\n\t        last_x = last_note.getTieLeftX();\n\t        stem_direction = last_note.getStemDirection();\n\t        last_y = last_note.getStemExtents()[end_metric];\n\t      } else {\n\t        last_x = first_note.getStave().getTieEndX();\n\t        last_y = first_note.getStemExtents()[end_metric];\n\t      }\n\t\n\t      this.renderCurve({\n\t        first_x: first_x,\n\t        last_x: last_x,\n\t        first_y: first_y,\n\t        last_y: last_y,\n\t        direction: stem_direction * (this.render_options.invert === true ? -1 : 1)\n\t      });\n\t      return true;\n\t    }\n\t  }]);\n\n\t  return Curve;\n\t}(_element.Element);\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.TextDynamics = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _note = __webpack_require__(22);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t// This file implements the `TextDynamics` which renders traditional\n\t// text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n\t//\n\t// You can render any dynamics string that contains a combination of\n\t// the following letters:  P, M, F, Z, R, S\n\t\n\t// To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (TextDynamics.DEBUG) _vex.Vex.L('Vex.Flow.TextDynamics', args);\n\t}\n\t\n\tvar TextDynamics = exports.TextDynamics = function (_Note) {\n\t  _inherits(TextDynamics, _Note);\n\t\n\t  _createClass(TextDynamics, null, [{\n\t    key: 'GLYPHS',\n\t\n\t    // The glyph data for each dynamics letter\n\t    get: function get() {\n\t      return {\n\t        'f': {\n\t          code: 'vba',\n\t          width: 12\n\t        },\n\t        'p': {\n\t          code: 'vbf',\n\t          width: 14\n\t        },\n\t        'm': {\n\t          code: 'v62',\n\t          width: 17\n\t        },\n\t        's': {\n\t          code: 'v4a',\n\t          width: 10\n\t        },\n\t        'z': {\n\t          code: 'v80',\n\t          width: 12\n\t        },\n\t        'r': {\n\t          code: 'vb1',\n\t          width: 12\n\t        }\n\t      };\n\t    }\n\t\n\t    // A `TextDynamics` object inherits from `Note` so that it can be formatted\n\t    // within a `Voice`.\n\t    // Create the dynamics marking. `text_struct` is an object\n\t    // that contains a `duration` property and a `sequence` of\n\t    // letters that represents the letters to render\n\t\n\t  }]);\n\t\n\t  function TextDynamics(text_struct) {\n\t    _classCallCheck(this, TextDynamics);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TextDynamics).call(this, text_struct));\n\t\n\t    _this.setAttribute('type', 'TextDynamics');\n\t\n\t    _this.sequence = text_struct.text.toLowerCase();\n\t    _this.line = text_struct.line || 0;\n\t    _this.glyphs = [];\n\t\n\t    _vex.Vex.Merge(_this.render_options, {\n\t      glyph_font_size: 40\n\t    });\n\t\n\t    L('New Dynamics Text: ', _this.sequence);\n\t    return _this;\n\t  }\n\t\n\t  // Set the Stave line on which the note should be placed\n\t\n\t\n\t  _createClass(TextDynamics, [{\n\t    key: 'setLine',\n\t    value: function setLine(line) {\n\t      this.line = line;\n\t      return this;\n\t    }\n\t\n\t    // Preformat the dynamics text\n\t\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      var _this2 = this;\n\t\n\t      var total_width = 0;\n\t      // Iterate through each letter\n\t      this.sequence.split('').forEach(function (letter) {\n\t        // Get the glyph data for the letter\n\t        var glyph_data = TextDynamics.GLYPHS[letter];\n\t        if (!glyph_data) throw new _vex.Vex.RERR('Invalid dynamics character: ' + letter);\n\t\n\t        var size = _this2.render_options.glyph_font_size;\n\t        var glyph = new _glyph.Glyph(glyph_data.code, size);\n\t\n\t        // Add the glyph\n\t        _this2.glyphs.push(glyph);\n\t\n\t        total_width += glyph_data.width;\n\t      });\n\t\n\t      // Store the width of the text\n\t      this.setWidth(total_width);\n\t      this.preFormatted = true;\n\t      return this;\n\t    }\n\t\n\t    // Draw the dynamics text on the rendering context\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var _this3 = this;\n\t\n\t      this.setRendered();\n\t      var x = this.getAbsoluteX();\n\t      var y = this.stave.getYForLine(this.line + -3);\n\t\n\t      L('Rendering Dynamics: ', this.sequence);\n\t\n\t      var letter_x = x;\n\t      this.glyphs.forEach(function (glyph, index) {\n\t        var current_letter = _this3.sequence[index];\n\t        glyph.render(_this3.context, letter_x, y);\n\t        letter_x += TextDynamics.GLYPHS[current_letter].width;\n\t      });\n\t    }\n\t  }]);\n\n\t  return TextDynamics;\n\t}(_note.Note);\n\n/***/ },\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.StaveLine = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This file implements `StaveLine` which are simply lines that connect\n\t// two notes. This object is highly configurable, see the `render_options`.\n\t// A simple line is often used for notating glissando articulations, but you\n\t// can format a `StaveLine` with arrows or colors for more pedagogical\n\t// purposes, such as diagrams.\n\t\n\t\n\t// Attribution: Arrow rendering implementations based off of\n\t// Patrick Horgan's article, \"Drawing lines and arcs with\n\t// arrow heads on  HTML5 Canvas\"\n\t//\n\t// Draw an arrow head that connects between 3 coordinates\n\tfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n\t  // all cases do this.\n\t  ctx.beginPath();\n\t  ctx.moveTo(x0, y0);\n\t  ctx.lineTo(x1, y1);\n\t  ctx.lineTo(x2, y2);\n\t  ctx.lineTo(x0, y0);\n\t  ctx.closePath();\n\t\n\t  ctx.fill();\n\t}\n\t\n\t// Helper function to draw a line with arrow heads\n\tfunction drawArrowLine(ctx, point1, point2, config) {\n\t  var both_arrows = config.draw_start_arrow && config.draw_end_arrow;\n\t\n\t  var x1 = point1.x;\n\t  var y1 = point1.y;\n\t  var x2 = point2.x;\n\t  var y2 = point2.y;\n\t\n\t  // For ends with arrow we actually want to stop before we get to the arrow\n\t  // so that wide lines won't put a flat end on the arrow.\n\t  var distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n\t  var ratio = (distance - config.arrowhead_length / 3) / distance;\n\t  var end_x = void 0;\n\t  var end_y = void 0;\n\t  var start_x = void 0;\n\t  var start_y = void 0;\n\t  if (config.draw_end_arrow || both_arrows) {\n\t    end_x = Math.round(x1 + (x2 - x1) * ratio);\n\t    end_y = Math.round(y1 + (y2 - y1) * ratio);\n\t  } else {\n\t    end_x = x2;\n\t    end_y = y2;\n\t  }\n\t\n\t  if (config.draw_start_arrow || both_arrows) {\n\t    start_x = x1 + (x2 - x1) * (1 - ratio);\n\t    start_y = y1 + (y2 - y1) * (1 - ratio);\n\t  } else {\n\t    start_x = x1;\n\t    start_y = y1;\n\t  }\n\t\n\t  if (config.color) {\n\t    ctx.setStrokeStyle(config.color);\n\t    ctx.setFillStyle(config.color);\n\t  }\n\t\n\t  // Draw the shaft of the arrow\n\t  ctx.beginPath();\n\t  ctx.moveTo(start_x, start_y);\n\t  ctx.lineTo(end_x, end_y);\n\t  ctx.stroke();\n\t  ctx.closePath();\n\t\n\t  // calculate the angle of the line\n\t  var line_angle = Math.atan2(y2 - y1, x2 - x1);\n\t  // h is the line length of a side of the arrow head\n\t  var h = Math.abs(config.arrowhead_length / Math.cos(config.arrowhead_angle));\n\t\n\t  var angle1 = void 0;\n\t  var angle2 = void 0;\n\t  var top_x = void 0;\n\t  var top_y = void 0;\n\t  var bottom_x = void 0;\n\t  var bottom_y = void 0;\n\t\n\t  if (config.draw_end_arrow || both_arrows) {\n\t    angle1 = line_angle + Math.PI + config.arrowhead_angle;\n\t    top_x = x2 + Math.cos(angle1) * h;\n\t    top_y = y2 + Math.sin(angle1) * h;\n\t\n\t    angle2 = line_angle + Math.PI - config.arrowhead_angle;\n\t    bottom_x = x2 + Math.cos(angle2) * h;\n\t    bottom_y = y2 + Math.sin(angle2) * h;\n\t\n\t    drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n\t  }\n\t\n\t  if (config.draw_start_arrow || both_arrows) {\n\t    angle1 = line_angle + config.arrowhead_angle;\n\t    top_x = x1 + Math.cos(angle1) * h;\n\t    top_y = y1 + Math.sin(angle1) * h;\n\t\n\t    angle2 = line_angle - config.arrowhead_angle;\n\t    bottom_x = x1 + Math.cos(angle2) * h;\n\t    bottom_y = y1 + Math.sin(angle2) * h;\n\t\n\t    drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n\t  }\n\t}\n\t\n\tvar StaveLine = exports.StaveLine = function (_Element) {\n\t  _inherits(StaveLine, _Element);\n\t\n\t  _createClass(StaveLine, null, [{\n\t    key: 'TextVerticalPosition',\n\t\n\t    // Text Positioning\n\t    get: function get() {\n\t      return {\n\t        TOP: 1,\n\t        BOTTOM: 2\n\t      };\n\t    }\n\t  }, {\n\t    key: 'TextJustification',\n\t    get: function get() {\n\t      return {\n\t        LEFT: 1,\n\t        CENTER: 2,\n\t        RIGHT: 3\n\t      };\n\t    }\n\t\n\t    // Initialize the StaveLine with the given `notes`.\n\t    //\n\t    // `notes` is a struct that has:\n\t    //\n\t    //  ```\n\t    //  {\n\t    //    first_note: Note,\n\t    //    last_note: Note,\n\t    //    first_indices: [n1, n2, n3],\n\t    //    last_indices: [n1, n2, n3]\n\t    //  }\n\t    //  ```\n\t\n\t  }]);\n\t\n\t  function StaveLine(notes) {\n\t    _classCallCheck(this, StaveLine);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StaveLine).call(this));\n\t\n\t    _this.setAttribute('type', 'StaveLine');\n\t\n\t    _this.notes = notes;\n\t\n\t    _this.text = '';\n\t\n\t    _this.font = {\n\t      family: 'Arial',\n\t      size: 10,\n\t      weight: ''\n\t    };\n\t\n\t    _this.render_options = {\n\t      // Space to add to the left or the right\n\t      padding_left: 4,\n\t      padding_right: 3,\n\t\n\t      // The width of the line in pixels\n\t      line_width: 1,\n\t      // An array of line/space lengths. Unsupported with Raphael (SVG)\n\t      line_dash: null,\n\t      // Can draw rounded line end, instead of a square. Unsupported with Raphael (SVG)\n\t      rounded_end: true,\n\t      // The color of the line and arrowheads\n\t      color: null,\n\t\n\t      // Flags to draw arrows on each end of the line\n\t      draw_start_arrow: false,\n\t      draw_end_arrow: false,\n\t\n\t      // The length of the arrowhead sides\n\t      arrowhead_length: 10,\n\t      // The angle of the arrowhead\n\t      arrowhead_angle: Math.PI / 8,\n\t\n\t      // The position of the text\n\t      text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n\t      text_justification: StaveLine.TextJustification.CENTER\n\t    };\n\t\n\t    _this.setNotes(notes);\n\t    return _this;\n\t  }\n\t\n\t  // Set the font for the `StaveLine` text\n\t\n\t\n\t  _createClass(StaveLine, [{\n\t    key: 'setFont',\n\t    value: function setFont(font) {\n\t      this.font = font;return this;\n\t    }\n\t    // The the annotation for the `StaveLine`\n\t\n\t  }, {\n\t    key: 'setText',\n\t    value: function setText(text) {\n\t      this.text = text;return this;\n\t    }\n\t\n\t    // Set the notes for the `StaveLine`\n\t\n\t  }, {\n\t    key: 'setNotes',\n\t    value: function setNotes(notes) {\n\t      if (!notes.first_note && !notes.last_note) {\n\t        throw new _vex.Vex.RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');\n\t      }\n\t\n\t      if (!notes.first_indices) notes.first_indices = [0];\n\t      if (!notes.last_indices) notes.last_indices = [0];\n\t\n\t      if (notes.first_indices.length !== notes.last_indices.length) {\n\t        throw new _vex.Vex.RuntimeError('BadArguments', 'Connected notes must have similar index sizes');\n\t      }\n\t\n\t      // Success. Lets grab 'em notes.\n\t      this.first_note = notes.first_note;\n\t      this.first_indices = notes.first_indices;\n\t      this.last_note = notes.last_note;\n\t      this.last_indices = notes.last_indices;\n\t      return this;\n\t    }\n\t\n\t    // Apply the style of the `StaveLine` to the context\n\t\n\t  }, {\n\t    key: 'applyLineStyle',\n\t    value: function applyLineStyle() {\n\t      var ctx = this.checkContext();\n\t      var render_options = this.render_options;\n\t\n\t      if (render_options.line_dash) {\n\t        ctx.setLineDash(render_options.line_dash);\n\t      }\n\t\n\t      if (render_options.line_width) {\n\t        ctx.setLineWidth(render_options.line_width);\n\t      }\n\t\n\t      if (render_options.rounded_end) {\n\t        ctx.setLineCap('round');\n\t      } else {\n\t        ctx.setLineCap('square');\n\t      }\n\t    }\n\t\n\t    // Apply the text styling to the context\n\t\n\t  }, {\n\t    key: 'applyFontStyle',\n\t    value: function applyFontStyle() {\n\t      var ctx = this.checkContext();\n\t\n\t      if (this.font) {\n\t        ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\t      }\n\t\n\t      if (this.render_options.color) {\n\t        ctx.setStrokeStyle(this.render_options.color);\n\t        ctx.setFillStyle(this.render_options.color);\n\t      }\n\t    }\n\t\n\t    // Renders the `StaveLine` on the context\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var _this2 = this;\n\t\n\t      var ctx = this.checkContext();\n\t      this.setRendered();\n\t\n\t      var first_note = this.first_note;\n\t      var last_note = this.last_note;\n\t      var render_options = this.render_options;\n\t\n\t      ctx.save();\n\t      this.applyLineStyle();\n\t\n\t      // Cycle through each set of indices and draw lines\n\t      var start_position = void 0;\n\t      var end_position = void 0;\n\t      this.first_indices.forEach(function (first_index, i) {\n\t        var last_index = _this2.last_indices[i];\n\t\n\t        // Get initial coordinates for the start/end of the line\n\t        start_position = first_note.getModifierStartXY(2, first_index);\n\t        end_position = last_note.getModifierStartXY(1, last_index);\n\t        var upwards_slope = start_position.y > end_position.y;\n\t\n\t        // Adjust `x` coordinates for modifiers\n\t        start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\n\t        end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\n\t\n\t        // Adjust first `x` coordinates for displacements\n\t        var notehead_width = first_note.getGlyph().getWidth();\n\t        var first_displaced = first_note.getKeyProps()[first_index].displaced;\n\t        if (first_displaced && first_note.getStemDirection() === 1) {\n\t          start_position.x += notehead_width + render_options.padding_left;\n\t        }\n\t\n\t        // Adjust last `x` coordinates for displacements\n\t        var last_displaced = last_note.getKeyProps()[last_index].displaced;\n\t        if (last_displaced && last_note.getStemDirection() === -1) {\n\t          end_position.x -= notehead_width + render_options.padding_right;\n\t        }\n\t\n\t        // Adjust y position better if it's not coming from the center of the note\n\t        start_position.y += upwards_slope ? -3 : 1;\n\t        end_position.y += upwards_slope ? 2 : 0;\n\t\n\t        drawArrowLine(ctx, start_position, end_position, _this2.render_options);\n\t      });\n\t\n\t      ctx.restore();\n\t\n\t      // Determine the x coordinate where to start the text\n\t      var text_width = ctx.measureText(this.text).width;\n\t      var justification = render_options.text_justification;\n\t      var x = 0;\n\t      if (justification === StaveLine.TextJustification.LEFT) {\n\t        x = start_position.x;\n\t      } else if (justification === StaveLine.TextJustification.CENTER) {\n\t        var delta_x = end_position.x - start_position.x;\n\t        var center_x = delta_x / 2 + start_position.x;\n\t        x = center_x - text_width / 2;\n\t      } else if (justification === StaveLine.TextJustification.RIGHT) {\n\t        x = end_position.x - text_width;\n\t      }\n\t\n\t      // Determine the y value to start the text\n\t      var y = void 0;\n\t      var vertical_position = render_options.text_position_vertical;\n\t      if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n\t        y = first_note.getStave().getYForTopText();\n\t      } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n\t        y = first_note.getStave().getYForBottomText(_tables.Flow.TEXT_HEIGHT_OFFSET_HACK);\n\t      }\n\t\n\t      // Draw the text\n\t      ctx.save();\n\t      this.applyFontStyle();\n\t      ctx.fillText(this.text, x, y);\n\t      ctx.restore();\n\t\n\t      return this;\n\t    }\n\t  }]);\n\n\t  return StaveLine;\n\t}(_element.Element);\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.PedalMarking = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This file implements different types of pedal markings. These notation\n\t// elements indicate to the performer when to depress and release the a pedal.\n\t//\n\t// In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n\t// custom text for the release/depress pedal markings.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (PedalMarking.DEBUG) _vex.Vex.L('Vex.Flow.PedalMarking', args);\n\t}\n\t\n\t// Draws a pedal glyph with the provided `name` on a rendering `context`\n\t// at the coordinates `x` and `y. Takes into account the glyph data\n\t// coordinate shifts.\n\tfunction drawPedalGlyph(name, context, x, y, point) {\n\t  var glyph_data = PedalMarking.GLYPHS[name];\n\t  var glyph = new _glyph.Glyph(glyph_data.code, point);\n\t  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n\t}\n\t\n\tvar PedalMarking = exports.PedalMarking = function (_Element) {\n\t  _inherits(PedalMarking, _Element);\n\t\n\t  _createClass(PedalMarking, null, [{\n\t    key: 'createSustain',\n\t\n\t\n\t    // Create a sustain pedal marking. Returns the defaults PedalMarking.\n\t    // Which uses the traditional \"Ped\" and \"*\"\" markings.\n\t    value: function createSustain(notes) {\n\t      var pedal = new PedalMarking(notes);\n\t      return pedal;\n\t    }\n\t\n\t    // Create a sostenuto pedal marking\n\t\n\t  }, {\n\t    key: 'createSostenuto',\n\t    value: function createSostenuto(notes) {\n\t      var pedal = new PedalMarking(notes);\n\t      pedal.setStyle(PedalMarking.Styles.MIXED);\n\t      pedal.setCustomText('Sost. Ped.');\n\t      return pedal;\n\t    }\n\t\n\t    // Create an una corda pedal marking\n\t\n\t  }, {\n\t    key: 'createUnaCorda',\n\t    value: function createUnaCorda(notes) {\n\t      var pedal = new PedalMarking(notes);\n\t      pedal.setStyle(PedalMarking.Styles.TEXT);\n\t      pedal.setCustomText('una corda', 'tre corda');\n\t      return pedal;\n\t    }\n\t\n\t    // ## Prototype Methods\n\t\n\t  }, {\n\t    key: 'GLYPHS',\n\t\n\t    // Glyph data\n\t    get: function get() {\n\t      return {\n\t        'pedal_depress': {\n\t          code: 'v36',\n\t          x_shift: -10,\n\t          y_shift: 0\n\t        },\n\t        'pedal_release': {\n\t          code: 'v5d',\n\t          x_shift: -2,\n\t          y_shift: 3\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: 'Styles',\n\t    get: function get() {\n\t      return {\n\t        TEXT: 1,\n\t        BRACKET: 2,\n\t        MIXED: 3\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function PedalMarking(notes) {\n\t    _classCallCheck(this, PedalMarking);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PedalMarking).call(this));\n\t\n\t    _this.setAttribute('type', 'PedalMarking');\n\t\n\t    _this.notes = notes;\n\t    _this.style = PedalMarking.TEXT;\n\t    _this.line = 0;\n\t\n\t    // Custom text for the release/depress markings\n\t    _this.custom_depress_text = '';\n\t    _this.custom_release_text = '';\n\t\n\t    _this.font = {\n\t      family: 'Times New Roman',\n\t      size: 12,\n\t      weight: 'italic bold'\n\t    };\n\t\n\t    _this.render_options = {\n\t      bracket_height: 10,\n\t      text_margin_right: 6,\n\t      bracket_line_width: 1,\n\t      glyph_point_size: 40,\n\t      color: 'black'\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  // Set custom text for the `depress`/`release` pedal markings. No text is\n\t  // set if the parameter is falsy.\n\t\n\t\n\t  _createClass(PedalMarking, [{\n\t    key: 'setCustomText',\n\t    value: function setCustomText(depress, release) {\n\t      this.custom_depress_text = depress || '';\n\t      this.custom_release_text = release || '';\n\t      return this;\n\t    }\n\t\n\t    // Set the pedal marking style\n\t\n\t  }, {\n\t    key: 'setStyle',\n\t    value: function setStyle(style) {\n\t      if (style < 1 && style > 3) {\n\t        throw new _vex.Vex.RERR('InvalidParameter', 'The style must be one found in PedalMarking.Styles');\n\t      }\n\t\n\t      this.style = style;\n\t      return this;\n\t    }\n\t\n\t    // Set the staff line to render the markings on\n\t\n\t  }, {\n\t    key: 'setLine',\n\t    value: function setLine(line) {\n\t      this.line = line;return this;\n\t    }\n\t\n\t    // Draw the bracket based pedal markings\n\t\n\t  }, {\n\t    key: 'drawBracketed',\n\t    value: function drawBracketed() {\n\t      var ctx = this.context;\n\t      var is_pedal_depressed = false;\n\t      var prev_x = void 0;\n\t      var prev_y = void 0;\n\t      var pedal = this;\n\t\n\t      // Iterate through each note\n\t      this.notes.forEach(function (note, index, notes) {\n\t        // Each note triggers the opposite pedal action\n\t        is_pedal_depressed = !is_pedal_depressed;\n\t\n\t        // Get the initial coordinates for the note\n\t        var x = note.getAbsoluteX();\n\t        var y = note.getStave().getYForBottomText(pedal.line + 3);\n\t\n\t        // Throw if current note is positioned before the previous note\n\t        if (x < prev_x) {\n\t          throw new _vex.Vex.RERR('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n\t        }\n\t\n\t        // Determine if the previous or next note are the same\n\t        // as the current note. We need to keep track of this for\n\t        // when adjustments are made for the release+depress action\n\t        var next_is_same = notes[index + 1] === note;\n\t        var prev_is_same = notes[index - 1] === note;\n\t\n\t        var x_shift = 0;\n\t        if (is_pedal_depressed) {\n\t          // Adjustment for release+depress\n\t          x_shift = prev_is_same ? 5 : 0;\n\t\n\t          if (pedal.style === PedalMarking.Styles.MIXED && !prev_is_same) {\n\t            // For MIXED style, start with text instead of bracket\n\t            if (pedal.custom_depress_text) {\n\t              // If we have custom text, use instead of the default \"Ped\" glyph\n\t              var text_width = ctx.measureText(pedal.custom_depress_text).width;\n\t              ctx.fillText(pedal.custom_depress_text, x - text_width / 2, y);\n\t              x_shift = text_width / 2 + pedal.render_options.text_margin_right;\n\t            } else {\n\t              // Render the Ped glyph in position\n\t              drawPedalGlyph('pedal_depress', ctx, x, y, pedal.render_options.glyph_point_size);\n\t              x_shift = 20 + pedal.render_options.text_margin_right;\n\t            }\n\t          } else {\n\t            // Draw start bracket\n\t            ctx.beginPath();\n\t            ctx.moveTo(x, y - pedal.render_options.bracket_height);\n\t            ctx.lineTo(x + x_shift, y);\n\t            ctx.stroke();\n\t            ctx.closePath();\n\t          }\n\t        } else {\n\t          // Adjustment for release+depress\n\t          x_shift = next_is_same ? -5 : 0;\n\t\n\t          // Draw end bracket\n\t          ctx.beginPath();\n\t          ctx.moveTo(prev_x, prev_y);\n\t          ctx.lineTo(x + x_shift, y);\n\t          ctx.lineTo(x, y - pedal.render_options.bracket_height);\n\t          ctx.stroke();\n\t          ctx.closePath();\n\t        }\n\t\n\t        // Store previous coordinates\n\t        prev_x = x + x_shift;\n\t        prev_y = y;\n\t      });\n\t    }\n\t\n\t    // Draw the text based pedal markings. This defaults to the traditional\n\t    // \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n\t\n\t  }, {\n\t    key: 'drawText',\n\t    value: function drawText() {\n\t      var ctx = this.context;\n\t      var is_pedal_depressed = false;\n\t      var pedal = this;\n\t\n\t      // The glyph point size\n\t      var point = pedal.render_options.glyph_point_size;\n\t\n\t      // Iterate through each note, placing glyphs or custom text accordingly\n\t      this.notes.forEach(function (note) {\n\t        is_pedal_depressed = !is_pedal_depressed;\n\t        var stave = note.getStave();\n\t        var x = note.getAbsoluteX();\n\t        var y = stave.getYForBottomText(pedal.line + 3);\n\t\n\t        var text_width = 0;\n\t        if (is_pedal_depressed) {\n\t          if (pedal.custom_depress_text) {\n\t            text_width = ctx.measureText(pedal.custom_depress_text).width;\n\t            ctx.fillText(pedal.custom_depress_text, x - text_width / 2, y);\n\t          } else {\n\t            drawPedalGlyph('pedal_depress', ctx, x, y, point);\n\t          }\n\t        } else {\n\t          if (pedal.custom_release_text) {\n\t            text_width = ctx.measureText(pedal.custom_release_text).width;\n\t            ctx.fillText(pedal.custom_release_text, x - text_width / 2, y);\n\t          } else {\n\t            drawPedalGlyph('pedal_release', ctx, x, y, point);\n\t          }\n\t        }\n\t      });\n\t    }\n\t\n\t    // Render the pedal marking in position on the rendering context\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var ctx = this.checkContext();\n\t      this.setRendered();\n\t\n\t      ctx.save();\n\t      ctx.setStrokeStyle(this.render_options.color);\n\t      ctx.setFillStyle(this.render_options.color);\n\t      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\t\n\t      L('Rendering Pedal Marking');\n\t\n\t      if (this.style === PedalMarking.Styles.BRACKET || this.style === PedalMarking.Styles.MIXED) {\n\t        ctx.setLineWidth(this.render_options.bracket_line_width);\n\t        this.drawBracketed();\n\t      } else if (this.style === PedalMarking.Styles.TEXT) {\n\t        this.drawText();\n\t      }\n\t\n\t      ctx.restore();\n\t    }\n\t  }]);\n\n\t  return PedalMarking;\n\t}(_element.Element);\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.TextBracket = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _tables = __webpack_require__(2);\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _renderer = __webpack_require__(10);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author: Cyril Silverman\n\t//\n\t// ## Description\n\t//\n\t// This file implement `TextBrackets` which extend between two notes.\n\t// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n\t// using this class.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (TextBracket.DEBUG) _vex.Vex.L('Vex.Flow.TextBracket', args);\n\t}\n\t\n\tvar TextBracket = exports.TextBracket = function (_Element) {\n\t  _inherits(TextBracket, _Element);\n\t\n\t  _createClass(TextBracket, null, [{\n\t    key: 'Positions',\n\t    get: function get() {\n\t      return {\n\t        TOP: 1,\n\t        BOTTOM: -1\n\t      };\n\t    }\n\t  }]);\n\t\n\t  function TextBracket(bracket_data) {\n\t    _classCallCheck(this, TextBracket);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TextBracket).call(this));\n\t\n\t    _this.setAttribute('type', 'TextBracket');\n\t\n\t    _this.start = bracket_data.start;\n\t    _this.stop = bracket_data.stop;\n\t\n\t    _this.text = bracket_data.text || '';\n\t    _this.superscript = bracket_data.superscript || '';\n\t\n\t    _this.position = bracket_data.position || TextBracket.Positions.TOP;\n\t    _this.line = 1;\n\t\n\t    _this.font = {\n\t      family: 'Serif',\n\t      size: 15,\n\t      weight: 'italic'\n\t    };\n\t\n\t    _this.render_options = {\n\t      dashed: true,\n\t      dash: [5],\n\t      color: 'black',\n\t      line_width: 1,\n\t      show_bracket: true,\n\t      bracket_height: 8,\n\t\n\t      // In the BOTTOM position, the bracket line can extend\n\t      // under the superscript.\n\t      underline_superscript: true\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  // Apply the text backet styling to the provided `context`\n\t\n\t\n\t  _createClass(TextBracket, [{\n\t    key: 'applyStyle',\n\t    value: function applyStyle(context) {\n\t      // Apply style for the octave bracket\n\t      context.setFont(this.font.family, this.font.size, this.font.weight);\n\t      context.setStrokeStyle(this.render_options.color);\n\t      context.setFillStyle(this.render_options.color);\n\t      context.setLineWidth(this.render_options.line_width);\n\t\n\t      return this;\n\t    }\n\t\n\t    // Set whether the bracket line should be `dashed`. You can also\n\t    // optionally set the `dash` pattern by passing in an array of numbers\n\t\n\t  }, {\n\t    key: 'setDashed',\n\t    value: function setDashed(dashed, dash) {\n\t      this.render_options.dashed = dashed;\n\t      if (dash) this.render_options.dash = dash;\n\t      return this;\n\t    }\n\t\n\t    // Set the font for the text\n\t\n\t  }, {\n\t    key: 'setFont',\n\t    value: function setFont(font) {\n\t      this.font = font;return this;\n\t    }\n\t    // Set the rendering `context` for the octave bracket\n\t\n\t  }, {\n\t    key: 'setLine',\n\t    value: function setLine(line) {\n\t      this.line = line;return this;\n\t    }\n\t\n\t    // Draw the octave bracket on the rendering context\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var ctx = this.context;\n\t      this.setRendered();\n\t\n\t      var y = 0;\n\t      switch (this.position) {\n\t        case TextBracket.Positions.TOP:\n\t          y = this.start.getStave().getYForTopText(this.line);\n\t          break;\n\t        case TextBracket.Positions.BOTTOM:\n\t          y = this.start.getStave().getYForBottomText(this.line + _tables.Flow.TEXT_HEIGHT_OFFSET_HACK);\n\t          break;\n\t        default:\n\t          throw new _vex.Vex.RERR('InvalidPosition', 'The position ' + this.position + ' is invalid');\n\t      }\n\t\n\t      // Get the preliminary start and stop coordintates for the bracket\n\t      var start = { x: this.start.getAbsoluteX(), y: y };\n\t      var stop = { x: this.stop.getAbsoluteX(), y: y };\n\t\n\t      L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n\t\n\t      var bracket_height = this.render_options.bracket_height * this.position;\n\t\n\t      ctx.save();\n\t      this.applyStyle(ctx);\n\t\n\t      // Draw text\n\t      ctx.fillText(this.text, start.x, start.y);\n\t\n\t      // Get the width and height for the octave number\n\t      var main_width = ctx.measureText(this.text).width;\n\t      var main_height = ctx.measureText('M').width;\n\t\n\t      // Calculate the y position for the super script\n\t      var super_y = start.y - main_height / 2.5;\n\t\n\t      // Draw the superscript\n\t      ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);\n\t      ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n\t\n\t      // Determine width and height of the superscript\n\t      var superscript_width = ctx.measureText(this.superscript).width;\n\t      var super_height = ctx.measureText('M').width;\n\t\n\t      // Setup initial coordinates for the bracket line\n\t      var start_x = start.x;\n\t      var line_y = super_y;\n\t      var end_x = stop.x + this.stop.getGlyph().getWidth();\n\t\n\t      // Adjust x and y coordinates based on position\n\t      if (this.position === TextBracket.Positions.TOP) {\n\t        start_x += main_width + superscript_width + 5;\n\t        line_y -= super_height / 2.7;\n\t      } else if (this.position === TextBracket.Positions.BOTTOM) {\n\t        line_y += super_height / 2.7;\n\t        start_x += main_width + 2;\n\t\n\t        if (!this.render_options.underline_superscript) {\n\t          start_x += superscript_width;\n\t        }\n\t      }\n\t\n\t      if (this.render_options.dashed) {\n\t        // Main line\n\t        _renderer.Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);\n\t        // Ending Bracket\n\t        if (this.render_options.show_bracket) {\n\t          _renderer.Renderer.drawDashedLine(ctx, end_x, line_y + 1 * this.position, end_x, line_y + bracket_height, this.render_options.dash);\n\t        }\n\t      } else {\n\t        ctx.beginPath();\n\t        ctx.moveTo(start_x, line_y);\n\t        // Main line\n\t        ctx.lineTo(end_x, line_y);\n\t        if (this.render_options.show_bracket) {\n\t          // Ending bracket\n\t          ctx.lineTo(end_x, line_y + bracket_height);\n\t        }\n\t        ctx.stroke();\n\t        ctx.closePath();\n\t      }\n\t\n\t      ctx.restore();\n\t    }\n\t  }]);\n\n\t  return TextBracket;\n\t}(_element.Element);\n\n/***/ },\n/* 71 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.BarNote = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _note = __webpack_require__(22);\n\t\n\tvar _stavebarline = __webpack_require__(44);\n\t\n\tvar _boundingbox = __webpack_require__(8);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// A `BarNote` is used to render bar lines (from `barline.js`). `BarNote`s can\n\t// be added to a voice and rendered in the middle of a stave. Since it has no\n\t// duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n\t//\n\t// See `tests/barnote_tests.js` for usage examples.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (BarNote.DEBUG) _vex.Vex.L('Vex.Flow.BarNote', args);\n\t}\n\t\n\tvar BarNote = exports.BarNote = function (_Note) {\n\t  _inherits(BarNote, _Note);\n\t\n\t  function BarNote(type) {\n\t    _classCallCheck(this, BarNote);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BarNote).call(this, { duration: 'b' }));\n\t\n\t    _this.setAttribute('type', 'BarNote');\n\t\n\t    var TYPE = _stavebarline.Barline.type;\n\t    _this.metrics = {\n\t      widths: {}\n\t    };\n\t\n\t    // Defined this way to prevent lint errors.\n\t    _this.metrics.widths[TYPE.SINGLE] = 8;\n\t    _this.metrics.widths[TYPE.DOUBLE] = 12;\n\t    _this.metrics.widths[TYPE.END] = 15;\n\t    _this.metrics.widths[TYPE.REPEAT_BEGIN] = 14;\n\t    _this.metrics.widths[TYPE.REPEAT_END] = 14;\n\t    _this.metrics.widths[TYPE.REPEAT_BOTH] = 18;\n\t    _this.metrics.widths[TYPE.NONE] = 0;\n\t\n\t    // Tell the formatter that bar notes have no duration.\n\t    _this.ignore_ticks = true;\n\t    _this.type = type === undefined ? TYPE.SINGLE : type;\n\t\n\t    // Set width to width of relevant `Barline`.\n\t    _this.setWidth(_this.metrics.widths[_this.type]);\n\t    return _this;\n\t  }\n\t\n\t  // Get and set the type of Bar note. `type` must be one of `Vex.Flow.Barline.type`.\n\t\n\t\n\t  _createClass(BarNote, [{\n\t    key: 'getType',\n\t    value: function getType() {\n\t      return this.type;\n\t    }\n\t  }, {\n\t    key: 'setType',\n\t    value: function setType(type) {\n\t      this.type = type;\n\t      this.setWidth(this.metrics.widths[this.type]);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'getBoundingBox',\n\t    value: function getBoundingBox() {\n\t      return new _boundingbox.BoundingBox(0, 0, 0, 0);\n\t    }\n\t  }, {\n\t    key: 'addToModifierContext',\n\t    value: function addToModifierContext() {\n\t      /* overridden to ignore */\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      /* overridden to ignore */\n\t      this.setPreFormatted(true);\n\t      return this;\n\t    }\n\t\n\t    // Render note to stave.\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      if (!this.stave) throw new _vex.Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\t      L('Rendering bar line at: ', this.getAbsoluteX());\n\t      var barline = new _stavebarline.Barline(this.type);\n\t      barline.setX(this.getAbsoluteX());\n\t      barline.draw(this.stave);\n\t      this.setRendered();\n\t    }\n\t  }]);\n\n\t  return BarNote;\n\t}(_note.Note);\n\n/***/ },\n/* 72 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.GhostNote = undefined;\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _stemmablenote = __webpack_require__(24);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t\n\tvar GhostNote = exports.GhostNote = function (_StemmableNote) {\n\t  _inherits(GhostNote, _StemmableNote);\n\t\n\t  /** @constructor */\n\t  function GhostNote(parameter) {\n\t    _classCallCheck(this, GhostNote);\n\t\n\t    // Sanity check\n\t    if (!parameter) {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'Ghost note must have valid initialization data to identify ' + 'duration.');\n\t    }\n\t\n\t    var note_struct = void 0;\n\t\n\t    // Preserve backwards-compatibility\n\t    if (typeof parameter === 'string') {\n\t      note_struct = { duration: parameter };\n\t    } else if ((typeof parameter === 'undefined' ? 'undefined' : _typeof(parameter)) === 'object') {\n\t      note_struct = parameter;\n\t    } else {\n\t      throw new _vex.Vex.RuntimeError('BadArguments', 'Ghost note must have valid initialization data to identify ' + 'duration.');\n\t    }\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(GhostNote).call(this, note_struct));\n\t\n\t    _this.setAttribute('type', 'GhostNote');\n\t\n\t    // Note properties\n\t    _this.setWidth(0);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(GhostNote, [{\n\t    key: 'isRest',\n\t    value: function isRest() {\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'setStave',\n\t    value: function setStave(stave) {\n\t      _get(Object.getPrototypeOf(GhostNote.prototype), 'setStave', this).call(this, stave);\n\t    }\n\t  }, {\n\t    key: 'addToModifierContext',\n\t    value: function addToModifierContext() {\n\t      /* intentionally overridden */return this;\n\t    }\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      this.setPreFormatted(true);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      if (!this.stave) throw new _vex.Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\t\n\t      // Draw the modifiers\n\t      this.setRendered();\n\t      for (var i = 0; i < this.modifiers.length; ++i) {\n\t        var modifier = this.modifiers[i];\n\t        modifier.setContext(this.context);\n\t        modifier.draw();\n\t      }\n\t    }\n\t  }]);\n\n\t  return GhostNote;\n\t}(_stemmablenote.StemmableNote);\n\n/***/ },\n/* 73 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Tremolo = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _modifier = __webpack_require__(25);\n\t\n\tvar _glyph = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// Author: Mike Corrigan <corrigan@gmail.com>\n\t//\n\t// This class implements tremolo notation.\n\t\n\tvar Tremolo = exports.Tremolo = function (_Modifier) {\n\t  _inherits(Tremolo, _Modifier);\n\t\n\t  _createClass(Tremolo, null, [{\n\t    key: 'CATEGORY',\n\t    get: function get() {\n\t      return 'tremolo';\n\t    }\n\t  }]);\n\t\n\t  function Tremolo(num) {\n\t    _classCallCheck(this, Tremolo);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Tremolo).call(this));\n\t\n\t    _this.setAttribute('type', 'Tremolo');\n\t\n\t    _this.num = num;\n\t    _this.note = null;\n\t    _this.index = null;\n\t    _this.position = _modifier.Modifier.Position.CENTER;\n\t    _this.code = 'v74';\n\t    _this.shift_right = -2;\n\t    _this.y_spacing = 4;\n\t\n\t    _this.render_options = {\n\t      font_scale: 35,\n\t      stroke_px: 3,\n\t      stroke_spacing: 10\n\t    };\n\t\n\t    _this.font = {\n\t      family: 'Arial',\n\t      size: 16,\n\t      weight: ''\n\t    };\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tremolo, [{\n\t    key: 'getCategory',\n\t    value: function getCategory() {\n\t      return Tremolo.CATEGORY;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t\n\t      if (!(this.note && this.index != null)) {\n\t        throw new _vex.Vex.RERR('NoAttachedNote', \"Can't draw Tremolo without a note and index.\");\n\t      }\n\t\n\t      this.setRendered();\n\t      var start = this.note.getModifierStartXY(this.position, this.index);\n\t      var x = start.x;\n\t      var y = start.y;\n\t\n\t      x += this.shift_right;\n\t      for (var i = 0; i < this.num; ++i) {\n\t        _glyph.Glyph.renderGlyph(this.context, x, y, this.render_options.font_scale, this.code);\n\t        y += this.y_spacing;\n\t      }\n\t    }\n\t  }]);\n\n\t  return Tremolo;\n\t}(_modifier.Modifier);\n\n/***/ },\n/* 74 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Crescendo = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _note = __webpack_require__(22);\n\t\n\tvar _tickcontext = __webpack_require__(39);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// ## Description\n\t//\n\t// This file implements the `Crescendo` object which draws crescendos and\n\t// decrescendo dynamics markings. A `Crescendo` is initialized with a\n\t// duration and formatted as part of a `Voice` like any other `Note`\n\t// type in VexFlow. This object would most likely be formatted in a Voice\n\t// with `TextNotes` - which are used to represent other dynamics markings.\n\t\n\t// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (Crescendo.DEBUG) _vex.Vex.L('Vex.Flow.Crescendo', args);\n\t}\n\t\n\t// Private helper to draw the hairpin\n\tfunction renderHairpin(ctx, params) {\n\t  var begin_x = params.begin_x;\n\t  var end_x = params.end_x;\n\t  var y = params.y;\n\t  var half_height = params.height / 2;\n\t\n\t  ctx.beginPath();\n\t\n\t  if (params.reverse) {\n\t    ctx.moveTo(begin_x, y - half_height);\n\t    ctx.lineTo(end_x, y);\n\t    ctx.lineTo(begin_x, y + half_height);\n\t  } else {\n\t    ctx.moveTo(end_x, y - half_height);\n\t    ctx.lineTo(begin_x, y);\n\t    ctx.lineTo(end_x, y + half_height);\n\t  }\n\t\n\t  ctx.stroke();\n\t  ctx.closePath();\n\t}\n\t\n\tvar Crescendo = exports.Crescendo = function (_Note) {\n\t  _inherits(Crescendo, _Note);\n\t\n\t  // Initialize the crescendo's properties\n\t  function Crescendo(note_struct) {\n\t    _classCallCheck(this, Crescendo);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Crescendo).call(this, note_struct));\n\t\n\t    _this.setAttribute('type', 'Crescendo');\n\t\n\t    // Whether the object is a decrescendo\n\t    _this.decrescendo = false;\n\t\n\t    // The staff line to be placed on\n\t    _this.line = note_struct.line || 0;\n\t\n\t    // The height at the open end of the cresc/decresc\n\t    _this.height = 15;\n\t\n\t    _vex.Vex.Merge(_this.render_options, {\n\t      // Extensions to the length of the crescendo on either side\n\t      extend_left: 0,\n\t      extend_right: 0,\n\t      // Vertical shift\n\t      y_shift: 0\n\t    });\n\t    return _this;\n\t  }\n\t\n\t  // Set the line to center the element on\n\t\n\t\n\t  _createClass(Crescendo, [{\n\t    key: 'setLine',\n\t    value: function setLine(line) {\n\t      this.line = line;return this;\n\t    }\n\t\n\t    // Set the full height at the open end\n\t\n\t  }, {\n\t    key: 'setHeight',\n\t    value: function setHeight(height) {\n\t      this.height = height;return this;\n\t    }\n\t\n\t    // Set whether the sign should be a descresendo by passing a bool\n\t    // to `decresc`\n\t\n\t  }, {\n\t    key: 'setDecrescendo',\n\t    value: function setDecrescendo(decresc) {\n\t      this.decrescendo = decresc;\n\t      return this;\n\t    }\n\t\n\t    // Preformat the note\n\t\n\t  }, {\n\t    key: 'preFormat',\n\t    value: function preFormat() {\n\t      this.preFormatted = true;return this;\n\t    }\n\t\n\t    // Render the Crescendo object onto the canvas\n\t\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      this.checkContext();\n\t      this.setRendered();\n\t\n\t      var tick_context = this.getTickContext();\n\t      var next_context = _tickcontext.TickContext.getNextContext(tick_context);\n\t\n\t      var begin_x = this.getAbsoluteX();\n\t      var end_x = next_context ? next_context.getX() : this.stave.x + this.stave.width;\n\t      var y = this.stave.getYForLine(this.line + -3) + 1;\n\t\n\t      L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);\n\t\n\t      renderHairpin(this.context, {\n\t        begin_x: begin_x - this.render_options.extend_left,\n\t        end_x: end_x + this.render_options.extend_right,\n\t        y: y + this.render_options.y_shift,\n\t        height: this.height,\n\t        reverse: this.decrescendo\n\t      });\n\t    }\n\t  }]);\n\n\t  return Crescendo;\n\t}(_note.Note);\n\n/***/ },\n/* 75 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.System = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// This class implements a musical system, which is a collection of staves,\n\t// each which can have one or more voices. All voices across all staves in\n\t// the system are formatted together.\n\t\n\tvar _element = __webpack_require__(5);\n\t\n\tvar _factory = __webpack_require__(76);\n\t\n\tvar _formatter = __webpack_require__(14);\n\t\n\tvar _note = __webpack_require__(22);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction setDefaults(params, defaults) {\n\t  var default_options = defaults.options;\n\t  params = _extends(defaults, params);\n\t  params.options = _extends(default_options, params.options);\n\t  return params;\n\t}\n\t\n\tvar System = exports.System = function (_Element) {\n\t  _inherits(System, _Element);\n\t\n\t  function System() {\n\t    var params = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    _classCallCheck(this, System);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(System).call(this));\n\t\n\t    _this.setAttribute('type', 'System');\n\t    _this.setOptions(params);\n\t    _this.parts = [];\n\t    return _this;\n\t  }\n\t\n\t  _createClass(System, [{\n\t    key: 'setOptions',\n\t    value: function setOptions() {\n\t      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t      this.options = setDefaults(options, {\n\t        x: 10,\n\t        y: 10,\n\t        width: 500,\n\t        connector: null,\n\t        spaceBetweenStaves: 12, // stave spaces\n\t        factory: null,\n\t        debugFormatter: false,\n\t        formatIterations: 0, // number of formatter tuning steps\n\t        options: {}\n\t      });\n\t\n\t      this.factory = this.options.factory || new _factory.Factory({ renderer: { el: null } });\n\t    }\n\t  }, {\n\t    key: 'setContext',\n\t    value: function setContext(context) {\n\t      _get(Object.getPrototypeOf(System.prototype), 'setContext', this).call(this, context);\n\t      this.factory.setContext(context);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'addConnector',\n\t    value: function addConnector() {\n\t      var type = arguments.length <= 0 || arguments[0] === undefined ? 'double' : arguments[0];\n\t\n\t      this.connector = this.factory.StaveConnector({\n\t        top_stave: this.parts[0].stave,\n\t        bottom_stave: this.parts[this.parts.length - 1].stave,\n\t        type: type\n\t      });\n\t      return this.connector;\n\t    }\n\t  }, {\n\t    key: 'addStave',\n\t    value: function addStave(params) {\n\t      var _this2 = this;\n\t\n\t      params = setDefaults(params, {\n\t        stave: null,\n\t        voices: [],\n\t        spaceAbove: 0, // stave spaces\n\t        spaceBelow: 0, // stave spaces\n\t        debugNoteMetrics: false,\n\t        options: {}\n\t      });\n\t\n\t      if (!params.stave) {\n\t        var options = { left_bar: false };\n\t        params.stave = this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: options });\n\t      }\n\t\n\t      params.voices.forEach(function (voice) {\n\t        return voice.setContext(_this2.context).setStave(params.stave);\n\t      });\n\t      this.parts.push(params);\n\t      return params.stave;\n\t    }\n\t  }, {\n\t    key: 'format',\n\t    value: function format() {\n\t      var _this3 = this;\n\t\n\t      var formatter = new _formatter.Formatter();\n\t      this.formatter = formatter;\n\t\n\t      var y = this.options.y;\n\t      var startX = 0;\n\t      var allVoices = [];\n\t      var debugNoteMetricsYs = [];\n\t\n\t      // Join the voices for each stave.\n\t      this.parts.forEach(function (part) {\n\t        y = y + part.stave.space(part.spaceAbove);\n\t        part.stave.setY(y);\n\t        formatter.joinVoices(part.voices);\n\t        y = y + part.stave.space(part.spaceBelow);\n\t        y = y + part.stave.space(_this3.options.spaceBetweenStaves);\n\t        if (part.debugNoteMetrics) {\n\t          debugNoteMetricsYs.push({ y: y, voice: part.voices[0] });\n\t          y += 15;\n\t        }\n\t        allVoices = allVoices.concat(part.voices);\n\t\n\t        startX = Math.max(startX, part.stave.getNoteStartX());\n\t      });\n\t\n\t      // Update the start position of all staves.\n\t      this.parts.forEach(function (part) {\n\t        return part.stave.setNoteStartX(startX);\n\t      });\n\t      var justifyWidth = this.options.width - (startX - this.options.x) - _note.Note.STAVEPADDING;\n\t      formatter.format(allVoices, justifyWidth);\n\t\n\t      for (var i = 0; i < this.options.formatIterations; i++) {\n\t        formatter.tune();\n\t      }\n\t\n\t      this.startX = startX;\n\t      this.debugNoteMetricsYs = debugNoteMetricsYs;\n\t      this.lastY = y;\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      // Render debugging information, if requested.\n\t      var ctx = this.checkContext();\n\t      this.setRendered();\n\t\n\t      if (this.options.debugFormatter) {\n\t        _formatter.Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n\t      }\n\t\n\t      this.debugNoteMetricsYs.forEach(function (d) {\n\t        d.voice.getTickables().forEach(function (note) {\n\t          return _note.Note.plotMetrics(ctx, note, d.y);\n\t        });\n\t      });\n\t    }\n\t  }]);\n\n\t  return System;\n\t}(_element.Element);\n\n/***/ },\n/* 76 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Factory = exports.X = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t// @author Mohit Cheppudira\n\t//\n\t// ## Description\n\t//\n\t// This file implements a high level API around VexFlow. It will eventually\n\t// become the canonical way to use VexFlow.\n\t//\n\t// *This API is currently DRAFT*\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _accidental = __webpack_require__(29);\n\t\n\tvar _articulation = __webpack_require__(37);\n\t\n\tvar _annotation = __webpack_require__(40);\n\t\n\tvar _formatter = __webpack_require__(14);\n\t\n\tvar _frethandfinger = __webpack_require__(28);\n\t\n\tvar _textdynamics = __webpack_require__(67);\n\t\n\tvar _modifiercontext = __webpack_require__(27);\n\t\n\tvar _renderer = __webpack_require__(10);\n\t\n\tvar _stave = __webpack_require__(43);\n\t\n\tvar _stavetie = __webpack_require__(33);\n\t\n\tvar _stavenote = __webpack_require__(20);\n\t\n\tvar _staveconnector = __webpack_require__(19);\n\t\n\tvar _system = __webpack_require__(75);\n\t\n\tvar _tickcontext = __webpack_require__(39);\n\t\n\tvar _tuplet = __webpack_require__(16);\n\t\n\tvar _voice = __webpack_require__(18);\n\t\n\tvar _beam = __webpack_require__(15);\n\t\n\tvar _curve = __webpack_require__(66);\n\t\n\tvar _gracenote = __webpack_require__(61);\n\t\n\tvar _gracenotegroup = __webpack_require__(32);\n\t\n\tvar _easyscore = __webpack_require__(77);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (Factory.DEBUG) _vex.Vex.L('Vex.Flow.Factory', args);\n\t}\n\t\n\tvar X = exports.X = _vex.Vex.MakeException('FactoryError');\n\t\n\tfunction setDefaults() {\n\t  var params = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t  var defaults = arguments[1];\n\t\n\t  var default_options = defaults.options;\n\t  params = _extends(defaults, params);\n\t  params.options = _extends(default_options, params.options);\n\t  return params;\n\t}\n\t\n\tvar Factory = exports.Factory = function () {\n\t  function Factory(options) {\n\t    _classCallCheck(this, Factory);\n\t\n\t    L('New factory: ', options);\n\t    var defaults = {\n\t      stave: {\n\t        space: 10\n\t      },\n\t      renderer: {\n\t        context: null,\n\t        selector: '',\n\t        backend: _renderer.Renderer.Backends.SVG,\n\t        width: 500,\n\t        height: 200,\n\t        background: '#FFF'\n\t      },\n\t      font: {\n\t        face: 'Arial',\n\t        point: 10,\n\t        style: ''\n\t      }\n\t    };\n\t\n\t    this.options = defaults;\n\t    this.setOptions(options);\n\t  }\n\t\n\t  _createClass(Factory, [{\n\t    key: 'reset',\n\t    value: function reset() {\n\t      this.renderQ = [];\n\t      this.systems = [];\n\t      this.staves = [];\n\t      this.voices = [];\n\t      this.stave = null; // current stave\n\t    }\n\t  }, {\n\t    key: 'getOptions',\n\t    value: function getOptions() {\n\t      return this.options;\n\t    }\n\t  }, {\n\t    key: 'setOptions',\n\t    value: function setOptions(options) {\n\t      var _arr = ['stave', 'renderer', 'font'];\n\t\n\t      for (var _i = 0; _i < _arr.length; _i++) {\n\t        var key = _arr[_i];\n\t        _extends(this.options[key], options[key]);\n\t      }\n\t      if (this.options.renderer.selector !== null || this.options.renderer.context) {\n\t        this.initRenderer();\n\t      }\n\t\n\t      this.reset();\n\t    }\n\t  }, {\n\t    key: 'initRenderer',\n\t    value: function initRenderer() {\n\t      var _options$renderer = this.options.renderer;\n\t      var selector = _options$renderer.selector;\n\t      var backend = _options$renderer.backend;\n\t      var width = _options$renderer.width;\n\t      var height = _options$renderer.height;\n\t      var background = _options$renderer.background;\n\t\n\t      if (selector === '') {\n\t        throw new X('HTML DOM element not set in Factory');\n\t      }\n\t\n\t      this.context = _renderer.Renderer.buildContext(selector, backend, width, height, background);\n\t    }\n\t  }, {\n\t    key: 'getContext',\n\t    value: function getContext() {\n\t      return this.context;\n\t    }\n\t  }, {\n\t    key: 'setContext',\n\t    value: function setContext(context) {\n\t      this.context = context;return this;\n\t    }\n\t  }, {\n\t    key: 'getStave',\n\t    value: function getStave() {\n\t      return this.stave;\n\t    }\n\t\n\t    // Returns pixels from current stave spacing.\n\t\n\t  }, {\n\t    key: 'space',\n\t    value: function space(spacing) {\n\t      return this.options.stave.space * spacing;\n\t    }\n\t  }, {\n\t    key: 'Stave',\n\t    value: function Stave(params) {\n\t      params = setDefaults(params, {\n\t        x: 0,\n\t        y: 0,\n\t        width: this.options.renderer.width - this.space(1),\n\t        options: {\n\t          spacing_between_lines_px: this.options.stave.space\n\t        }\n\t      });\n\t\n\t      var stave = new _stave.Stave(params.x, params.y, params.width, params.options);\n\t      this.staves.push(stave);\n\t      stave.setContext(this.context);\n\t      this.stave = stave;\n\t      return stave;\n\t    }\n\t  }, {\n\t    key: 'StaveNote',\n\t    value: function StaveNote(noteStruct) {\n\t      var note = new _stavenote.StaveNote(noteStruct);\n\t      if (this.stave) note.setStave(this.stave);\n\t      note.setContext(this.context);\n\t      this.renderQ.push(note);\n\t      return note;\n\t    }\n\t  }, {\n\t    key: 'GraceNote',\n\t    value: function GraceNote(noteStruct) {\n\t      var note = new _gracenote.GraceNote(noteStruct);\n\t      if (this.stave) note.setStave(this.stave);\n\t      note.setContext(this.context);\n\t      return note;\n\t    }\n\t  }, {\n\t    key: 'GraceNoteGroup',\n\t    value: function GraceNoteGroup(params) {\n\t      var group = new _gracenotegroup.GraceNoteGroup(params.notes, params.slur);\n\t      group.setContext(this.context);\n\t      return group;\n\t    }\n\t  }, {\n\t    key: 'Accidental',\n\t    value: function Accidental(params) {\n\t      params = setDefaults(params, {\n\t        type: null,\n\t        options: {}\n\t      });\n\t\n\t      var accid = new _accidental.Accidental(params.type);\n\t      accid.setContext(this.context);\n\t      return accid;\n\t    }\n\t  }, {\n\t    key: 'Annotation',\n\t    value: function Annotation(params) {\n\t      params = setDefaults(params, {\n\t        text: 'p',\n\t        vJustify: 'below',\n\t        hJustify: 'center',\n\t        fontFamily: 'Times',\n\t        fontSize: 14,\n\t        fontWeight: 'bold italic',\n\t        options: {}\n\t      });\n\t\n\t      var annotation = new _annotation.Annotation(params.text);\n\t      annotation.setJustification(params.hJustify);\n\t      annotation.setVerticalJustification(params.vJustify);\n\t      annotation.setFont(params.fontFamily, params.fontSize, params.fontWeight);\n\t      annotation.setContext(this.context);\n\t      return annotation;\n\t    }\n\t  }, {\n\t    key: 'Articulation',\n\t    value: function Articulation(params) {\n\t      params = setDefaults(params, {\n\t        type: 'a.',\n\t        position: 'above',\n\t        options: {}\n\t      });\n\t\n\t      var articulation = new _articulation.Articulation(params.type);\n\t      articulation.setPosition(params.position);\n\t      articulation.setContext(this.context);\n\t      return articulation;\n\t    }\n\t  }, {\n\t    key: 'TextDynamics',\n\t    value: function TextDynamics(params) {\n\t      params = setDefaults(params, {\n\t        text: 'p',\n\t        duration: 'q',\n\t        dots: 0,\n\t        line: 0,\n\t        options: {}\n\t      });\n\t\n\t      var text = new _textdynamics.TextDynamics({\n\t        text: params.text,\n\t        line: params.line,\n\t        duration: params.duration,\n\t        dots: params.dots\n\t      });\n\t      text.setContext(this.context);\n\t      return text;\n\t    }\n\t  }, {\n\t    key: 'Fingering',\n\t    value: function Fingering(params) {\n\t      params = setDefaults(params, {\n\t        number: '0',\n\t        position: 'left',\n\t        options: {}\n\t      });\n\t\n\t      var fingering = new _frethandfinger.FretHandFinger(params.number);\n\t      fingering.setPosition(params.position);\n\t      fingering.setContext(this.context);\n\t      return fingering;\n\t    }\n\t  }, {\n\t    key: 'TickContext',\n\t    value: function TickContext() {\n\t      return new _tickcontext.TickContext().setContext(this.context);\n\t    }\n\t  }, {\n\t    key: 'ModifierContext',\n\t    value: function ModifierContext() {\n\t      return new _modifiercontext.ModifierContext();\n\t    }\n\t  }, {\n\t    key: 'Voice',\n\t    value: function Voice(params) {\n\t      params = setDefaults(params, {\n\t        time: '4/4',\n\t        options: {}\n\t      });\n\t      var voice = new _voice.Voice(params.time);\n\t      this.voices.push(voice);\n\t      return voice;\n\t    }\n\t  }, {\n\t    key: 'StaveConnector',\n\t    value: function StaveConnector(params) {\n\t      params = setDefaults(params, {\n\t        top_stave: null,\n\t        bottom_stave: null,\n\t        type: 'double',\n\t        options: {}\n\t      });\n\t      var connector = new _staveconnector.StaveConnector(params.top_stave, params.bottom_stave);\n\t      connector.setType(params.type).setContext(this.context);\n\t      this.renderQ.push(connector);\n\t      return connector;\n\t    }\n\t  }, {\n\t    key: 'Formatter',\n\t    value: function Formatter() {\n\t      return new _formatter.Formatter();\n\t    }\n\t  }, {\n\t    key: 'Tuplet',\n\t    value: function Tuplet(params) {\n\t      params = setDefaults(params, {\n\t        notes: [],\n\t        options: {}\n\t      });\n\t\n\t      var tuplet = new _tuplet.Tuplet(params.notes, params.options).setContext(this.context);\n\t      this.renderQ.push(tuplet);\n\t      return tuplet;\n\t    }\n\t  }, {\n\t    key: 'Beam',\n\t    value: function Beam(params) {\n\t      params = setDefaults(params, {\n\t        notes: [],\n\t        options: {\n\t          autoStem: false\n\t        }\n\t      });\n\t\n\t      var beam = new _beam.Beam(params.notes, params.options.autoStem).setContext(this.context);\n\t      this.renderQ.push(beam);\n\t      return beam;\n\t    }\n\t  }, {\n\t    key: 'Curve',\n\t    value: function Curve(params) {\n\t      params = setDefaults(params, {\n\t        from: null,\n\t        to: null,\n\t        options: {}\n\t      });\n\t\n\t      var curve = new _curve.Curve(params.from, params.to, params.options).setContext(this.context);\n\t      this.renderQ.push(curve);\n\t      return curve;\n\t    }\n\t  }, {\n\t    key: 'StaveTie',\n\t    value: function StaveTie(params) {\n\t      params = setDefaults(params, {\n\t        from: null,\n\t        to: null,\n\t        first_indices: [0],\n\t        last_indices: [0],\n\t        text: null,\n\t        options: {}\n\t      });\n\t\n\t      var tie = new _stavetie.StaveTie({\n\t        first_note: params.from,\n\t        last_note: params.to,\n\t        first_indices: params.first_indices,\n\t        last_indices: params.last_indices\n\t      }, params.text).setContext(this.context);\n\t      this.renderQ.push(tie);\n\t      return tie;\n\t    }\n\t  }, {\n\t    key: 'System',\n\t    value: function System() {\n\t      var params = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t      params.factory = this;\n\t      var system = new _system.System(params).setContext(this.context);\n\t      this.systems.push(system);\n\t      return system;\n\t    }\n\t  }, {\n\t    key: 'EasyScore',\n\t    value: function EasyScore() {\n\t      var params = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t      params.factory = this;\n\t      return new _easyscore.EasyScore(params);\n\t    }\n\t  }, {\n\t    key: 'draw',\n\t    value: function draw() {\n\t      var _this = this;\n\t\n\t      this.systems.forEach(function (i) {\n\t        return i.setContext(_this.context).format();\n\t      });\n\t      this.staves.forEach(function (i) {\n\t        return i.setContext(_this.context).draw();\n\t      });\n\t      this.voices.forEach(function (i) {\n\t        return i.setContext(_this.context).draw();\n\t      });\n\t      this.renderQ.forEach(function (i) {\n\t        if (!i.isRendered()) i.setContext(_this.context).draw();\n\t      });\n\t      this.systems.forEach(function (i) {\n\t        return i.setContext(_this.context).draw();\n\t      });\n\t      this.reset();\n\t    }\n\t  }], [{\n\t    key: 'newFromSelector',\n\t    value: function newFromSelector(selector) {\n\t      var width = arguments.length <= 1 || arguments[1] === undefined ? 500 : arguments[1];\n\t      var height = arguments.length <= 2 || arguments[2] === undefined ? 200 : arguments[2];\n\t\n\t      return new Factory({ renderer: { selector: selector, width: width, height: height } });\n\t    }\n\t  }]);\n\n\t  return Factory;\n\t}();\n\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.EasyScore = exports.X = undefined;\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// This class implements a parser for a simple language to generate\n\t// VexFlow objects.\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tvar _stavenote = __webpack_require__(20);\n\t\n\tvar _parser = __webpack_require__(78);\n\t\n\tvar _articulation = __webpack_require__(37);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (EasyScore.DEBUG) _vex.Vex.L('Vex.Flow.EasyScore', args);\n\t}\n\t\n\tvar X = exports.X = _vex.Vex.MakeException('EasyScoreError');\n\t\n\tvar Grammar = function () {\n\t  function Grammar(builder) {\n\t    _classCallCheck(this, Grammar);\n\t\n\t    this.builder = builder;\n\t  }\n\t\n\t  _createClass(Grammar, [{\n\t    key: 'begin',\n\t    value: function begin() {\n\t      return this.LINE;\n\t    }\n\t  }, {\n\t    key: 'LINE',\n\t    value: function LINE() {\n\t      return {\n\t        expect: [this.PIECE, this.PIECES, this.EOL]\n\t      };\n\t    }\n\t  }, {\n\t    key: 'PIECE',\n\t    value: function PIECE() {\n\t      var _this = this;\n\t\n\t      return {\n\t        expect: [this.CHORDORNOTE, this.PARAMS],\n\t        run: function run() {\n\t          return _this.builder.commitPiece();\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: 'PIECES',\n\t    value: function PIECES() {\n\t      return {\n\t        expect: [this.COMMA, this.PIECE],\n\t        zeroOrMore: true\n\t      };\n\t    }\n\t  }, {\n\t    key: 'PARAMS',\n\t    value: function PARAMS() {\n\t      return {\n\t        expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS]\n\t      };\n\t    }\n\t  }, {\n\t    key: 'CHORDORNOTE',\n\t    value: function CHORDORNOTE() {\n\t      return {\n\t        expect: [this.CHORD, this.SINGLENOTE],\n\t        or: true\n\t      };\n\t    }\n\t  }, {\n\t    key: 'CHORD',\n\t    value: function CHORD() {\n\t      var _this2 = this;\n\t\n\t      return {\n\t        expect: [this.LPAREN, this.NOTES, this.RPAREN],\n\t        run: function run(state) {\n\t          return _this2.builder.addChord(state.matches[1]);\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: 'NOTES',\n\t    value: function NOTES() {\n\t      return {\n\t        expect: [this.NOTE],\n\t        oneOrMore: true\n\t      };\n\t    }\n\t  }, {\n\t    key: 'NOTE',\n\t    value: function NOTE() {\n\t      return {\n\t        expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE]\n\t      };\n\t    }\n\t  }, {\n\t    key: 'SINGLENOTE',\n\t    value: function SINGLENOTE() {\n\t      var _this3 = this;\n\t\n\t      return {\n\t        expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n\t        run: function run(state) {\n\t          return _this3.builder.addSingleNote(state.matches[0], state.matches[1], state.matches[2]);\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: 'ACCIDENTAL',\n\t    value: function ACCIDENTAL() {\n\t      return {\n\t        expect: [this.ACCIDENTALS],\n\t        maybe: true\n\t      };\n\t    }\n\t  }, {\n\t    key: 'DOTS',\n\t    value: function DOTS() {\n\t      var _this4 = this;\n\t\n\t      return {\n\t        expect: [this.DOT],\n\t        zeroOrMore: true,\n\t        run: function run(state) {\n\t          return _this4.builder.setNoteDots(state.matches[0]);\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: 'TYPE',\n\t    value: function TYPE() {\n\t      var _this5 = this;\n\t\n\t      return {\n\t        expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n\t        maybe: true,\n\t        run: function run(state) {\n\t          return _this5.builder.setNoteType(state.matches[2]);\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: 'DURATION',\n\t    value: function DURATION() {\n\t      var _this6 = this;\n\t\n\t      return {\n\t        expect: [this.SLASH, this.DURATIONS],\n\t        maybe: true,\n\t        run: function run(state) {\n\t          return _this6.builder.setNoteDuration(state.matches[1]);\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: 'OPTS',\n\t    value: function OPTS() {\n\t      return {\n\t        expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n\t        maybe: true\n\t      };\n\t    }\n\t  }, {\n\t    key: 'KEYVALS',\n\t    value: function KEYVALS() {\n\t      return {\n\t        expect: [this.COMMA, this.KEYVAL],\n\t        zeroOrMore: true\n\t      };\n\t    }\n\t  }, {\n\t    key: 'KEYVAL',\n\t    value: function KEYVAL() {\n\t      var _this7 = this;\n\t\n\t      var unquote = function unquote(str) {\n\t        return str.slice(1, -1);\n\t      };\n\t\n\t      return {\n\t        expect: [this.KEY, this.EQUALS, this.VAL],\n\t        run: function run(state) {\n\t          return _this7.builder.addNoteOption(state.matches[0], unquote(state.matches[2]));\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: 'VAL',\n\t    value: function VAL() {\n\t      return {\n\t        expect: [this.SVAL, this.DVAL],\n\t        or: true\n\t      };\n\t    }\n\t  }, {\n\t    key: 'KEY',\n\t    value: function KEY() {\n\t      return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n\t    }\n\t  }, {\n\t    key: 'DVAL',\n\t    value: function DVAL() {\n\t      return { token: '[\"][^\"]*[\"]' };\n\t    }\n\t  }, {\n\t    key: 'SVAL',\n\t    value: function SVAL() {\n\t      return { token: \"['][^']*[']\" };\n\t    }\n\t  }, {\n\t    key: 'NOTENAME',\n\t    value: function NOTENAME() {\n\t      return { token: '[a-gA-G]' };\n\t    }\n\t  }, {\n\t    key: 'OCTAVE',\n\t    value: function OCTAVE() {\n\t      return { token: '[0-9]+' };\n\t    }\n\t  }, {\n\t    key: 'ACCIDENTALS',\n\t    value: function ACCIDENTALS() {\n\t      return { token: 'bbs|bb|bss|bs|b|db|d|##|#|n|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+' };\n\t    }\n\t  }, {\n\t    key: 'DURATIONS',\n\t    value: function DURATIONS() {\n\t      return { token: '[0-9whq]+' };\n\t    }\n\t  }, {\n\t    key: 'TYPES',\n\t    value: function TYPES() {\n\t      return { token: '[rRsSxX]' };\n\t    }\n\t  }, {\n\t    key: 'LPAREN',\n\t    value: function LPAREN() {\n\t      return { token: '[(]' };\n\t    }\n\t  }, {\n\t    key: 'RPAREN',\n\t    value: function RPAREN() {\n\t      return { token: '[)]' };\n\t    }\n\t  }, {\n\t    key: 'COMMA',\n\t    value: function COMMA() {\n\t      return { token: '[,]' };\n\t    }\n\t  }, {\n\t    key: 'DOT',\n\t    value: function DOT() {\n\t      return { token: '[.]' };\n\t    }\n\t  }, {\n\t    key: 'SLASH',\n\t    value: function SLASH() {\n\t      return { token: '[/]' };\n\t    }\n\t  }, {\n\t    key: 'MAYBESLASH',\n\t    value: function MAYBESLASH() {\n\t      return { token: '[/]?' };\n\t    }\n\t  }, {\n\t    key: 'EQUALS',\n\t    value: function EQUALS() {\n\t      return { token: '[=]' };\n\t    }\n\t  }, {\n\t    key: 'LBRACKET',\n\t    value: function LBRACKET() {\n\t      return { token: '\\\\[' };\n\t    }\n\t  }, {\n\t    key: 'RBRACKET',\n\t    value: function RBRACKET() {\n\t      return { token: '\\\\]' };\n\t    }\n\t  }, {\n\t    key: 'EOL',\n\t    value: function EOL() {\n\t      return { token: '$' };\n\t    }\n\t  }]);\n\t\n\t  return Grammar;\n\t}();\n\t\n\tvar Builder = function () {\n\t  function Builder(factory) {\n\t    _classCallCheck(this, Builder);\n\t\n\t    this.factory = factory;\n\t    this.commitHooks = [];\n\t    this.reset();\n\t  }\n\t\n\t  _createClass(Builder, [{\n\t    key: 'reset',\n\t    value: function reset() {\n\t      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t      this.options = {\n\t        stem: 'auto',\n\t        clef: 'treble'\n\t      };\n\t      this.elements = {\n\t        notes: [],\n\t        accidentals: []\n\t      };\n\t      this.rollingDuration = '8';\n\t      this.resetPiece();\n\t      _extends(this.options, options);\n\t    }\n\t  }, {\n\t    key: 'getFactory',\n\t    value: function getFactory() {\n\t      return this.factory;\n\t    }\n\t  }, {\n\t    key: 'getElements',\n\t    value: function getElements() {\n\t      return this.elements;\n\t    }\n\t  }, {\n\t    key: 'addCommitHook',\n\t    value: function addCommitHook(commitHook) {\n\t      this.commitHooks.push(commitHook);\n\t    }\n\t  }, {\n\t    key: 'resetPiece',\n\t    value: function resetPiece() {\n\t      L('resetPiece');\n\t      this.piece = {\n\t        chord: [],\n\t        duration: this.rollingDuration,\n\t        dots: 0,\n\t        type: undefined,\n\t        options: {}\n\t      };\n\t    }\n\t  }, {\n\t    key: 'setNoteDots',\n\t    value: function setNoteDots(dots) {\n\t      L('setNoteDots:', dots);\n\t      if (dots) this.piece.dots = dots.length;\n\t    }\n\t  }, {\n\t    key: 'setNoteDuration',\n\t    value: function setNoteDuration(duration) {\n\t      L('setNoteDuration:', duration);\n\t      this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n\t    }\n\t  }, {\n\t    key: 'setNoteType',\n\t    value: function setNoteType(type) {\n\t      L('setNoteType:', type);\n\t      if (type) this.piece.type = type;\n\t    }\n\t  }, {\n\t    key: 'addNoteOption',\n\t    value: function addNoteOption(key, value) {\n\t      L('addNoteOption: key:', key, 'value:', value);\n\t      this.piece.options[key] = value;\n\t    }\n\t  }, {\n\t    key: 'addNote',\n\t    value: function addNote(key, accid, octave) {\n\t      L('addNote:', key, accid, octave);\n\t      this.piece.chord.push({ key: key, accid: accid, octave: octave });\n\t    }\n\t  }, {\n\t    key: 'addSingleNote',\n\t    value: function addSingleNote(key, accid, octave) {\n\t      L('addSingleNote:', key, accid, octave);\n\t      this.addNote(key, accid, octave);\n\t    }\n\t  }, {\n\t    key: 'addChord',\n\t    value: function addChord(notes) {\n\t      var _this8 = this;\n\t\n\t      L('startChord');\n\t      if (_typeof(notes[0]) !== 'object') {\n\t        this.addSingleNote(notes[0]);\n\t      } else {\n\t        notes.forEach(function (n) {\n\t          if (n) _this8.addNote.apply(_this8, _toConsumableArray(n));\n\t        });\n\t      }\n\t      L('endChord');\n\t    }\n\t  }, {\n\t    key: 'commitPiece',\n\t    value: function commitPiece() {\n\t      var _this9 = this;\n\t\n\t      L('commitPiece');\n\t      var factory = this.factory;\n\t\n\t\n\t      if (!factory) return;\n\t\n\t      var options = _extends({}, this.options, this.piece.options);\n\t      var stem = options.stem;\n\t      var clef = options.clef;\n\t\n\t      var autoStem = stem.toLowerCase() === 'auto';\n\t      var stemDirection = !autoStem && stem.toLowerCase() === 'up' ? _stavenote.StaveNote.STEM_UP : _stavenote.StaveNote.STEM_DOWN;\n\t\n\t      // Build StaveNotes.\n\t      var _piece = this.piece;\n\t      var chord = _piece.chord;\n\t      var duration = _piece.duration;\n\t      var dots = _piece.dots;\n\t      var type = _piece.type;\n\t\n\t      var keys = chord.map(function (note) {\n\t        return note.key + '/' + note.octave;\n\t      });\n\t      var note = factory.StaveNote({\n\t        keys: keys,\n\t        duration: duration,\n\t        dots: dots,\n\t        type: type,\n\t        clef: clef,\n\t        auto_stem: autoStem\n\t      });\n\t      if (!autoStem) note.setStemDirection(stemDirection);\n\t\n\t      // Attach accidentals.\n\t      var accids = chord.map(function (note) {\n\t        return note.accid || null;\n\t      });\n\t      accids.forEach(function (accid, i) {\n\t        if (accid) note.addAccidental(i, factory.Accidental({ type: accid }));\n\t      });\n\t\n\t      // Attach dots.\n\t      for (var i = 0; i < dots; i++) {\n\t        note.addDotToAll();\n\t      }this.commitHooks.forEach(function (fn) {\n\t        return fn(options, note, _this9);\n\t      });\n\t\n\t      this.elements.notes.push(note);\n\t      this.elements.accidentals.concat(accids);\n\t      this.resetPiece();\n\t    }\n\t  }]);\n\t\n\t  return Builder;\n\t}();\n\t\n\tfunction setId(_ref, note) {\n\t  var id = _ref.id;\n\t\n\t  if (id === undefined) return;\n\t\n\t  note.setAttribute('id', id);\n\t}\n\t\n\tfunction setClass(options, note) {\n\t  if (!options.class) return;\n\t\n\t  var commaSeparatedRegex = /\\s*,\\s*/;\n\t\n\t  options.class.split(commaSeparatedRegex).forEach(function (className) {\n\t    return note.addClass(className);\n\t  });\n\t}\n\t\n\tvar EasyScore = exports.EasyScore = function () {\n\t  function EasyScore() {\n\t    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    _classCallCheck(this, EasyScore);\n\t\n\t    this.setOptions(options);\n\t    this.defaults = {\n\t      clef: 'treble',\n\t      time: '4/4',\n\t      stem: 'auto'\n\t    };\n\t  }\n\t\n\t  _createClass(EasyScore, [{\n\t    key: 'set',\n\t    value: function set(defaults) {\n\t      _extends(this.defaults, defaults);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setOptions',\n\t    value: function setOptions(options) {\n\t      var _this10 = this;\n\t\n\t      this.options = _extends({\n\t        factory: null,\n\t        builder: null,\n\t        commitHooks: [setId, setClass, _articulation.Articulation.easyScoreHook],\n\t        throwOnError: false\n\t      }, options);\n\t\n\t      this.factory = this.options.factory;\n\t      this.builder = this.options.builder || new Builder(this.factory);\n\t      this.grammar = new Grammar(this.builder);\n\t      this.parser = new _parser.Parser(this.grammar);\n\t      this.options.commitHooks.forEach(function (commitHook) {\n\t        return _this10.addCommitHook(commitHook);\n\t      });\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'setContext',\n\t    value: function setContext(context) {\n\t      if (this.factory) this.factory.setContext(context);\n\t      return this;\n\t    }\n\t  }, {\n\t    key: 'parse',\n\t    value: function parse(line) {\n\t      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t      this.builder.reset(options);\n\t      var result = this.parser.parse(line);\n\t      if (!result.success && this.options.throwOnError) {\n\t        throw new X('Error parsing line: ' + line, result);\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: 'beam',\n\t    value: function beam(notes) {\n\t      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t      this.factory.Beam({ notes: notes, options: options });\n\t      return notes;\n\t    }\n\t  }, {\n\t    key: 'tuplet',\n\t    value: function tuplet(notes) {\n\t      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t      this.factory.Tuplet({ notes: notes, options: options });\n\t      return notes;\n\t    }\n\t  }, {\n\t    key: 'notes',\n\t    value: function notes(line) {\n\t      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t      options = _extends({ clef: this.defaults.clef, stem: this.defaults.stem }, options);\n\t      this.parse(line, options);\n\t      return this.builder.getElements().notes;\n\t    }\n\t  }, {\n\t    key: 'voice',\n\t    value: function voice(notes, voiceOptions) {\n\t      voiceOptions = _extends({ time: this.defaults.time }, voiceOptions);\n\t      return this.factory.Voice(voiceOptions).addTickables(notes);\n\t    }\n\t  }, {\n\t    key: 'addCommitHook',\n\t    value: function addCommitHook(commitHook) {\n\t      return this.builder.addCommitHook(commitHook);\n\t    }\n\t  }]);\n\n\t  return EasyScore;\n\t}();\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Parser = exports.X = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\t//\n\t// A generic text parsing class for VexFlow.\n\t\n\tvar _vex = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\n\tfunction L() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (Parser.DEBUG) _vex.Vex.L('Vex.Flow.Parser', args);\n\t}\n\t\n\tvar X = exports.X = _vex.Vex.MakeException('ParserError');\n\t\n\t// Converts parser results into an easy to reference list that can be\n\t// used in triggers.\n\tfunction flattenMatches(results) {\n\t  if (results.matchedString !== undefined) return results.matchedString;\n\t  if (results.results) return flattenMatches(results.results);\n\t  if (results.length === 1) return flattenMatches(results[0]);\n\t  if (results.length === 0) return null;\n\t  return results.map(flattenMatches);\n\t}\n\t\n\t// This is the base parser class. Given an arbitrary context-free grammar, it\n\t// can parse any line and execute code when specific rules are met (e.g.,\n\t// when a string is terminated.)\n\t\n\tvar Parser = exports.Parser = function () {\n\t  // For an example of a simple grammar, take a look at tests/parser_tests.js or\n\t  // the EasyScore grammar in easyscore.js.\n\t  function Parser(grammar) {\n\t    _classCallCheck(this, Parser);\n\t\n\t    this.grammar = grammar;\n\t  }\n\t\n\t  // Parse `line` using current grammar. Returns {success: true} if the\n\t  // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n\t  // where `errorPos` is the location of the error in the string.\n\t\n\t\n\t  _createClass(Parser, [{\n\t    key: 'parse',\n\t    value: function parse(line) {\n\t      this.line = line;\n\t      this.pos = 0;\n\t      this.errorPos = -1;\n\t      var results = this.expect(this.grammar.begin());\n\t      results.errorPos = this.errorPos;\n\t      return results;\n\t    }\n\t  }, {\n\t    key: 'matchFail',\n\t    value: function matchFail(returnPos) {\n\t      if (this.errorPos === -1) this.errorPos = this.pos;\n\t      this.pos = returnPos;\n\t    }\n\t  }, {\n\t    key: 'matchSuccess',\n\t    value: function matchSuccess() {\n\t      this.errorPos = -1;\n\t    }\n\t\n\t    // Look for `token` in this.line[this.pos], and return success\n\t    // if one is found. `token` is specified as a regular expression.\n\t\n\t  }, {\n\t    key: 'matchToken',\n\t    value: function matchToken(token) {\n\t      var noSpace = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\t\n\t      var regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n\t      var workingLine = this.line.slice(this.pos);\n\t      var result = workingLine.match(regexp);\n\t      if (result !== null) {\n\t        return {\n\t          success: true,\n\t          matchedString: result[2],\n\t          incrementPos: result[1].length,\n\t          pos: this.pos\n\t        };\n\t      } else {\n\t        return {\n\t          success: false,\n\t          pos: this.pos\n\t        };\n\t      }\n\t    }\n\t\n\t    // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n\t    // set, then return success even if the token is not found, but reset\n\t    // the position before exiting.\n\t\n\t  }, {\n\t    key: 'expectOne',\n\t    value: function expectOne(rule) {\n\t      var maybe = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\t\n\t      var results = [];\n\t      var pos = this.pos;\n\t\n\t      var allMatches = true;\n\t      var oneMatch = false;\n\t      maybe = maybe === true || rule.maybe === true;\n\t\n\t      // Execute all sub rules in sequence.\n\t      for (var i = 0; i < rule.expect.length; i++) {\n\t        var next = rule.expect[i];\n\t        var localPos = this.pos;\n\t        var result = this.expect(next);\n\t\n\t        // If `rule.or` is set, then return success if any one\n\t        // of the subrules match, else all subrules must match.\n\t        if (result.success) {\n\t          results.push(result);\n\t          oneMatch = true;\n\t          if (rule.or) break;\n\t        } else {\n\t          allMatches = false;\n\t          if (!rule.or) {\n\t            this.pos = localPos;\n\t            break;\n\t          }\n\t        }\n\t      }\n\t\n\t      var gotOne = rule.or && oneMatch || allMatches;\n\t      var success = gotOne || maybe === true;\n\t      if (maybe && !gotOne) this.pos = pos;\n\t      if (success) this.matchSuccess();else this.matchFail(pos);\n\t      return { success: success, results: results, numMatches: gotOne ? 1 : 0 };\n\t    }\n\t\n\t    // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n\t    // then a failed match is also a success (but the position is reset).\n\t\n\t  }, {\n\t    key: 'expectOneOrMore',\n\t    value: function expectOneOrMore(rule) {\n\t      var maybe = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];\n\t\n\t      var results = [];\n\t      var pos = this.pos;\n\t      var numMatches = 0;\n\t      var more = true;\n\t\n\t      do {\n\t        var result = this.expectOne(rule);\n\t        if (result.success) {\n\t          numMatches++;\n\t          results.push(result.results);\n\t        } else {\n\t          more = false;\n\t        }\n\t      } while (more);\n\t\n\t      var success = numMatches > 0 || maybe === true;\n\t      if (maybe && !(numMatches > 0)) this.pos = pos;\n\t      if (success) this.matchSuccess();else this.matchFail(pos);\n\t      return { success: success, results: results, numMatches: numMatches };\n\t    }\n\t\n\t    // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n\t\n\t  }, {\n\t    key: 'expectZeroOrMore',\n\t    value: function expectZeroOrMore(rule) {\n\t      return this.expectOneOrMore(rule, true);\n\t    }\n\t\n\t    // Execute the rule produced by the provided the `rules` function. This\n\t    // ofloads to one of the above matchers and consolidates the results. It is also\n\t    // responsible for executing any code triggered by the rule (in `rule.run`.)\n\t\n\t  }, {\n\t    key: 'expect',\n\t    value: function expect(rules) {\n\t      L('Evaluating rules:', rules);\n\t      var result = void 0;\n\t      if (!rules) {\n\t        throw new X('Invalid Rule: ' + rules, rules);\n\t      }\n\t\n\t      // Get rule from Grammar class.\n\t      var rule = rules.bind(this.grammar)();\n\t\n\t      if (rule.token) {\n\t        // Base case: parse the regex and throw an error if the\n\t        // line doesn't match.\n\t        result = this.matchToken(rule.token, rule.noSpace === true);\n\t        if (result.success) {\n\t          // Token match! Update position and throw away parsed portion\n\t          // of string.\n\t          this.pos += result.incrementPos;\n\t        }\n\t      } else if (rule.expect) {\n\t        if (rule.oneOrMore) {\n\t          result = this.expectOneOrMore(rule);\n\t        } else if (rule.zeroOrMore) {\n\t          result = this.expectZeroOrMore(rule);\n\t        } else {\n\t          result = this.expectOne(rule);\n\t        }\n\t      } else {\n\t        throw new X('Bad grammar! No `token` or `expect` property', rule);\n\t      }\n\t\n\t      // If there's a trigger attached to this rule, then pull it.\n\t      result.matches = [];\n\t      if (result.results) result.results.forEach(function (r) {\n\t        return result.matches.push(flattenMatches(r));\n\t      });\n\t      if (rule.run && result.success) rule.run(result);\n\t      return result;\n\t    }\n\t  }]);\n\n\t  return Parser;\n\t}();\n\n/***/ }\n/******/ ])\n});\n;\n//# sourceMappingURL=vexflow-debug.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

eval("/*!\n * Vue Material v0.6.3\n * Made with love by Marcos Moura\n * Released under the MIT License.\n */\n!(function(e,t){ true?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.VueMaterial=t():e.VueMaterial=t()})(this,(function(){return (function(e){function t(d){if(n[d])return n[d].exports;var r=n[d]={exports:{},id:d,loaded:!1};return e[d].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p=\"/\",t(0)})({0:function(e,t,n){e.exports=n(77)},1:function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default={props:{mdTheme:String},data:function(){return{closestThemedParent:!1}},methods:{getClosestThemedParent:function(e){return!(!e||!e.$el||0===e._uid)&&(e.mdTheme||e.mdName?e:this.getClosestThemedParent(e.$parent))}},computed:{themeClass:function(){if(this.mdTheme)return\"md-theme-\"+this.mdTheme;var e=this.closestThemedParent.mdTheme;return e||(e=this.closestThemedParent?this.closestThemedParent.mdName:this.$material.currentTheme),\"md-theme-\"+e}},mounted:function(){this.closestThemedParent=this.getClosestThemedParent(this.$parent),this.$material.currentTheme||this.$material.setCurrentTheme(\"default\")}},e.exports=t.default},66:function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var n=function(e,t){var n=document.createElement(\"canvas\");e.onload=function(){var e=0,d=void 0,r=void 0,o=void 0,a=void 0,i=void 0,c=void 0,s=void 0;n.width=this.width,n.height=this.height,d=n.getContext(\"2d\"),d.drawImage(this,0,0),r=d.getImageData(0,0,n.width,n.height),o=r.data;for(var u=0,f=o.length;u<f;u+=4)a=o[u],i=o[u+1],c=o[u+2],s=Math.floor((a+i+c)/3),e+=s;t(Math.floor(e/(this.width*this.height)))}};t.default=n,e.exports=t.default},77:function(e,t,n){\"use strict\";function d(e){return e&&e.__esModule?e:{default:e}}function r(e){e.component(\"md-card\",e.extend(a.default)),e.component(\"md-card-media\",e.extend(c.default)),e.component(\"md-card-media-cover\",e.extend(u.default)),e.component(\"md-card-media-actions\",e.extend(m.default)),e.component(\"md-card-header\",e.extend(p.default)),e.component(\"md-card-header-text\",e.extend(v.default)),e.component(\"md-card-content\",e.extend(_.default)),e.component(\"md-card-actions\",e.extend(E.default)),e.component(\"md-card-area\",e.extend(y.default)),e.component(\"md-card-expand\",e.extend(g.default)),e.material.styles.push(b.default)}Object.defineProperty(t,\"__esModule\",{value:!0}),t.default=r;var o=n(254),a=d(o),i=n(261),c=d(i),s=n(263),u=d(s),f=n(262),m=d(f),l=n(259),p=d(l),h=n(260),v=d(h),R=n(257),_=d(R),x=n(255),E=d(x),T=n(256),y=d(T),C=n(258),g=d(C),M=n(226),b=d(M);e.exports=t.default},116:function(e,t,n){\"use strict\";function d(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(1),o=d(r);t.default={props:{mdWithHover:Boolean},mixins:[o.default],computed:{classes:function(){return{\"md-with-hover\":this.mdWithHover}}}},e.exports=t.default},117:function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default={props:{mdInset:Boolean},computed:{classes:function(){return{\"md-inset\":this.mdInset}}}},e.exports=t.default},118:function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default={methods:{setContentMargin:function(){this.content.style.marginTop=-this.content.offsetHeight+\"px\"},toggle:function(){this.$refs.expand.classList.toggle(\"md-active\")},onWindowResize:function(){window.requestAnimationFrame(this.setContentMargin)}},mounted:function(){var e=this;window.setTimeout((function(){e.trigger=e.$el.querySelector(\"[md-expand-trigger]\"),e.content=e.$el.querySelector(\".md-card-content\"),e.content&&(e.setContentMargin(),e.trigger.addEventListener(\"click\",e.toggle),window.addEventListener(\"resize\",e.onWindowResize))}),200)},destroyed:function(){this.content&&(this.trigger.removeEventListener(\"click\",this.toggle),window.removeEventListener(\"resize\",this.onWindowResize))}},e.exports=t.default},119:function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default={mounted:function(){this.parentClasses=this.$parent.$el.classList,this.parentClasses.contains(\"md-card-header\")&&(this.insideParent=!0,this.parentClasses.add(\"md-card-header-flex\"))},destroyed:function(){this.parentClasses.remove(\"md-card-header-flex\")}},e.exports=t.default},120:function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default={props:{mdRatio:String,mdMedium:Boolean,mdBig:Boolean},computed:{classes:function e(){var e={\"md-16-9\":\"16:9\"===this.mdRatio||\"16/9\"===this.mdRatio,\"md-4-3\":\"4:3\"===this.mdRatio||\"4/3\"===this.mdRatio,\"md-1-1\":\"1:1\"===this.mdRatio||\"1/1\"===this.mdRatio};return(this.mdMedium||this.mdBig)&&(e={\"md-medium\":this.mdMedium,\"md-big\":this.mdBig}),e}}},e.exports=t.default},121:function(e,t,n){\"use strict\";function d(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var r=n(66),o=d(r);t.default={props:{mdTextScrim:Boolean,mdSolid:Boolean},data:function(){return{backdropBg:{}}},computed:{classes:function(){return{\"md-text-scrim\":this.mdTextScrim,\"md-solid\":this.mdSolid}},styles:function(){return{background:this.backdropBg}}},methods:{applyScrimColor:function(e){this.$refs.backdrop&&(this.backdropBg=\"linear-gradient(to bottom, rgba(0, 0, 0, 0) 20%, rgba(0, 0, 0, \"+e/2+\") 66%, rgba(0, 0, 0, \"+e+\") 100%)\")},applySolidColor:function(e){var t=this.$el.querySelector(\".md-card-area\");t&&(t.style.background=\"rgba(0, 0, 0, \"+e+\")\")}},mounted:function(){var e=this,t=this.$el.querySelector(\"img\");t&&(this.mdTextScrim||this.mdSolid)&&(0,o.default)(t,(function(t){var n=256,d=(100*Math.abs(n-t)/n+15)/100;d>=.7&&(d=.7),e.mdTextScrim?e.applyScrimColor(d):e.mdSolid&&e.applySolidColor(d)}))}},e.exports=t.default},207:function(e,t){},226:function(e,t){e.exports=\".THEME_NAME.md-card{background-color:BACKGROUND-COLOR}.THEME_NAME.md-card.md-primary{background-color:PRIMARY-COLOR;color:PRIMARY-CONTRAST}.THEME_NAME.md-card.md-primary .md-card-header .md-icon-button .md-icon,.THEME_NAME.md-card.md-primary .md-card-actions .md-icon-button .md-icon{color:PRIMARY-CONTRAST-0.87}.THEME_NAME.md-card.md-accent{background-color:ACCENT-COLOR;color:ACCENT-CONTRAST}.THEME_NAME.md-card.md-accent .md-card-header .md-icon-button .md-icon,.THEME_NAME.md-card.md-accent .md-card-actions .md-icon-button .md-icon{color:ACCENT-CONTRAST-0.87}.THEME_NAME.md-card.md-warn{background-color:WARN-COLOR;color:WARN-CONTRAST}.THEME_NAME.md-card.md-warn .md-card-header .md-icon-button .md-icon,.THEME_NAME.md-card.md-warn .md-card-actions .md-icon-button .md-icon{color:WARN-CONTRAST-0.87}.THEME_NAME.md-card .md-card-header .md-icon-button:not(.md-primary):not(.md-warn):not(.md-accent) .md-icon,.THEME_NAME.md-card .md-card-actions .md-icon-button:not(.md-primary):not(.md-warn):not(.md-accent) .md-icon{color:BACKGROUND-CONTRAST-0.54}.THEME_NAME.md-card>.md-card-area:after{background-color:BACKGROUND-CONTRAST-0.12}.THEME_NAME.md-card .md-card-media-cover.md-text-scrim .md-backdrop{background:linear-gradient(to bottom, BACKGROUND-CONTRAST-0.0 20%, BACKGROUND-CONTRAST-0.275 66%, BACKGROUND-CONTRAST-0.55 100%)}.THEME_NAME.md-card .md-card-media-cover.md-solid .md-card-area{background-color:BACKGROUND-CONTRAST-0.4}.THEME_NAME.md-card .md-card-expand .md-card-actions{background-color:BACKGROUND-COLOR}\\n\"},254:function(e,t,n){var d,r;n(207),d=n(116);var o=n(340);r=d=d||{},\"object\"!=typeof d.default&&\"function\"!=typeof d.default||(r=d=d.default),\"function\"==typeof r&&(r=r.options),r.render=o.render,r.staticRenderFns=o.staticRenderFns,e.exports=d},255:function(e,t,n){var d,r,o=n(350);r=d=d||{},\"object\"!=typeof d.default&&\"function\"!=typeof d.default||(r=d=d.default),\"function\"==typeof r&&(r=r.options),r.render=o.render,r.staticRenderFns=o.staticRenderFns,e.exports=d},256:function(e,t,n){var d,r;d=n(117);var o=n(332);r=d=d||{},\"object\"!=typeof d.default&&\"function\"!=typeof d.default||(r=d=d.default),\"function\"==typeof r&&(r=r.options),r.render=o.render,r.staticRenderFns=o.staticRenderFns,e.exports=d},257:function(e,t,n){var d,r,o=n(314);r=d=d||{},\"object\"!=typeof d.default&&\"function\"!=typeof d.default||(r=d=d.default),\"function\"==typeof r&&(r=r.options),r.render=o.render,r.staticRenderFns=o.staticRenderFns,e.exports=d},258:function(e,t,n){var d,r;d=n(118);var o=n(365);r=d=d||{},\"object\"!=typeof d.default&&\"function\"!=typeof d.default||(r=d=d.default),\"function\"==typeof r&&(r=r.options),r.render=o.render,r.staticRenderFns=o.staticRenderFns,e.exports=d},259:function(e,t,n){var d,r,o=n(328);r=d=d||{},\"object\"!=typeof d.default&&\"function\"!=typeof d.default||(r=d=d.default),\"function\"==typeof r&&(r=r.options),r.render=o.render,r.staticRenderFns=o.staticRenderFns,e.exports=d},260:function(e,t,n){var d,r;d=n(119);var o=n(333);r=d=d||{},\"object\"!=typeof d.default&&\"function\"!=typeof d.default||(r=d=d.default),\"function\"==typeof r&&(r=r.options),r.render=o.render,r.staticRenderFns=o.staticRenderFns,e.exports=d},261:function(e,t,n){var d,r;d=n(120);var o=n(345);r=d=d||{},\"object\"!=typeof d.default&&\"function\"!=typeof d.default||(r=d=d.default),\"function\"==typeof r&&(r=r.options),r.render=o.render,r.staticRenderFns=o.staticRenderFns,e.exports=d},262:function(e,t,n){var d,r,o=n(356);r=d=d||{},\"object\"!=typeof d.default&&\"function\"!=typeof d.default||(r=d=d.default),\"function\"==typeof r&&(r=r.options),r.render=o.render,r.staticRenderFns=o.staticRenderFns,e.exports=d},263:function(e,t,n){var d,r;d=n(121);var o=n(320);r=d=d||{},\"object\"!=typeof d.default&&\"function\"!=typeof d.default||(r=d=d.default),\"function\"==typeof r&&(r=r.options),r.render=o.render,r.staticRenderFns=o.staticRenderFns,e.exports=d},314:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"md-card-content\"},[e._t(\"default\")],2)},staticRenderFns:[]}},320:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"md-card-media-cover\",class:e.classes},[e._t(\"default\"),e._v(\" \"),e.mdTextScrim?n(\"div\",{ref:\"backdrop\",staticClass:\"md-card-backdrop\",style:e.styles}):e._e()],2)},staticRenderFns:[]}},328:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"md-card-header\"},[e._t(\"default\")],2)},staticRenderFns:[]}},332:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"md-card-area\",class:e.classes},[e._t(\"default\")],2)},staticRenderFns:[]}},333:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"md-card-header-text\"},[e._t(\"default\")],2)},staticRenderFns:[]}},340:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"md-card\",class:[e.themeClass,e.classes]},[e._t(\"default\")],2)},staticRenderFns:[]}},345:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"md-card-media\",class:e.classes},[e._t(\"default\")],2)},staticRenderFns:[]}},350:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"md-card-actions\"},[e._t(\"default\")],2)},staticRenderFns:[]}},356:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{staticClass:\"md-card-media-actions\"},[e._t(\"default\")],2)},staticRenderFns:[]}},365:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"div\",{ref:\"expand\",staticClass:\"md-card-expand\"},[e._t(\"default\")],2)},staticRenderFns:[]}}})}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

eval("/*!\n * Vue Material v0.6.3\n * Made with love by Marcos Moura\n * Released under the MIT License.\n */\n!(function(e,t){ true?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.VueMaterial=t():e.VueMaterial=t()})(this,(function(){return (function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return e[r].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p=\"/\",t(0)})({0:function(e,t,n){e.exports=n(107)},2:function(e,t){var n=e.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},4:function(e,t,n){e.exports=!n(11)((function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a}))},5:function(e,t){var n=e.exports={version:\"2.4.0\"};\"number\"==typeof __e&&(__e=n)},6:function(e,t,n){var r=n(10),o=n(29),i=n(28),f=Object.defineProperty;t.f=n(4)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return f(e,t,n)}catch(e){}if(\"get\"in n||\"set\"in n)throw TypeError(\"Accessors not supported!\");return\"value\"in n&&(e[t]=n.value),e}},7:function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},8:function(e,t,n){var r=n(6),o=n(14);e.exports=n(4)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},9:function(e,t){e.exports=function(e){return\"object\"==typeof e?null!==e:\"function\"==typeof e}},10:function(e,t,n){var r=n(9);e.exports=function(e){if(!r(e))throw TypeError(e+\" is not an object!\");return e}},11:function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},12:function(e,t,n){var r=n(35),o=n(15);e.exports=function(e){return r(o(e))}},14:function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},15:function(e,t){e.exports=function(e){if(void 0==e)throw TypeError(\"Can't call method on  \"+e);return e}},16:function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},17:function(e,t,n){var r=n(2),o=n(5),i=n(26),f=n(8),a=\"prototype\",s=function(e,t,n){var u,c,d,l=e&s.F,p=e&s.G,h=e&s.S,b=e&s.P,m=e&s.B,g=e&s.W,A=p?o:o[t]||(o[t]={}),v=A[a],x=p?r:h?r[t]:(r[t]||{})[a];p&&(n=t);for(u in n)c=!l&&x&&void 0!==x[u],c&&u in A||(d=c?x[u]:n[u],A[u]=p&&\"function\"!=typeof x[u]?n[u]:m&&c?i(d,r):g&&x[u]==d?(function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t[a]=e[a],t})(d):b&&\"function\"==typeof d?i(Function.call,d):d,b&&((A.virtual||(A.virtual={}))[u]=d,e&s.R&&v&&!v[u]&&f(v,u,d)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,e.exports=s},18:function(e,t,n){var r=n(24)(\"keys\"),o=n(19);e.exports=function(e){return r[e]||(r[e]=o(e))}},19:function(e,t){var n=0,r=Math.random();e.exports=function(e){return\"Symbol(\".concat(void 0===e?\"\":e,\")_\",(++n+r).toString(36))}},21:function(e,t,n){var r=n(33),o=n(23);e.exports=Object.keys||function(e){return r(e,o)}},22:function(e,t,n){var r=n(9),o=n(2).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},23:function(e,t){e.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},24:function(e,t,n){var r=n(2),o=\"__core-js_shared__\",i=r[o]||(r[o]={});e.exports=function(e){return i[e]||(i[e]={})}},25:function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},26:function(e,t,n){var r=n(32);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},27:function(e,t,n){var r=n(15);e.exports=function(e){return Object(r(e))}},28:function(e,t,n){var r=n(9);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&\"function\"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if(\"function\"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&\"function\"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError(\"Can't convert object to primitive value\")}},29:function(e,t,n){e.exports=!n(4)&&!n(11)((function(){return 7!=Object.defineProperty(n(22)(\"div\"),\"a\",{get:function(){return 7}}).a}))},30:function(e,t,n){var r=n(16),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},32:function(e,t){e.exports=function(e){if(\"function\"!=typeof e)throw TypeError(e+\" is not a function!\");return e}},33:function(e,t,n){var r=n(7),o=n(12),i=n(34)(!1),f=n(18)(\"IE_PROTO\");e.exports=function(e,t){var n,a=o(e),s=0,u=[];for(n in a)n!=f&&r(a,n)&&u.push(n);for(;t.length>s;)r(a,n=t[s++])&&(~i(u,n)||u.push(n));return u}},34:function(e,t,n){var r=n(12),o=n(30),i=n(37);e.exports=function(e){return function(t,n,f){var a,s=r(t),u=o(s.length),c=i(f,u);if(e&&n!=n){for(;u>c;)if(a=s[c++],a!=a)return!0}else for(;u>c;c++)if((e||c in s)&&s[c]===n)return e||c||0;return!e&&-1}}},35:function(e,t,n){var r=n(25);e.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(e){return\"String\"==r(e)?e.split(\"\"):Object(e)}},37:function(e,t,n){var r=n(16),o=Math.max,i=Math.min;e.exports=function(e,t){return e=r(e),e<0?o(e+t,0):i(e,t)}},44:function(e,t,n){e.exports={default:n(53),__esModule:!0}},53:function(e,t,n){n(65),e.exports=n(5).Object.keys},60:function(e,t,n){var r=n(17),o=n(5),i=n(11);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],f={};f[e]=t(n),r(r.S+r.F*i((function(){n(1)})),\"Object\",f)}},65:function(e,t,n){var r=n(27),o=n(21);n(60)(\"keys\",(function(){return function(e){return o(r(e))}}))},103:function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){e.component(\"md-ink-ripple\",e.extend(f.default))}Object.defineProperty(t,\"__esModule\",{value:!0}),t.default=o;var i=n(310),f=r(i);e.exports=t.default},104:function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){e.material=new e({data:function(){return{styles:[],currentTheme:null,inkRipple:!0}},methods:{registerTheme:function(e,t){var n={};\"string\"==typeof e?n[e]=t:n=e,v(n,this.styles)},applyCurrentTheme:function(e){document.body.classList.remove(\"md-theme-\"+this.currentTheme),document.body.classList.add(\"md-theme-\"+e),this.currentTheme=e},setCurrentTheme:function(e){m.indexOf(e)>=0?this.applyCurrentTheme(e):(m.indexOf(\"default\")===-1?this.registerTheme(\"default\",h):console.warn(\"The theme '\"+e+\"' doesn't exists. You need to register it first in order to use.\"),this.applyCurrentTheme(\"default\"))}}}),e.component(\"md-theme\",l.default),e.prototype.$material=e.material}Object.defineProperty(t,\"__esModule\",{value:!0});var i=n(44),f=r(i);t.default=o;var a=n(105),s=r(a),u=n(106),c=r(u),d=n(311),l=r(d),p=[\"primary\",\"accent\",\"background\",\"warn\",\"hue-1\",\"hue-2\",\"hue-3\"],h={primary:\"indigo\",accent:\"pink\",background:\"white\",warn:\"deep-orange\"},b=function(e,t){var n=document.head,r=\"md-theme-\"+t,o=n.querySelector(\"#\"+r);if(o)o.textContent=e;else{var i=document.createElement(\"style\");e=e.replace(/THEME_NAME/g,r),i.type=\"text/css\",i.id=r,i.textContent=e,n.appendChild(i)}},m=[],g=function(e,t){return p.forEach((function(n){e=e.replace(RegExp(\"(\"+n.toUpperCase()+\")-(COLOR|CONTRAST)-?(A?\\\\d*)-?(\\\\d*\\\\.?\\\\d+)?\",\"g\"),(function(e,r,o,i,f){var a=void 0,u=0===+i?500:i;if(t[n]?\"string\"==typeof t[n]?a=s.default[t[n]]:(a=s.default[t[n].color]||s.default[h[n]],u=0===+i?t[n].hue:i):a=s.default[h[n]],\"COLOR\"===o){var d=s.default[t[n]];return i||d||(\"accent\"===n?u=\"A200\":\"background\"===n&&(u=50)),f?(0,c.default)(a[u],f):a[u]}return a.darkText.indexOf(u)>=0?f?(0,c.default)(\"#000\",f):\"rgba(0, 0, 0, .87)\":f?(0,c.default)(\"#fff\",f):\"rgba(255, 255, 255, .87)\"}))})),e},A=function(e,t,n){var r=[];n.forEach((function(t){r.push(g(t,e))})),b(r.join(\"\\n\"),t)},v=function(e,t){var n=e?(0,f.default)(e):[];n.forEach((function(n){A(e[n],n,t),m.push(n)}))};e.exports=t.default},105:function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default={red:{50:\"#ffebee\",100:\"#ffcdd2\",200:\"#ef9a9a\",300:\"#e57373\",400:\"#ef5350\",500:\"#f44336\",600:\"#e53935\",700:\"#d32f2f\",800:\"#c62828\",900:\"#b71c1c\",A100:\"#ff8a80\",A200:\"#ff5252\",A400:\"#ff1744\",A700:\"#d50000\",darkText:[50,100,200,300,\"A100\"]},pink:{50:\"#fce4ec\",100:\"#f8bbd0\",200:\"#f48fb1\",300:\"#f06292\",400:\"#ec407a\",500:\"#e91e63\",600:\"#d81b60\",700:\"#c2185b\",800:\"#ad1457\",900:\"#880e4f\",A100:\"#ff80ab\",A200:\"#ff4081\",A400:\"#f50057\",A700:\"#c51162\",darkText:[50,100,200,\"A100\"]},purple:{50:\"#f3e5f5\",100:\"#e1bee7\",200:\"#ce93d8\",300:\"#ba68c8\",400:\"#ab47bc\",500:\"#9c27b0\",600:\"#8e24aa\",700:\"#7b1fa2\",800:\"#6a1b9a\",900:\"#4a148c\",A100:\"#ea80fc\",A200:\"#e040fb\",A400:\"#d500f9\",A700:\"#aa00ff\",darkText:[50,100,200,\"A100\"]},\"deep-purple\":{50:\"#ede7f6\",100:\"#d1c4e9\",200:\"#b39ddb\",300:\"#9575cd\",400:\"#7e57c2\",500:\"#673ab7\",600:\"#5e35b1\",700:\"#512da8\",800:\"#4527a0\",900:\"#311b92\",A100:\"#b388ff\",A200:\"#7c4dff\",A400:\"#651fff\",A700:\"#6200ea\",darkText:[50,100,200,\"A100\"]},indigo:{50:\"#e8eaf6\",100:\"#c5cae9\",200:\"#9fa8da\",300:\"#7986cb\",400:\"#5c6bc0\",500:\"#3f51b5\",600:\"#3949ab\",700:\"#303f9f\",800:\"#283593\",900:\"#1a237e\",A100:\"#8c9eff\",A200:\"#536dfe\",A400:\"#3d5afe\",A700:\"#304ffe\",darkText:[50,100,200,\"A100\"]},blue:{50:\"#e3f2fd\",100:\"#bbdefb\",200:\"#90caf9\",300:\"#64b5f6\",400:\"#42a5f5\",500:\"#2196f3\",600:\"#1e88e5\",700:\"#1976d2\",800:\"#1565c0\",900:\"#0d47a1\",A100:\"#82b1ff\",A200:\"#448aff\",A400:\"#2979ff\",A700:\"#2962ff\",darkText:[50,100,200,300,400,\"A100\"]},\"light-blue\":{50:\"#e1f5fe\",100:\"#b3e5fc\",200:\"#81d4fa\",300:\"#4fc3f7\",400:\"#29b6f6\",500:\"#03a9f4\",600:\"#039be5\",700:\"#0288d1\",800:\"#0277bd\",900:\"#01579b\",A100:\"#80d8ff\",A200:\"#40c4ff\",A400:\"#00b0ff\",A700:\"#0091ea\",darkText:[50,100,200,300,400,500,\"A100\",\"A200\",\"A300\"]},cyan:{50:\"#e0f7fa\",100:\"#b2ebf2\",200:\"#80deea\",300:\"#4dd0e1\",400:\"#26c6da\",500:\"#00bcd4\",600:\"#00acc1\",700:\"#0097a7\",800:\"#00838f\",900:\"#006064\",A100:\"#84ffff\",A200:\"#18ffff\",A400:\"#00e5ff\",A700:\"#00b8d4\",darkText:[50,100,200,300,400,500,600,\"A100\",\"A200\",\"A300\",\"A400\"]},teal:{50:\"#e0f2f1\",100:\"#b2dfdb\",200:\"#80cbc4\",300:\"#4db6ac\",400:\"#26a69a\",500:\"#009688\",600:\"#00897b\",700:\"#00796b\",800:\"#00695c\",900:\"#004d40\",A100:\"#a7ffeb\",A200:\"#64ffda\",A400:\"#1de9b6\",A700:\"#00bfa5\",darkText:[50,100,200,300,400,\"A100\",\"A200\",\"A300\",\"A400\"]},green:{50:\"#e8f5e9\",100:\"#c8e6c9\",200:\"#a5d6a7\",300:\"#81c784\",400:\"#66bb6a\",500:\"#4caf50\",600:\"#43a047\",700:\"#388e3c\",800:\"#2e7d32\",900:\"#1b5e20\",A100:\"#b9f6ca\",A200:\"#69f0ae\",A400:\"#00e676\",A700:\"#00c853\",darkText:[50,100,200,300,400,500,\"A100\",\"A200\",\"A300\",\"A400\"]},\"light-green\":{50:\"#f1f8e9\",100:\"#dcedc8\",200:\"#c5e1a5\",300:\"#aed581\",400:\"#9ccc65\",500:\"#8bc34a\",600:\"#7cb342\",700:\"#689f38\",800:\"#558b2f\",900:\"#33691e\",A100:\"#ccff90\",A200:\"#b2ff59\",A400:\"#76ff03\",A700:\"#64dd17\",darkText:[50,100,200,300,400,500,600,\"A100\",\"A200\",\"A300\",\"A400\"]},lime:{50:\"#f9fbe7\",100:\"#f0f4c3\",200:\"#e6ee9c\",300:\"#dce775\",400:\"#d4e157\",500:\"#cddc39\",600:\"#c0ca33\",700:\"#afb42b\",800:\"#9e9d24\",900:\"#827717\",A100:\"#f4ff81\",A200:\"#eeff41\",A400:\"#c6ff00\",A700:\"#aeea00\",darkText:[50,100,200,300,400,500,600,700,800,\"A100\",\"A200\",\"A300\",\"A400\"]},yellow:{50:\"#fffde7\",100:\"#fff9c4\",200:\"#fff59d\",300:\"#fff176\",400:\"#ffee58\",500:\"#ffeb3b\",600:\"#fdd835\",700:\"#fbc02d\",800:\"#f9a825\",900:\"#f57f17\",A100:\"#ffff8d\",A200:\"#ffff00\",A400:\"#ffea00\",A700:\"#ffd600\",darkText:[50,100,200,300,400,500,600,700,800,900,\"A100\",\"A200\",\"A300\",\"A400\"]},amber:{50:\"#fff8e1\",100:\"#ffecb3\",200:\"#ffe082\",300:\"#ffd54f\",400:\"#ffca28\",500:\"#ffc107\",600:\"#ffb300\",700:\"#ffa000\",800:\"#ff8f00\",900:\"#ff6f00\",A100:\"#ffe57f\",A200:\"#ffd740\",A400:\"#ffc400\",A700:\"#ffab00\",darkText:[50,100,200,300,400,500,600,700,800,900,\"A100\",\"A200\",\"A300\",\"A400\"]},orange:{50:\"#fff3e0\",100:\"#ffe0b2\",200:\"#ffcc80\",300:\"#ffb74d\",400:\"#ffa726\",500:\"#ff9800\",600:\"#fb8c00\",700:\"#f57c00\",800:\"#ef6c00\",900:\"#e65100\",A100:\"#ffd180\",A200:\"#ffab40\",A400:\"#ff9100\",A700:\"#ff6d00\",darkText:[50,100,200,300,400,500,600,700,\"A100\",\"A200\",\"A300\",\"A400\"]},\"deep-orange\":{50:\"#fbe9e7\",100:\"#ffccbc\",200:\"#ffab91\",300:\"#ff8a65\",400:\"#ff7043\",500:\"#ff5722\",600:\"#f4511e\",700:\"#e64a19\",800:\"#d84315\",900:\"#bf360c\",A100:\"#ff9e80\",A200:\"#ff6e40\",A400:\"#ff3d00\",A700:\"#dd2c00\",darkText:[50,100,200,300,400,\"A100\",\"A200\"]},brown:{50:\"#efebe9\",100:\"#d7ccc8\",200:\"#bcaaa4\",300:\"#a1887f\",400:\"#8d6e63\",500:\"#795548\",600:\"#6d4c41\",700:\"#5d4037\",800:\"#4e342e\",900:\"#3e2723\",A100:\"#d7ccc8\",A200:\"#bcaaa4\",A400:\"#8d6e63\",A700:\"#5d4037\",darkText:[50,100,200,\"A100\",\"A200\",\"A300\",\"A400\"]},grey:{50:\"#fafafa\",100:\"#f5f5f5\",200:\"#eeeeee\",300:\"#e0e0e0\",400:\"#bdbdbd\",500:\"#9e9e9e\",600:\"#757575\",700:\"#616161\",800:\"#424242\",900:\"#212121\",A100:\"#fff\",A200:\"#000000\",A400:\"#303030\",A700:\"#616161\",darkText:[50,100,200,300,400,500,\"A100\"]},\"blue-grey\":{50:\"#eceff1\",100:\"#cfd8dc\",200:\"#b0bec5\",300:\"#90a4ae\",400:\"#78909c\",500:\"#607d8b\",600:\"#546e7a\",700:\"#455a64\",800:\"#37474f\",900:\"#263238\",A100:\"#cfd8dc\",A200:\"#b0bec5\",A400:\"#78909c\",A700:\"#455a64\",darkText:[50,100,200,300,\"A100\",\"A200\",\"A300\",\"A400\"]},white:{50:\"#fff\",100:\"#fff\",200:\"#fff\",300:\"#fff\",400:\"#fff\",500:\"#fff\",600:\"#fff\",700:\"#fff\",800:\"#fff\",900:\"#fff\",A100:\"#fff\",A200:\"#fff\",A400:\"#fff\",A700:\"#fff\",darkText:[50,100,200,300,400,500,600,700,800,900,\"A100\",\"A200\",\"A300\",\"A400\"]},black:{50:\"#000\",100:\"#000\",200:\"#000\",300:\"#000\",400:\"#000\",500:\"#000\",600:\"#000\",700:\"#000\",800:\"#000\",900:\"#000\",A100:\"#000\",A200:\"#000\",A400:\"#000\",A700:\"#000\",darkText:[]}},e.exports=t.default},106:function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default=function(e,t){var n=\"\",r=\"\",o=\"\",i=e.toString().match(/^#?(([0-9a-zA-Z]{3}){1,3})$/);if(!i)throw new Error(\"Invalid color\"+e);if(e=i[1],6===e.length)n=parseInt(e.substring(0,2),16),r=parseInt(e.substring(2,4),16),o=parseInt(e.substring(4,6),16);else if(3===e.length){var f=e.substring(0,1),a=e.substring(1,2),s=e.substring(2,3);n=parseInt(f+f,16),r=parseInt(a+a,16),o=parseInt(s+s,16)}return t?(t>1&&(t/=100),\"rgba(\"+n+\", \"+r+\", \"+o+\", \"+t+\")\"):\"rgb(\"+n+\", \"+r+\", \"+o+\")\"},e.exports=t.default},107:function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}function o(e){return o.installed?void console.warn(\"Vue Material is already installed.\"):(o.installed=!0,e.use(f.default),e.use(s.default),void e.material.styles.push(c.default))}Object.defineProperty(t,\"__esModule\",{value:!0}),t.default=o;var i=n(104),f=r(i),a=n(103),s=r(a),u=n(247),c=r(u);n(373),e.exports=t.default},164:function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default={props:{mdDisabled:Boolean},data:function(){return{mounted:!1,rippleElement:null,parentElement:null,parentDimensions:{width:null,height:null,top:null,left:null},awaitingComplete:!1,hasCompleted:!1,fadeOut:!1,active:!1}},computed:{classes:function(){return{\"md-fadeout\":this.fadeOut,\"md-active\":this.active}},styles:function(){return{width:this.parentDimensions.width,height:this.parentDimensions.height,top:this.parentDimensions.top,left:this.parentDimensions.left}},disabled:function(){return this.mdDisabled||!this.$material.inkRipple}},watch:{disabled:function(e){e?this.destroy():this.init()}},methods:{checkAvailablePositions:function(e){var t=[\"relative\",\"absolute\",\"fixed\"];return t.indexOf(getComputedStyle(e).position)>-1},getClosestPositionedParent:function(e){var t=e.parentNode;return!(!e||!t||\"body\"===t.tagName.toLowerCase())&&(this.checkAvailablePositions(e)?e:this.getClosestPositionedParent(e.parentNode))},getParentSize:function(){var e=this.parentElement;return Math.round(Math.max(e.offsetWidth,e.offsetHeight))+\"px\"},getClickPosition:function(e){var t=this.parentElement.getBoundingClientRect(),n=e.pageY-t.top-this.$refs.ripple.offsetHeight/2-document.body.scrollTop+\"px\",r=e.pageX-t.left-this.$refs.ripple.offsetWidth/2-document.body.scrollLeft+\"px\";return{top:n,left:r}},setDimensions:function(){var e=this.getParentSize();this.parentDimensions.width=e,this.parentDimensions.height=e},setPositions:function(e){var t=this.getClickPosition(e);this.parentDimensions.top=t.top,this.parentDimensions.left=t.left},clearState:function(){this.active=!1,this.fadeOut=!1,this.hasCompleted=!1,this.setDimensions(),window.clearTimeout(this.awaitingComplete),document.body.removeEventListener(\"mouseup\",this.endRipple)},startRipple:function(e){var t=this;window.requestAnimationFrame((function(){t.clearState(),t.awaitingComplete=window.setTimeout((function(){t.hasCompleted=!0}),400),document.body.addEventListener(\"mouseup\",t.endRipple),t.setPositions(e),window.setTimeout((function(){t.active=!0}))}))},endRipple:function(){var e=this;this.hasCompleted?this.fadeOut=!0:this.awaitingComplete=window.setTimeout((function(){e.fadeOut=!0}),200),document.body.removeEventListener(\"mouseup\",this.endRipple)},registerMouseEvent:function(){this.parentElement.addEventListener(\"mousedown\",this.startRipple)},unregisterMouseEvent:function(){this.parentElement&&(this.parentElement.removeEventListener(\"mousedown\",this.startRipple),document.body.removeEventListener(\"mouseup\",this.endRipple))},init:function(){this.rippleElement=this.$el,this.parentElement=this.getClosestPositionedParent(this.$el.parentNode),this.parentElement?(this.rippleElement.parentNode.removeChild(this.rippleElement),this.parentElement.appendChild(this.rippleElement),this.registerMouseEvent(),this.setDimensions()):this.$destroy()},destroy:function(){this.rippleElement&&this.rippleElement.parentNode&&(this.unregisterMouseEvent(),this.rippleElement.parentNode.removeChild(this.rippleElement))}},mounted:function(){var e=this;window.setTimeout((function(){e.disabled?e.destroy():e.init(),e.$nextTick((function(){e.mounted=!0}))}),100)},beforeDestroy:function(){this.destroy()}},e.exports=t.default},165:function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default={props:{mdTag:String,mdName:{type:String,default:\"default\"}},data:function(){return{name:\"md-theme\"}},render:function(e){return this.mdTag||this.$slots.default.length>1?e(this.mdTag||\"div\",{staticClass:\"md-theme\"},this.$slots.default):this.$slots.default[0]}},e.exports=t.default},188:function(e,t,n){t=e.exports=n(189)(),t.push([e.id,'html{height:100%;box-sizing:border-box}html *,html :after,html :before{box-sizing:inherit}body{min-height:100%;margin:0;position:relative;-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:rgba(0,0,0,.87);font-family:Roboto,Noto Sans,Noto,sans-serif}[tabindex=\"-1\"]:focus{outline:none}audio,canvas,embed,iframe,img,object,svg,video{max-width:100%;font-style:italic;vertical-align:middle}audio:not(.md-image),canvas:not(.md-image),embed:not(.md-image),iframe:not(.md-image),img:not(.md-image),object:not(.md-image),svg:not(.md-image),video:not(.md-image){height:auto}[tabindex=\"-1\"]:focus{outline:none!important}.md-scrollbar::-webkit-scrollbar,.md-scrollbar ::-webkit-scrollbar{width:10px;height:10px;box-shadow:inset 1px 1px 0 rgba(0,0,0,.12);transition:all .5s cubic-bezier(.35,0,.25,1);background-color:rgba(0,0,0,.05)}.md-scrollbar::-webkit-scrollbar:hover,.md-scrollbar ::-webkit-scrollbar:hover{box-shadow:inset 1px 1px 0 rgba(0,0,0,.054),inset 0 -1px 0 rgba(0,0,0,.038);background-color:rgba(0,0,0,.087)}.md-scrollbar::-webkit-scrollbar-button,.md-scrollbar ::-webkit-scrollbar-button{display:none}.md-scrollbar::-webkit-scrollbar-corner,.md-scrollbar ::-webkit-scrollbar-corner{background-color:transparent}.md-scrollbar::-webkit-scrollbar-thumb,.md-scrollbar ::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,.26);box-shadow:inset 1px 1px 0 rgba(0,0,0,.054),inset 0 -1px 0 rgba(0,0,0,.087);transition:all .5s cubic-bezier(.35,0,.25,1)}.md-caption{font-size:12px;font-weight:400;letter-spacing:.02em;line-height:17px}.md-body-1,body{font-weight:400;line-height:20px}.md-body-1,.md-body-2,body{font-size:14px;letter-spacing:.01em}.md-body-2{font-weight:500;line-height:24px}.md-subheading{font-size:16px;font-weight:400;letter-spacing:.01em;line-height:24px}.md-title{font-size:20px;font-weight:500;letter-spacing:.005em;line-height:26px}.md-headline{font-size:24px;line-height:32px}.md-display-1,.md-headline{font-weight:400;letter-spacing:0}.md-display-1{font-size:34px;line-height:40px}.md-display-2{font-size:45px;font-weight:400;letter-spacing:0;line-height:48px}.md-display-3{font-size:56px;font-weight:400;letter-spacing:-.005em;line-height:58px}.md-display-4{font-size:112px;font-weight:300;letter-spacing:-.01em;line-height:112px}a:not(.md-button):not(.md-bottom-bar-item){text-decoration:none}a:not(.md-button):not(.md-bottom-bar-item):hover{text-decoration:underline}button:focus{outline:none}',\"\"])},189:function(e,t){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],t=0;t<this.length;t++){var n=this[t];n[2]?e.push(\"@media \"+n[2]+\"{\"+n[1]+\"}\"):e.push(n[1])}return e.join(\"\")},e.i=function(t,n){\"string\"==typeof t&&(t=[[null,t,\"\"]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];\"number\"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var f=t[o];\"number\"==typeof f[0]&&r[f[0]]||(n&&!f[2]?f[2]=n:n&&(f[2]=\"(\"+f[2]+\") and (\"+n+\")\"),e.push(f))}},e}},203:function(e,t){},247:function(e,t){e.exports=\".THEME_NAME :not(input):not(textarea)::selection{background:ACCENT-COLOR;color:ACCENT-CONTRAST}.THEME_NAME a:not(.md-button){color:ACCENT-COLOR}.THEME_NAME a:not(.md-button):hover{color:ACCENT-COLOR-800}body.THEME_NAME{background-color:BACKGROUND-COLOR;color:BACKGROUND-CONTRAST-0.87}.THEME_NAME .md-caption,.THEME_NAME .md-display-1,.THEME_NAME .md-display-2,.THEME_NAME .md-display-3,.THEME_NAME .md-display-4{color:BACKGROUND-CONTRAST-0.57}.THEME_NAME code:not(.hljs){background-color:ACCENT-COLOR-A100-0.2;color:ACCENT-COLOR-800}\\n\"},310:function(e,t,n){var r,o;n(203),r=n(164);var i=n(335);o=r=r||{},\"object\"!=typeof r.default&&\"function\"!=typeof r.default||(o=r=r.default),\"function\"==typeof o&&(o=o.options),o.render=i.render,o.staticRenderFns=i.staticRenderFns,e.exports=r},311:function(e,t,n){var r,o;r=n(165),o=r=r||{},\"object\"!=typeof r.default&&\"function\"!=typeof r.default||(o=r=r.default),\"function\"==typeof o&&(o=o.options),e.exports=r},335:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.mounted||!e.disabled?n(\"div\",{staticClass:\"md-ink-ripple\"},[n(\"div\",{ref:\"ripple\",staticClass:\"md-ripple\",class:e.classes,style:e.styles})]):e._e()},staticRenderFns:[]}},372:function(e,t,n){function r(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=d[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(s(r.parts[i],t))}else{for(var f=[],i=0;i<r.parts.length;i++)f.push(s(r.parts[i],t));d[r.id]={id:r.id,refs:1,parts:f}}}}function o(e){for(var t=[],n={},r=0;r<e.length;r++){var o=e[r],i=o[0],f=o[1],a=o[2],s=o[3],u={css:f,media:a,sourceMap:s};n[i]?n[i].parts.push(u):t.push(n[i]={id:i,parts:[u]})}return t}function i(e,t){var n=h(),r=g[g.length-1];if(\"top\"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),g.push(t);else{if(\"bottom\"!==e.insertAt)throw new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");n.appendChild(t)}}function f(e){e.parentNode.removeChild(e);var t=g.indexOf(e);t>=0&&g.splice(t,1)}function a(e){var t=document.createElement(\"style\");return t.type=\"text/css\",i(e,t),t}function s(e,t){var n,r,o;if(t.singleton){var i=m++;n=b||(b=a(t)),r=u.bind(null,n,i,!1),o=u.bind(null,n,i,!0)}else n=a(t),r=c.bind(null,n),o=function(){f(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}function u(e,t,n,r){var o=n?\"\":r.css;if(e.styleSheet)e.styleSheet.cssText=A(t,o);else{var i=document.createTextNode(o),f=e.childNodes;f[t]&&e.removeChild(f[t]),f.length?e.insertBefore(i,f[t]):e.appendChild(i)}}function c(e,t){var n=t.css,r=t.media,o=t.sourceMap;if(r&&e.setAttribute(\"media\",r),o&&(n+=\"\\n/*# sourceURL=\"+o.sources[0]+\" */\",n+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+\" */\"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var d={},l=function(e){var t;return function(){return\"undefined\"==typeof t&&(t=e.apply(this,arguments)),t}},p=l((function(){return/msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase())})),h=l((function(){return document.head||document.getElementsByTagName(\"head\")[0]})),b=null,m=0,g=[];e.exports=function(e,t){t=t||{},\"undefined\"==typeof t.singleton&&(t.singleton=p()),\"undefined\"==typeof t.insertAt&&(t.insertAt=\"bottom\");var n=o(e);return r(n,t),function(e){for(var i=[],f=0;f<n.length;f++){var a=n[f],s=d[a.id];s.refs--,i.push(s)}if(e){var u=o(e);r(u,t)}for(var f=0;f<i.length;f++){var s=i[f];if(0===s.refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete d[s.id]}}}};var A=(function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join(\"\\n\")}})()},373:function(e,t,n){var r=n(188);\"string\"==typeof r&&(r=[[e.id,r,\"\"]]);n(372)(r,{});r.locals&&(e.exports=r.locals)}})}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

eval("/*!\n * Vue Material v0.6.3\n * Made with love by Marcos Moura\n * Released under the MIT License.\n */\n!(function(e,l){ true?module.exports=l():\"function\"==typeof define&&define.amd?define([],l):\"object\"==typeof exports?exports.VueMaterial=l():e.VueMaterial=l()})(this,(function(){return (function(e){function l(t){if(m[t])return m[t].exports;var o=m[t]={exports:{},id:t,loaded:!1};return e[t].call(o.exports,o,o.exports,l),o.loaded=!0,o.exports}var m={};return l.m=e,l.c=m,l.p=\"/\",l(0)})({0:function(e,l,m){e.exports=m(86)},86:function(e,l,m){\"use strict\";function t(e){return e&&e.__esModule?e:{default:e}}function o(e){e.component(\"md-layout\",e.extend(d.default))}Object.defineProperty(l,\"__esModule\",{value:!0}),l.default=o;var a=m(281),d=t(a);e.exports=l.default},135:function(e,l){\"use strict\";Object.defineProperty(l,\"__esModule\",{value:!0}),l.default={props:{mdTag:{type:String,default:\"div\"},mdRow:Boolean,mdRowXsmall:Boolean,mdRowSmall:Boolean,mdRowMedium:Boolean,mdRowLarge:Boolean,mdRowXlarge:Boolean,mdColumn:Boolean,mdColumnXsmall:Boolean,mdColumnSmall:Boolean,mdColumnMedium:Boolean,mdColumnLarge:Boolean,mdColumnXlarge:Boolean,mdHideXsmall:Boolean,mdHideSmall:Boolean,mdHideMedium:Boolean,mdHideLarge:Boolean,mdHideXlarge:Boolean,mdGutter:[String,Number,Boolean],mdAlign:String,mdAlignXsmall:String,mdAlignSmall:String,mdAlignMedium:String,mdAlignLarge:String,mdAlignXlarge:String,mdFlex:[String,Number,Boolean],mdFlexXsmall:[String,Number,Boolean],mdFlexSmall:[String,Number,Boolean],mdFlexMedium:[String,Number,Boolean],mdFlexLarge:[String,Number,Boolean],mdFlexXlarge:[String,Number,Boolean],mdFlexOffset:[String,Number,Boolean],mdFlexOffsetXsmall:[String,Number,Boolean],mdFlexOffsetSmall:[String,Number,Boolean],mdFlexOffsetMedium:[String,Number,Boolean],mdFlexOffsetLarge:[String,Number,Boolean],mdFlexOffsetXlarge:[String,Number,Boolean]},computed:{classes:function e(){var e={\"md-row\":this.mdRow,\"md-row-xsmall\":this.mdRowXsmall,\"md-row-small\":this.mdRowSmall,\"md-row-medium\":this.mdRowMedium,\"md-row-large\":this.mdRowLarge,\"md-row-xlarge\":this.mdRowXlarge,\"md-column\":this.mdColumn,\"md-column-xsmall\":this.mdColumnXsmall,\"md-column-small\":this.mdColumnSmall,\"md-column-medium\":this.mdColumnMedium,\"md-column-large\":this.mdColumnLarge,\"md-column-xlarge\":this.mdColumnXlarge,\"md-hide-xsmall\":this.mdHideXsmall,\"md-hide-small\":this.mdHideSmall,\"md-hide-medium\":this.mdHideMedium,\"md-hide-large\":this.mdHideLarge,\"md-hide-xlarge\":this.mdHideXlarge};return this.mdGutter&&(\"boolean\"==typeof this.mdGutter?e[\"md-gutter\"]=!0:this.mdGutter&&(e[\"md-gutter-\"+this.mdGutter]=!0)),this.generatePropClasses(\"md-flex\",\"\",\"mdFlex\",e),this.generatePropClasses(\"md-flex\",\"xsmall\",\"mdFlexXsmall\",e),this.generatePropClasses(\"md-flex\",\"small\",\"mdFlexSmall\",e),this.generatePropClasses(\"md-flex\",\"medium\",\"mdFlexMedium\",e),this.generatePropClasses(\"md-flex\",\"large\",\"mdFlexLarge\",e),this.generatePropClasses(\"md-flex\",\"xlarge\",\"mdFlexXlarge\",e),this.generatePropClasses(\"md-flex-offset\",\"\",\"mdFlexOffset\",e),this.generatePropClasses(\"md-flex-offset\",\"xsmall\",\"mdFlexOffsetXsmall\",e),this.generatePropClasses(\"md-flex-offset\",\"small\",\"mdFlexOffsetSmall\",e),this.generatePropClasses(\"md-flex-offset\",\"medium\",\"mdFlexOffsetMedium\",e),this.generatePropClasses(\"md-flex-offset\",\"large\",\"mdFlexOffsetLarge\",e),this.generatePropClasses(\"md-flex-offset\",\"xlarge\",\"mdFlexOffsetXlarge\",e),this.generatePropClasses(\"md-align\",\"\",\"mdAlign\",e),this.generatePropClasses(\"md-align\",\"xsmall\",\"mdAlignXsmall\",e),this.generatePropClasses(\"md-align\",\"small\",\"mdAlignSmall\",e),this.generatePropClasses(\"md-align\",\"medium\",\"mdAlignMedium\",e),this.generatePropClasses(\"md-align\",\"large\",\"mdAlignLarge\",e),this.generatePropClasses(\"md-align\",\"xlarge\",\"mdAlignXlarge\",e),e}},methods:{generatePropClasses:function(e,l,m,t){l&&(l=\"-\"+l),this[m]&&(\"boolean\"==typeof this[m]?t[e+l]=!0:t[e+l+\"-\"+this[m]]=!0)}},render:function(e){return e(this.mdTag,{staticClass:\"md-layout\",class:this.classes},this.$slots.default)}},e.exports=l.default},197:function(e,l){},281:function(e,l,m){var t,o;m(197),t=m(135),o=t=t||{},\"object\"!=typeof t.default&&\"function\"!=typeof t.default||(o=t=t.default),\"function\"==typeof o&&(o=o.options),e.exports=t}})}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1tYXRlcmlhbC9kaXN0L2NvbXBvbmVudHMvbWRMYXlvdXQvaW5kZXguanM/ODcxNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLCtJQUEyTCxtQkFBbUIsb0JBQW9CLGNBQWMsNEJBQTRCLFlBQVksVUFBVSxpQkFBaUIsZ0VBQWdFLFNBQVMsZ0NBQWdDLEdBQUcsa0JBQWtCLGdCQUFnQixvQkFBb0IsYUFBYSxjQUFjLDBCQUEwQixXQUFXLGNBQWMsNkNBQTZDLHNDQUFzQyxTQUFTLGNBQWMsb0JBQW9CLG9CQUFvQixtQkFBbUIsYUFBYSxzQ0FBc0MsU0FBUyxhQUFhLE9BQU8sT0FBTywwQkFBMEIsaThCQUFpOEIsV0FBVyxxQkFBcUIsT0FBTywwakJBQTBqQixxd0NBQXF3QyxVQUFVLHNDQUFzQyxtRkFBbUYsb0JBQW9CLHFCQUFxQiwyQ0FBMkMsdUJBQXVCLHFCQUFxQixvQkFBb0IscUJBQXFCLFFBQVEseUJBQXlCLDRIQUE0SCxFQUFFIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBWdWUgTWF0ZXJpYWwgdjAuNi4zXG4gKiBNYWRlIHdpdGggbG92ZSBieSBNYXJjb3MgTW91cmFcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuIShmdW5jdGlvbihlLGwpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWwoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLGwpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuVnVlTWF0ZXJpYWw9bCgpOmUuVnVlTWF0ZXJpYWw9bCgpfSkodGhpcywoZnVuY3Rpb24oKXtyZXR1cm4gKGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIGwodCl7aWYobVt0XSlyZXR1cm4gbVt0XS5leHBvcnRzO3ZhciBvPW1bdF09e2V4cG9ydHM6e30saWQ6dCxsb2FkZWQ6ITF9O3JldHVybiBlW3RdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLGwpLG8ubG9hZGVkPSEwLG8uZXhwb3J0c312YXIgbT17fTtyZXR1cm4gbC5tPWUsbC5jPW0sbC5wPVwiL1wiLGwoMCl9KSh7MDpmdW5jdGlvbihlLGwsbSl7ZS5leHBvcnRzPW0oODYpfSw4NjpmdW5jdGlvbihlLGwsbSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gbyhlKXtlLmNvbXBvbmVudChcIm1kLWxheW91dFwiLGUuZXh0ZW5kKGQuZGVmYXVsdCkpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShsLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGwuZGVmYXVsdD1vO3ZhciBhPW0oMjgxKSxkPXQoYSk7ZS5leHBvcnRzPWwuZGVmYXVsdH0sMTM1OmZ1bmN0aW9uKGUsbCl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGwsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksbC5kZWZhdWx0PXtwcm9wczp7bWRUYWc6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJkaXZcIn0sbWRSb3c6Qm9vbGVhbixtZFJvd1hzbWFsbDpCb29sZWFuLG1kUm93U21hbGw6Qm9vbGVhbixtZFJvd01lZGl1bTpCb29sZWFuLG1kUm93TGFyZ2U6Qm9vbGVhbixtZFJvd1hsYXJnZTpCb29sZWFuLG1kQ29sdW1uOkJvb2xlYW4sbWRDb2x1bW5Yc21hbGw6Qm9vbGVhbixtZENvbHVtblNtYWxsOkJvb2xlYW4sbWRDb2x1bW5NZWRpdW06Qm9vbGVhbixtZENvbHVtbkxhcmdlOkJvb2xlYW4sbWRDb2x1bW5YbGFyZ2U6Qm9vbGVhbixtZEhpZGVYc21hbGw6Qm9vbGVhbixtZEhpZGVTbWFsbDpCb29sZWFuLG1kSGlkZU1lZGl1bTpCb29sZWFuLG1kSGlkZUxhcmdlOkJvb2xlYW4sbWRIaWRlWGxhcmdlOkJvb2xlYW4sbWRHdXR0ZXI6W1N0cmluZyxOdW1iZXIsQm9vbGVhbl0sbWRBbGlnbjpTdHJpbmcsbWRBbGlnblhzbWFsbDpTdHJpbmcsbWRBbGlnblNtYWxsOlN0cmluZyxtZEFsaWduTWVkaXVtOlN0cmluZyxtZEFsaWduTGFyZ2U6U3RyaW5nLG1kQWxpZ25YbGFyZ2U6U3RyaW5nLG1kRmxleDpbU3RyaW5nLE51bWJlcixCb29sZWFuXSxtZEZsZXhYc21hbGw6W1N0cmluZyxOdW1iZXIsQm9vbGVhbl0sbWRGbGV4U21hbGw6W1N0cmluZyxOdW1iZXIsQm9vbGVhbl0sbWRGbGV4TWVkaXVtOltTdHJpbmcsTnVtYmVyLEJvb2xlYW5dLG1kRmxleExhcmdlOltTdHJpbmcsTnVtYmVyLEJvb2xlYW5dLG1kRmxleFhsYXJnZTpbU3RyaW5nLE51bWJlcixCb29sZWFuXSxtZEZsZXhPZmZzZXQ6W1N0cmluZyxOdW1iZXIsQm9vbGVhbl0sbWRGbGV4T2Zmc2V0WHNtYWxsOltTdHJpbmcsTnVtYmVyLEJvb2xlYW5dLG1kRmxleE9mZnNldFNtYWxsOltTdHJpbmcsTnVtYmVyLEJvb2xlYW5dLG1kRmxleE9mZnNldE1lZGl1bTpbU3RyaW5nLE51bWJlcixCb29sZWFuXSxtZEZsZXhPZmZzZXRMYXJnZTpbU3RyaW5nLE51bWJlcixCb29sZWFuXSxtZEZsZXhPZmZzZXRYbGFyZ2U6W1N0cmluZyxOdW1iZXIsQm9vbGVhbl19LGNvbXB1dGVkOntjbGFzc2VzOmZ1bmN0aW9uIGUoKXt2YXIgZT17XCJtZC1yb3dcIjp0aGlzLm1kUm93LFwibWQtcm93LXhzbWFsbFwiOnRoaXMubWRSb3dYc21hbGwsXCJtZC1yb3ctc21hbGxcIjp0aGlzLm1kUm93U21hbGwsXCJtZC1yb3ctbWVkaXVtXCI6dGhpcy5tZFJvd01lZGl1bSxcIm1kLXJvdy1sYXJnZVwiOnRoaXMubWRSb3dMYXJnZSxcIm1kLXJvdy14bGFyZ2VcIjp0aGlzLm1kUm93WGxhcmdlLFwibWQtY29sdW1uXCI6dGhpcy5tZENvbHVtbixcIm1kLWNvbHVtbi14c21hbGxcIjp0aGlzLm1kQ29sdW1uWHNtYWxsLFwibWQtY29sdW1uLXNtYWxsXCI6dGhpcy5tZENvbHVtblNtYWxsLFwibWQtY29sdW1uLW1lZGl1bVwiOnRoaXMubWRDb2x1bW5NZWRpdW0sXCJtZC1jb2x1bW4tbGFyZ2VcIjp0aGlzLm1kQ29sdW1uTGFyZ2UsXCJtZC1jb2x1bW4teGxhcmdlXCI6dGhpcy5tZENvbHVtblhsYXJnZSxcIm1kLWhpZGUteHNtYWxsXCI6dGhpcy5tZEhpZGVYc21hbGwsXCJtZC1oaWRlLXNtYWxsXCI6dGhpcy5tZEhpZGVTbWFsbCxcIm1kLWhpZGUtbWVkaXVtXCI6dGhpcy5tZEhpZGVNZWRpdW0sXCJtZC1oaWRlLWxhcmdlXCI6dGhpcy5tZEhpZGVMYXJnZSxcIm1kLWhpZGUteGxhcmdlXCI6dGhpcy5tZEhpZGVYbGFyZ2V9O3JldHVybiB0aGlzLm1kR3V0dGVyJiYoXCJib29sZWFuXCI9PXR5cGVvZiB0aGlzLm1kR3V0dGVyP2VbXCJtZC1ndXR0ZXJcIl09ITA6dGhpcy5tZEd1dHRlciYmKGVbXCJtZC1ndXR0ZXItXCIrdGhpcy5tZEd1dHRlcl09ITApKSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC1mbGV4XCIsXCJcIixcIm1kRmxleFwiLGUpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWZsZXhcIixcInhzbWFsbFwiLFwibWRGbGV4WHNtYWxsXCIsZSksdGhpcy5nZW5lcmF0ZVByb3BDbGFzc2VzKFwibWQtZmxleFwiLFwic21hbGxcIixcIm1kRmxleFNtYWxsXCIsZSksdGhpcy5nZW5lcmF0ZVByb3BDbGFzc2VzKFwibWQtZmxleFwiLFwibWVkaXVtXCIsXCJtZEZsZXhNZWRpdW1cIixlKSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC1mbGV4XCIsXCJsYXJnZVwiLFwibWRGbGV4TGFyZ2VcIixlKSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC1mbGV4XCIsXCJ4bGFyZ2VcIixcIm1kRmxleFhsYXJnZVwiLGUpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWZsZXgtb2Zmc2V0XCIsXCJcIixcIm1kRmxleE9mZnNldFwiLGUpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWZsZXgtb2Zmc2V0XCIsXCJ4c21hbGxcIixcIm1kRmxleE9mZnNldFhzbWFsbFwiLGUpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWZsZXgtb2Zmc2V0XCIsXCJzbWFsbFwiLFwibWRGbGV4T2Zmc2V0U21hbGxcIixlKSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC1mbGV4LW9mZnNldFwiLFwibWVkaXVtXCIsXCJtZEZsZXhPZmZzZXRNZWRpdW1cIixlKSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC1mbGV4LW9mZnNldFwiLFwibGFyZ2VcIixcIm1kRmxleE9mZnNldExhcmdlXCIsZSksdGhpcy5nZW5lcmF0ZVByb3BDbGFzc2VzKFwibWQtZmxleC1vZmZzZXRcIixcInhsYXJnZVwiLFwibWRGbGV4T2Zmc2V0WGxhcmdlXCIsZSksdGhpcy5nZW5lcmF0ZVByb3BDbGFzc2VzKFwibWQtYWxpZ25cIixcIlwiLFwibWRBbGlnblwiLGUpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWFsaWduXCIsXCJ4c21hbGxcIixcIm1kQWxpZ25Yc21hbGxcIixlKSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC1hbGlnblwiLFwic21hbGxcIixcIm1kQWxpZ25TbWFsbFwiLGUpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWFsaWduXCIsXCJtZWRpdW1cIixcIm1kQWxpZ25NZWRpdW1cIixlKSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC1hbGlnblwiLFwibGFyZ2VcIixcIm1kQWxpZ25MYXJnZVwiLGUpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWFsaWduXCIsXCJ4bGFyZ2VcIixcIm1kQWxpZ25YbGFyZ2VcIixlKSxlfX0sbWV0aG9kczp7Z2VuZXJhdGVQcm9wQ2xhc3NlczpmdW5jdGlvbihlLGwsbSx0KXtsJiYobD1cIi1cIitsKSx0aGlzW21dJiYoXCJib29sZWFuXCI9PXR5cGVvZiB0aGlzW21dP3RbZStsXT0hMDp0W2UrbCtcIi1cIit0aGlzW21dXT0hMCl9fSxyZW5kZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUodGhpcy5tZFRhZyx7c3RhdGljQ2xhc3M6XCJtZC1sYXlvdXRcIixjbGFzczp0aGlzLmNsYXNzZXN9LHRoaXMuJHNsb3RzLmRlZmF1bHQpfX0sZS5leHBvcnRzPWwuZGVmYXVsdH0sMTk3OmZ1bmN0aW9uKGUsbCl7fSwyODE6ZnVuY3Rpb24oZSxsLG0pe3ZhciB0LG87bSgxOTcpLHQ9bSgxMzUpLG89dD10fHx7fSxcIm9iamVjdFwiIT10eXBlb2YgdC5kZWZhdWx0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LmRlZmF1bHR8fChvPXQ9dC5kZWZhdWx0KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBvJiYobz1vLm9wdGlvbnMpLGUuZXhwb3J0cz10fX0pfSkpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbWF0ZXJpYWwvZGlzdC9jb21wb25lbnRzL21kTGF5b3V0L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 13 */
/***/ function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxpQkFBaUIsYUFBYSxFQUFFOztBQUVoQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony default export */ exports[\"a\"] = {\n  xShift: 75,\n  minWidth: 100\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zcy1tdXNpYy1zY29yZS9jb25zdGFudHMuanM/MDQ1ZSJdLCJuYW1lcyI6WyJ4U2hpZnQiLCJtaW5XaWR0aCJdLCJtYXBwaW5ncyI6IkFBQUEsNENBQWU7QUFDZEEsVUFBUyxFQURLO0FBRVhDLFlBQVc7QUFGQSxDQUFmIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuXHR4U2hpZnQgOiA3NSxcbiAgICBtaW5XaWR0aCA6IDEwMFxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL3NzLW11c2ljLXNjb3JlL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vexflow__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vexflow___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vexflow__);\n/* harmony export (binding) */ __webpack_require__.d(exports, \"e\", function() { return Note; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"a\", function() { return Row; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"c\", function() { return TimeSignature; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"f\", function() { return Bar; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"b\", function() { return Measure; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"g\", function() { return Group; });\n/* harmony export (binding) */ __webpack_require__.d(exports, \"d\", function() { return Tick; });\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\nvar _Vex$Flow = __WEBPACK_IMPORTED_MODULE_0_vexflow___default.a.Flow,\n    Barline = _Vex$Flow.Barline,\n    StaveConnector = _Vex$Flow.StaveConnector,\n    Formatter = _Vex$Flow.Formatter;\n\nvar Note = function Note(letter, octave, accidental) {\n    _classCallCheck(this, Note);\n\n    this.letter = letter;\n    this.octave = octave;\n    this.accidental = accidental;\n};\n\nvar Tick = function () {\n    function Tick(duration) {\n        var notes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n        _classCallCheck(this, Tick);\n\n        this.duration = duration;\n        this.notes = notes;\n    }\n\n    _createClass(Tick, [{\n        key: 'isRest',\n        value: function isRest() {\n            return !this.notes.length;\n        }\n    }]);\n\n    return Tick;\n}();\n\nvar TimeSignature = function TimeSignature(upper, lower) {\n    var vexFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : upper + '/' + lower;\n\n    _classCallCheck(this, TimeSignature);\n\n    this.upper = upper;\n    this.lower = lower;\n    this.vexFormat = vexFormat;\n};\n\nTimeSignature.C = new TimeSignature(4, 4, 'C');\nTimeSignature.C_BAR = new TimeSignature(2, 2, 'C|');\n\nvar Bar = function Bar(clef, keySig) {\n    var ticks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, Bar);\n\n    this.clef = clef;\n    this.keySig = keySig;\n    this.ticks = ticks;\n};\n\nvar Measure = function () {\n    function Measure(timeSig, bars) {\n        var modifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        _classCallCheck(this, Measure);\n\n        this.timeSig = timeSig;\n        this.bars = bars;\n        this.modifiers = modifiers;\n\n        this.reset();\n    }\n\n    _createClass(Measure, [{\n        key: 'reset',\n        value: function reset() {\n            this.x = 0;\n            this.width = 0;\n            this.padding = { left: 0, right: 0 };\n            this.staves = [];\n            this.formatter = undefined;\n            this.voices = [];\n            this.beams = [];\n        }\n    }, {\n        key: 'widthNoPadding',\n        value: function widthNoPadding() {\n            return this.width - this.totalPadding();\n        }\n    }, {\n        key: 'totalPadding',\n        value: function totalPadding() {\n            return this.padding.left + this.padding.right;\n        }\n    }, {\n        key: 'vexBegin',\n        value: function vexBegin() {\n            switch (this.modifiers.begin) {\n                case 'REPEAT':\n                    return Barline.type.REPEAT_BEGIN;\n                default:\n                    return undefined;\n            }\n        }\n    }, {\n        key: 'vexEnd',\n        value: function vexEnd() {\n            switch (this.modifiers.end) {\n                case 'REPEAT':\n                    return Barline.type.REPEAT_END;\n                case 'END':\n                    return Barline.type.END;\n                default:\n                    return undefined;\n            }\n        }\n    }, {\n        key: 'vexBeginLarge',\n        value: function vexBeginLarge() {\n            switch (this.modifiers.begin) {\n                case 'REPEAT':\n                    return StaveConnector.type.BOLD_DOUBLE_LEFT;\n                default:\n                    return undefined;\n            }\n        }\n    }, {\n        key: 'vexEndLarge',\n        value: function vexEndLarge() {\n            switch (this.modifiers.end) {\n                case 'REPEAT': // Fall through\n                case 'END':\n                    return StaveConnector.type.BOLD_DOUBLE_RIGHT;\n                default:\n                    return StaveConnector.type.SINGLE_RIGHT;\n            }\n        }\n    }, {\n        key: 'addStave',\n        value: function addStave(stave) {\n            this.staves.push(stave);\n            this.updatePadding(this.staves.length - 1);\n        }\n    }, {\n        key: 'updatePadding',\n        value: function updatePadding(index) {\n            this.width -= this.totalPadding();\n            var stave = this.staves[index];\n            this.padding.left = Math.max(this.padding.left, stave.getNoteStartX() - stave.getX());\n            this.padding.right = Math.max(this.padding.right, stave.getWidth() - (stave.getNoteEndX() - stave.getX()));\n            this.width += this.totalPadding();\n        }\n    }, {\n        key: 'joinVoices',\n        value: function joinVoices(minWidth, barScale) {\n            var formatter = this.formatter = new Formatter();\n            this.voices.forEach(function (voice) {\n                formatter.joinVoices([voice]);\n            });\n            this.width += Math.max(this.formatter.preCalculateMinTotalWidth(this.voices) || minWidth, minWidth) * barScale;\n        }\n    }, {\n        key: 'adjustWidth',\n        value: function adjustWidth(maxWidth, row) {\n            this.width = this.widthNoPadding() / row.widthNoPadding() * (maxWidth - row.totalPadding()) + this.totalPadding();\n        }\n    }, {\n        key: 'format',\n        value: function format() {\n            this.formatter.format(this.voices, this.widthNoPadding());\n        }\n    }]);\n\n    return Measure;\n}();\n\nvar Group = function Group(name, abbr, count) {\n    _classCallCheck(this, Group);\n\n    this.name = name;\n    this.abbr = abbr;\n    this.count = count;\n    this.visible = true;\n};\n\nvar Row = function () {\n    function Row() {\n        _classCallCheck(this, Row);\n\n        this.measures = [];\n        this.width = 0;\n        this.padding = { left: 0, right: 0 };\n        this.rendered = false;\n    }\n\n    _createClass(Row, [{\n        key: 'addMeasure',\n        value: function addMeasure(measure) {\n            this.measures.push(measure);\n            measure.x = this.width;\n            this.width += measure.width;\n            this.padding.left += measure.padding.left;\n            this.padding.right += measure.padding.right;\n        }\n    }, {\n        key: 'widthNoPadding',\n        value: function widthNoPadding() {\n            return this.width - this.totalPadding();\n        }\n    }, {\n        key: 'totalPadding',\n        value: function totalPadding() {\n            return this.padding.left + this.padding.right;\n        }\n    }]);\n\n    return Row;\n}();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */
/***/ function(module, exports, __webpack_require__) {

eval("var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* styles */\n__webpack_require__(31)\n\n/* script */\n__vue_exports__ = __webpack_require__(23)\n\n/* template */\nvar __vue_template__ = __webpack_require__(35)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\nif (Object.keys(__vue_exports__).some(function (key) { return key !== \"default\" && key !== \"__esModule\" })) {console.error(\"named exports are not supported in *.vue files.\")}\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n__vue_options__.__file = \"/home/henri/ws-default/score-stage/score-stage-browser/src/pages/home/home.vue\"\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-1cf6d633\", __vue_options__)\n  } else {\n    hotAPI.reload(\"data-v-1cf6d633\", __vue_options__)\n  }\n})()}\nif (__vue_options__.functional) {console.error(\"[vue-loader] home.vue: functional components are not supported and should be defined in plain js files using render functions.\")}\n\nmodule.exports = __vue_exports__\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvaG9tZS9ob21lLnZ1ZT8xZjEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBcUc7O0FBRXJHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsbURBQW1ELElBQUk7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQztBQUNELGlDQUFpQzs7QUFFakMiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX192dWVfZXhwb3J0c19fLCBfX3Z1ZV9vcHRpb25zX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5cbi8qIHN0eWxlcyAqL1xucmVxdWlyZShcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2xvYWRlci5qcz97XFxcIm9taXRcXFwiOjEsXFxcInJlbW92ZVxcXCI6dHJ1ZX0hdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIXZ1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyP2lkPWRhdGEtdi0xY2Y2ZDYzMyF2dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vaG9tZS52dWVcIilcblxuLyogc2NyaXB0ICovXG5fX3Z1ZV9leHBvcnRzX18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL2hvbWUudnVlXCIpXG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP2lkPWRhdGEtdi0xY2Y2ZDYzMyF2dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9ob21lLnZ1ZVwiKVxuX192dWVfb3B0aW9uc19fID0gX192dWVfZXhwb3J0c19fID0gX192dWVfZXhwb3J0c19fIHx8IHt9XG5pZiAoXG4gIHR5cGVvZiBfX3Z1ZV9leHBvcnRzX18uZGVmYXVsdCA9PT0gXCJvYmplY3RcIiB8fFxuICB0eXBlb2YgX192dWVfZXhwb3J0c19fLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIlxuKSB7XG5pZiAoT2JqZWN0LmtleXMoX192dWVfZXhwb3J0c19fKS5zb21lKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIiB9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbl9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX2V4cG9ydHNfXyA9IF9fdnVlX2V4cG9ydHNfXy5kZWZhdWx0XG59XG5pZiAodHlwZW9mIF9fdnVlX29wdGlvbnNfXyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIF9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX29wdGlvbnNfXy5vcHRpb25zXG59XG5fX3Z1ZV9vcHRpb25zX18uX19maWxlID0gXCIvaG9tZS9oZW5yaS93cy1kZWZhdWx0L3Njb3JlLXN0YWdlL3Njb3JlLXN0YWdlLWJyb3dzZXIvc3JjL3BhZ2VzL2hvbWUvaG9tZS52dWVcIlxuX192dWVfb3B0aW9uc19fLnJlbmRlciA9IF9fdnVlX3RlbXBsYXRlX18ucmVuZGVyXG5fX3Z1ZV9vcHRpb25zX18uc3RhdGljUmVuZGVyRm5zID0gX192dWVfdGVtcGxhdGVfXy5zdGF0aWNSZW5kZXJGbnNcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTFjZjZkNjMzXCIsIF9fdnVlX29wdGlvbnNfXylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTFjZjZkNjMzXCIsIF9fdnVlX29wdGlvbnNfXylcbiAgfVxufSkoKX1cbmlmIChfX3Z1ZV9vcHRpb25zX18uZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gaG9tZS52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCBhbmQgc2hvdWxkIGJlIGRlZmluZWQgaW4gcGxhaW4ganMgZmlsZXMgdXNpbmcgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbm1vZHVsZS5leHBvcnRzID0gX192dWVfZXhwb3J0c19fXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wYWdlcy9ob21lL2hvbWUudnVlXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Proxies_mdCard__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ss_score_rows_vue__ = __webpack_require__(34);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ss_score_rows_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__ss_score_rows_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__types__ = __webpack_require__(15);\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ exports[\"default\"] = {\n    name: 'ss-music-score',\n    data: function data() {\n        return { groups: undefined, measures: undefined };\n    },\n\n    computed: {\n        loaded: function loaded() {\n            return this.measures && this.groups && true || false;\n        }\n    },\n    components: {\n        ssScoreRows: __WEBPACK_IMPORTED_MODULE_1__ss_score_rows_vue___default.a\n    },\n    created: function created() {\n        var _this = this;\n\n        // More accurate behaviour\n        setTimeout(function () {\n            _this.measures = [new __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* Measure */](new __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* TimeSignature */](3, 4), [], { begin: 'REPEAT' }), new __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* Measure */](new __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* TimeSignature */](3, 4), [], { end: 'REPEAT' }), new __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* Measure */](new __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* TimeSignature */](3, 4), [], { begin: 'REPEAT' }), new __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* Measure */](new __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* TimeSignature */](5, 8), []), new __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* Measure */](new __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* TimeSignature */](5, 8), []), new __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* Measure */](new __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* TimeSignature */](6, 8), []), new __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* Measure */](new __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* TimeSignature */](6, 8), [], { end: 'REPEAT' }), new __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* Measure */](new __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* TimeSignature */](6, 8), [], { begin: 'REPEAT', end: 'REPEAT' }), new __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* Measure */](new __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* TimeSignature */](3, 4), []), new __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* Measure */](new __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* TimeSignature */](2, 2), []), new __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* Measure */](new __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* TimeSignature */](4, 4), []), new __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* Measure */](new __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* TimeSignature */](4, 4), [], { end: 'END' })].map(function (measure) {\n\n                var ticks = [new __WEBPACK_IMPORTED_MODULE_2__types__[\"d\" /* Tick */](8, [new __WEBPACK_IMPORTED_MODULE_2__types__[\"e\" /* Note */]('a', 3, 'n')]), new __WEBPACK_IMPORTED_MODULE_2__types__[\"d\" /* Tick */](8, [new __WEBPACK_IMPORTED_MODULE_2__types__[\"e\" /* Note */]('b', 3, '#')]), new __WEBPACK_IMPORTED_MODULE_2__types__[\"d\" /* Tick */](2, []), new __WEBPACK_IMPORTED_MODULE_2__types__[\"d\" /* Tick */](4, []), new __WEBPACK_IMPORTED_MODULE_2__types__[\"d\" /* Tick */](2, [new __WEBPACK_IMPORTED_MODULE_2__types__[\"e\" /* Note */]('a', 3, 'n'), new __WEBPACK_IMPORTED_MODULE_2__types__[\"e\" /* Note */]('c', 4, 'n'), new __WEBPACK_IMPORTED_MODULE_2__types__[\"e\" /* Note */]('e', 4, 'b')])];\n\n                var bars = [new __WEBPACK_IMPORTED_MODULE_2__types__[\"f\" /* Bar */]('treble', 'C', ticks), new __WEBPACK_IMPORTED_MODULE_2__types__[\"f\" /* Bar */]('bass', 'Eb', ticks), new __WEBPACK_IMPORTED_MODULE_2__types__[\"f\" /* Bar */]('treble', 'Cb', ticks), new __WEBPACK_IMPORTED_MODULE_2__types__[\"f\" /* Bar */]('treble', 'E', ticks), new __WEBPACK_IMPORTED_MODULE_2__types__[\"f\" /* Bar */]('bass', 'Db', ticks), new __WEBPACK_IMPORTED_MODULE_2__types__[\"f\" /* Bar */]('bass', 'C#', ticks)];\n                measure.bars = bars;\n                return measure;\n            });\n\n            _this.groups = [new __WEBPACK_IMPORTED_MODULE_2__types__[\"g\" /* Group */]('Clarinet', 'Clt', 2), new __WEBPACK_IMPORTED_MODULE_2__types__[\"g\" /* Group */]('Trumpet', 'Tpt', 1), new __WEBPACK_IMPORTED_MODULE_2__types__[\"g\" /* Group */]('Flute', 'Flt', 3)];\n        }, 0);\n    }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3MtbXVzaWMtc2NvcmUudnVlPzc5MjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7O0FBRUE7VUFFQTswQkFDQTs4Q0FDQTtBQUNBOzs7a0NBRUE7MkRBQ0E7QUFFQTtBQUpBOztBQU9BO0FBRkE7O0FBR0E7O0FBQ0E7K0JBQ0E7Z0xBRUEsNkpBQ0EsK0pBQ0Esa0pBQ0EsMElBQ0EsMElBQ0EscUpBQ0EsOEtBQ0Esa0pBQ0EsMElBQ0EsMElBQ0EscUpBQ0EsaUNBRUE7OzRCQUNBLCtIQUNBLHNJQUNBLG9FQUNBLGlFQUNBLGlSQUdBOzsyQkFDQSx3RUFDQSw4RUFDQSxnRkFDQSwrRUFDQSw4RUFDQSw4RUFFQTsrQkFDQTt1QkFDQTtBQUVBLGFBbENBOzsyQkFtQ0EsOEVBQ0EsZ0ZBQ0EsOEVBRUE7V0FDQTtBQUNBO0FBekRBIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICAgIDxtZC1jYXJkIGNsYXNzPVwibWQtZmxleFwiIHN0eWxlPVwib3ZlcmZsb3c6IHZpc2libGU7XCI+XG4gICAgICAgIDxtZC1jYXJkLWNvbnRlbnQ+XG4gICAgICAgICAgICA8c3Mtc2NvcmUtcm93cyA6c3MtbWVhc3VyZXM9XCJtZWFzdXJlc1wiIDpzcy1ncm91cHM9XCJncm91cHNcIiA6c3MtYmFyLXNjYWxlPVwiMlwiPjwvc3Mtc2NvcmUtcm93cz5cbiAgICAgICAgPC9tZC1jYXJkLWNvbnRlbnQ+XG4gICAgPC9tZC1jYXJkPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCAnUHJveGllcy9tZENhcmQnO1xuaW1wb3J0IHNzU2NvcmVSb3dzIGZyb20gJy4vc3Mtc2NvcmUtcm93cy52dWUnO1xuaW1wb3J0IHsgTWVhc3VyZSwgVGltZVNpZ25hdHVyZSwgVGljaywgTm90ZSwgQmFyLCBHcm91cCB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZSA6ICdzcy1tdXNpYy1zY29yZScsXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHsgZ3JvdXBzIDogdW5kZWZpbmVkLCBtZWFzdXJlcyA6IHVuZGVmaW5lZCB9O1xuICAgIH0sXG4gICAgY29tcHV0ZWQgOiB7XG4gICAgICAgIGxvYWRlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5tZWFzdXJlcyAmJiB0aGlzLmdyb3VwcyAmJiB0cnVlKSB8fCBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29tcG9uZW50cyA6IHtcbiAgICAgICAgc3NTY29yZVJvd3NcbiAgICB9LFxuICAgIGNyZWF0ZWQoKSB7XG4gICAgICAgIC8vIE1vcmUgYWNjdXJhdGUgYmVoYXZpb3VyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tZWFzdXJlcyA9IFtcbiAgICAgICAgICAgICAgICBuZXcgTWVhc3VyZShuZXcgVGltZVNpZ25hdHVyZSgzLDQpLCBbXSwgeyBiZWdpbiA6ICdSRVBFQVQnIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBNZWFzdXJlKG5ldyBUaW1lU2lnbmF0dXJlKDMsNCksIFtdLCB7IGVuZCA6ICdSRVBFQVQnIH0pLFxuICAgICAgICAgICAgICAgIG5ldyBNZWFzdXJlKG5ldyBUaW1lU2lnbmF0dXJlKDMsNCksIFtdLCB7IGJlZ2luIDogJ1JFUEVBVCcgfSksXG4gICAgICAgICAgICAgICAgbmV3IE1lYXN1cmUobmV3IFRpbWVTaWduYXR1cmUoNSw4KSwgW10pLFxuICAgICAgICAgICAgICAgIG5ldyBNZWFzdXJlKG5ldyBUaW1lU2lnbmF0dXJlKDUsOCksIFtdKSxcbiAgICAgICAgICAgICAgICBuZXcgTWVhc3VyZShuZXcgVGltZVNpZ25hdHVyZSg2LDgpLCBbXSksXG4gICAgICAgICAgICAgICAgbmV3IE1lYXN1cmUobmV3IFRpbWVTaWduYXR1cmUoNiw4KSwgW10sIHsgZW5kIDogJ1JFUEVBVCcgfSksXG4gICAgICAgICAgICAgICAgbmV3IE1lYXN1cmUobmV3IFRpbWVTaWduYXR1cmUoNiw4KSwgW10sIHsgYmVnaW4gOiAnUkVQRUFUJywgZW5kIDogJ1JFUEVBVCcgfSksXG4gICAgICAgICAgICAgICAgbmV3IE1lYXN1cmUobmV3IFRpbWVTaWduYXR1cmUoMyw0KSwgW10pLFxuICAgICAgICAgICAgICAgIG5ldyBNZWFzdXJlKG5ldyBUaW1lU2lnbmF0dXJlKDIsMiksIFtdKSxcbiAgICAgICAgICAgICAgICBuZXcgTWVhc3VyZShuZXcgVGltZVNpZ25hdHVyZSg0LDQpLCBbXSksXG4gICAgICAgICAgICAgICAgbmV3IE1lYXN1cmUobmV3IFRpbWVTaWduYXR1cmUoNCw0KSwgW10sIHsgZW5kIDogJ0VORCcgfSlcbiAgICAgICAgICAgIF0ubWFwKGZ1bmN0aW9uKG1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgdGlja3MgPSBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUaWNrKDgsIFsgbmV3IE5vdGUoJ2EnLCAzLCAnbicpIF0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVGljayg4LCBbIG5ldyBOb3RlKCdiJywgMywgJyMnKSBdKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRpY2soMiwgW10pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgVGljayg0LCBbXSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUaWNrKDIsIFsgbmV3IE5vdGUoJ2EnLCAzLCAnbicpLCBuZXcgTm90ZSgnYycsIDQsICduJyksIG5ldyBOb3RlKCdlJywgNCwgJ2InKSBdKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IGJhcnMgPSBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBCYXIoJ3RyZWJsZScsICdDJywgdGlja3MpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQmFyKCdiYXNzJywgJ0ViJywgdGlja3MpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQmFyKCd0cmVibGUnLCAnQ2InLCB0aWNrcyksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBCYXIoJ3RyZWJsZScsICdFJywgdGlja3MpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQmFyKCdiYXNzJywgJ0RiJywgdGlja3MpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQmFyKCdiYXNzJywgJ0MjJywgdGlja3MpXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIG1lYXN1cmUuYmFycyA9IGJhcnM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lYXN1cmU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5ncm91cHMgPSBbXG4gICAgICAgICAgICAgICAgbmV3IEdyb3VwKCdDbGFyaW5ldCcsICdDbHQnLCAyKSxcbiAgICAgICAgICAgICAgICBuZXcgR3JvdXAoJ1RydW1wZXQnLCAnVHB0JywgMSksXG4gICAgICAgICAgICAgICAgbmV3IEdyb3VwKCdGbHV0ZScsICdGbHQnLCAzKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSwgMCk7XG4gICAgfVxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3MtbXVzaWMtc2NvcmUudnVlPzU3OTQxYjRmIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vexflow__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vexflow___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_vexflow__);\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//\n//\n//\n//\n\n\n\n\nvar _Vex$Flow = __WEBPACK_IMPORTED_MODULE_2_vexflow___default.a.Flow,\n    StaveModifier = _Vex$Flow.StaveModifier,\n    Renderer = _Vex$Flow.Renderer,\n    StaveConnector = _Vex$Flow.StaveConnector;\n\n\nfunction getBeginBarline(stave) {\n    return stave.getModifiers(StaveModifier.Position.BEGIN, 'barlines')[0];\n}\n\n/* harmony default export */ exports[\"default\"] = {\n    name: 'ss-score-row',\n    props: ['ssIndex', 'ssRow', 'ssGroups', 'ssWidth', 'ssMaxWidth', 'ssBarScale'],\n    data: function data() {\n        return { renderer: undefined, unwatch: undefined };\n    },\n\n    computed: {\n        renderData: function renderData() {\n            return { width: this.ssWidth, maxWidth: this.ssMaxWidth, barScale: this.ssBarScale, row: this.ssRow, groups: this.ssGroups, renderer: this.renderer };\n        }\n    },\n    methods: {\n        watch: function watch(data, oldData) {\n            var _this = this;\n\n            console.log('watch-trigger', this.ssIndex);\n            var width = data.width,\n                maxWidth = data.maxWidth,\n                barScale = data.barScale,\n                row = data.row,\n                groups = data.groups,\n                renderer = data.renderer;\n\n            if (!width || !maxWidth || !barScale || !row || !groups || !renderer) {\n                return;\n            }\n            this.unwatch();\n            this.unwatch = undefined;\n\n            var svg = this.$el.childNodes[0];\n            while (svg.lastChild) {\n                svg.removeChild(svg.lastChild);\n            }\n\n            var context = renderer.getContext();\n            var prev = undefined;\n            var height = 0;\n            row.measures.forEach(function (measure) {\n                measure.adjustWidth(maxWidth, row);\n                measure.x = prev && prev.x + prev.width || __WEBPACK_IMPORTED_MODULE_1__constants__[\"a\" /* default */].xShift;\n                measure.format();\n\n                var y = 0;\n                var barlineX = measure.x;\n                measure.staves.forEach(function (stave) {\n                    stave.setX(measure.x).setY(y).setWidth(measure.width).setNoteStartX(measure.x + measure.padding.left);\n                    y += stave.getBottomY() - stave.y;\n                    barlineX = Math.max(barlineX, getBeginBarline(stave).getX());\n                });\n                measure.staves.forEach(function (stave) {\n                    getBeginBarline(stave).setX(barlineX);\n                    stave.setContext(context).draw();\n                });\n\n                measure.voices.forEach(function (voice, index) {\n                    return voice.draw(context, measure.staves[index]);\n                });\n                measure.beams.forEach(function (beam) {\n                    return beam.setContext(context).draw();\n                });\n\n                var start = 0;\n                groups.forEach(function (group, index) {\n                    var end = index === groups.length - 1 ? measure.staves.length : start + group.count;\n\n                    var first = measure.staves[start];\n                    var last = measure.staves[end - 1];\n                    var connector = measure.vexEndLarge();\n                    new StaveConnector(first, last).setType(connector).setContext(context).draw();\n\n                    connector = measure.vexBeginLarge();\n                    var shift = barlineX - measure.x;\n                    if (!connector || shift !== 0) {\n                        var type = prev ? StaveConnector.type.SINGLE_LEFT : StaveConnector.type.DOUBLE;\n                        var conn = new StaveConnector(first, last).setType(type);\n                        if (!prev) {\n                            conn.setText(group.abbr);\n                        }\n                        conn.setContext(context).draw();\n                    }\n                    if (connector) {\n                        new StaveConnector(first, last).setType(connector).setContext(context).setXShift(shift).draw();\n                    }\n\n                    start = end;\n                });\n                if (!prev) {\n                    new StaveConnector(measure.staves[0], measure.staves[measure.staves.length - 1]).setType(StaveConnector.type.SINGLE_LEFT).setContext(context).draw();\n                }\n\n                prev = measure;\n                height = Math.max(height, y);\n            });\n            row.width = maxWidth;\n            renderer.resize(width, height);\n\n            __WEBPACK_IMPORTED_MODULE_0_vue___default.a.nextTick(function () {\n                _this.unwatch = _this.$watch('renderData', _this.watch);\n            });\n        }\n    },\n    mounted: function mounted() {\n        this.renderer = new Renderer(this.$el, Renderer.Backends.SVG);\n    },\n    created: function created() {\n        this.unwatch = this.$watch('renderData', this.watch);\n    }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3Mtc2NvcmUtcm93LnZ1ZT8zNzJmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBS0E7QUFDQTtBQUVBOzs7Ozs7O0FBRUEsZ0NBQ0E7d0VBQ0E7OztBQUVBO1VBRUE7cUVBQ0E7MEJBQ0E7K0NBQ0E7QUFDQTs7OzBDQUVBO3VKQUNBO0FBRUE7QUFKQTs7O0FBTUE7OzhDQUNBOzs7O3NCQUNBOzs7O2tGQUNBO0FBQ0E7QUFDQTtpQkFDQTsyQkFFQTs7MENBQ0E7a0NBQ0E7b0NBQ0E7QUFFQTs7bUNBQ0E7dUJBQ0E7eUJBQ0E7b0RBQ0E7OENBQ0E7dUhBQ0E7d0JBRUE7O3dCQUNBO3VDQUNBO3dEQUNBO29IQUNBO29EQUNBO3lFQUNBO0FBQ0E7d0RBQ0E7Z0RBQ0E7OENBQ0E7QUFFQTs7OzhEQUNBOzs7b0RBRUE7Ozs0QkFDQTt1REFDQTtrR0FFQTs7K0NBQ0E7b0RBQ0E7NENBQ0E7MkZBRUE7O3dDQUNBO21EQUNBO21EQUNBO2dHQUNBOzJFQUNBO21DQUNBOytDQUNBO0FBQ0E7aURBQ0E7QUFDQTttQ0FDQTtnSEFDQTtBQUVBOzs0QkFDQTtBQUNBOzJCQUNBO2tLQUNBO0FBRUE7O3VCQUNBOzBDQUNBO0FBQ0E7d0JBQ0E7bUNBRUE7OzZFQUNBO2lFQUNBO0FBQ0E7QUFFQTtBQTdFQTtnQ0E4RUE7aUVBQ0E7QUFDQTtnQ0FDQTtzREFDQTtBQUNBO0FBOUZBIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICAgIDxkaXY+PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IGNvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgVmV4IGZyb20gJ3ZleGZsb3cnO1xuY29uc3QgeyBTdGF2ZU1vZGlmaWVyLCBSZW5kZXJlciwgU3RhdmVDb25uZWN0b3IgfSA9IFZleC5GbG93O1xuXG5mdW5jdGlvbiBnZXRCZWdpbkJhcmxpbmUoc3RhdmUpIHtcbiAgICByZXR1cm4gc3RhdmUuZ2V0TW9kaWZpZXJzKFN0YXZlTW9kaWZpZXIuUG9zaXRpb24uQkVHSU4sICdiYXJsaW5lcycpWzBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZSA6ICdzcy1zY29yZS1yb3cnLFxuICAgIHByb3BzIDogWyAnc3NJbmRleCcsICdzc1JvdycsICdzc0dyb3VwcycsICdzc1dpZHRoJywgJ3NzTWF4V2lkdGgnLCAnc3NCYXJTY2FsZScgXSxcbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4geyByZW5kZXJlciA6IHVuZGVmaW5lZCwgdW53YXRjaCA6IHVuZGVmaW5lZCB9O1xuICAgIH0sXG4gICAgY29tcHV0ZWQgOiB7XG4gICAgICAgIHJlbmRlckRhdGEoKSB7XG4gICAgICAgICAgICByZXR1cm4geyB3aWR0aCA6IHRoaXMuc3NXaWR0aCwgbWF4V2lkdGggOiB0aGlzLnNzTWF4V2lkdGgsIGJhclNjYWxlIDogdGhpcy5zc0JhclNjYWxlLCByb3cgOiB0aGlzLnNzUm93LCBncm91cHMgOiB0aGlzLnNzR3JvdXBzLCByZW5kZXJlciA6IHRoaXMucmVuZGVyZXIgfTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kcyA6IHtcbiAgICAgICAgd2F0Y2goZGF0YSwgb2xkRGF0YSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3dhdGNoLXRyaWdnZXInLCB0aGlzLnNzSW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgeyB3aWR0aCwgbWF4V2lkdGgsIGJhclNjYWxlLCByb3csIGdyb3VwcywgcmVuZGVyZXIgfSA9IGRhdGE7XG4gICAgICAgICAgICBpZiAoIXdpZHRoIHx8ICFtYXhXaWR0aCB8fCAhYmFyU2NhbGUgfHwgIXJvdyB8fCAhZ3JvdXBzIHx8ICFyZW5kZXJlcikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudW53YXRjaCgpO1xuICAgICAgICAgICAgdGhpcy51bndhdGNoID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBjb25zdCBzdmcgPSB0aGlzLiRlbC5jaGlsZE5vZGVzWzBdO1xuICAgICAgICAgICAgd2hpbGUgKHN2Zy5sYXN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBzdmcucmVtb3ZlQ2hpbGQoc3ZnLmxhc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSByZW5kZXJlci5nZXRDb250ZXh0KCk7XG4gICAgICAgICAgICBsZXQgcHJldiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGxldCBoZWlnaHQgPSAwO1xuICAgICAgICAgICAgcm93Lm1lYXN1cmVzLmZvckVhY2gobWVhc3VyZSA9PiB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZS5hZGp1c3RXaWR0aChtYXhXaWR0aCwgcm93KTtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLnggPSAocHJldiAmJiAocHJldi54ICsgcHJldi53aWR0aCkpIHx8IGNvbnN0YW50cy54U2hpZnQ7XG4gICAgICAgICAgICAgICAgbWVhc3VyZS5mb3JtYXQoKTtcblxuICAgICAgICAgICAgICAgIGxldCB5ID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgYmFybGluZVggPSBtZWFzdXJlLng7XG4gICAgICAgICAgICAgICAgbWVhc3VyZS5zdGF2ZXMuZm9yRWFjaChzdGF2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXZlLnNldFgobWVhc3VyZS54KS5zZXRZKHkpLnNldFdpZHRoKG1lYXN1cmUud2lkdGgpLnNldE5vdGVTdGFydFgobWVhc3VyZS54ICsgbWVhc3VyZS5wYWRkaW5nLmxlZnQpO1xuICAgICAgICAgICAgICAgICAgICB5ICs9IHN0YXZlLmdldEJvdHRvbVkoKSAtIHN0YXZlLnk7XG4gICAgICAgICAgICAgICAgICAgIGJhcmxpbmVYID0gTWF0aC5tYXgoYmFybGluZVgsIGdldEJlZ2luQmFybGluZShzdGF2ZSkuZ2V0WCgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLnN0YXZlcy5mb3JFYWNoKHN0YXZlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0QmVnaW5CYXJsaW5lKHN0YXZlKS5zZXRYKGJhcmxpbmVYKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdmUuc2V0Q29udGV4dChjb250ZXh0KS5kcmF3KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbWVhc3VyZS52b2ljZXMuZm9yRWFjaCgodm9pY2UsIGluZGV4KSA9PiB2b2ljZS5kcmF3KGNvbnRleHQsIG1lYXN1cmUuc3RhdmVzW2luZGV4XSkpO1xuICAgICAgICAgICAgICAgIG1lYXN1cmUuYmVhbXMuZm9yRWFjaChiZWFtID0+IGJlYW0uc2V0Q29udGV4dChjb250ZXh0KS5kcmF3KCkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBzdGFydCA9IDA7XG4gICAgICAgICAgICAgICAgZ3JvdXBzLmZvckVhY2goKGdyb3VwLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBpbmRleCA9PT0gKGdyb3Vwcy5sZW5ndGggLSAxKSA/IG1lYXN1cmUuc3RhdmVzLmxlbmd0aCA6IHN0YXJ0ICsgZ3JvdXAuY291bnQ7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdCA9IG1lYXN1cmUuc3RhdmVzW3N0YXJ0XTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdCA9IG1lYXN1cmUuc3RhdmVzW2VuZCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29ubmVjdG9yID0gbWVhc3VyZS52ZXhFbmRMYXJnZSgpO1xuICAgICAgICAgICAgICAgICAgICBuZXcgU3RhdmVDb25uZWN0b3IoZmlyc3QsIGxhc3QpLnNldFR5cGUoY29ubmVjdG9yKS5zZXRDb250ZXh0KGNvbnRleHQpLmRyYXcoKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3RvciA9IG1lYXN1cmUudmV4QmVnaW5MYXJnZSgpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2hpZnQgPSBiYXJsaW5lWCAtIG1lYXN1cmUueDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25uZWN0b3IgfHwgc2hpZnQgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0eXBlID0gcHJldiA/IFN0YXZlQ29ubmVjdG9yLnR5cGUuU0lOR0xFX0xFRlQgOiBTdGF2ZUNvbm5lY3Rvci50eXBlLkRPVUJMRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb25uID0gbmV3IFN0YXZlQ29ubmVjdG9yKGZpcnN0LCBsYXN0KS5zZXRUeXBlKHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubi5zZXRUZXh0KGdyb3VwLmFiYnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubi5zZXRDb250ZXh0KGNvbnRleHQpLmRyYXcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29ubmVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgU3RhdmVDb25uZWN0b3IoZmlyc3QsIGxhc3QpLnNldFR5cGUoY29ubmVjdG9yKS5zZXRDb250ZXh0KGNvbnRleHQpLnNldFhTaGlmdChzaGlmdCkuZHJhdygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGVuZDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFN0YXZlQ29ubmVjdG9yKG1lYXN1cmUuc3RhdmVzWzBdLCBtZWFzdXJlLnN0YXZlc1ttZWFzdXJlLnN0YXZlcy5sZW5ndGggLSAxXSkuc2V0VHlwZShTdGF2ZUNvbm5lY3Rvci50eXBlLlNJTkdMRV9MRUZUKS5zZXRDb250ZXh0KGNvbnRleHQpLmRyYXcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcHJldiA9IG1lYXN1cmU7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0LCB5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcm93LndpZHRoID0gbWF4V2lkdGg7XG4gICAgICAgICAgICByZW5kZXJlci5yZXNpemUod2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgICAgIFZ1ZS5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy51bndhdGNoID0gdGhpcy4kd2F0Y2goJ3JlbmRlckRhdGEnLCB0aGlzLndhdGNoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKHRoaXMuJGVsLCBSZW5kZXJlci5CYWNrZW5kcy5TVkcpO1xuICAgIH0sXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgICAgdGhpcy51bndhdGNoID0gdGhpcy4kd2F0Y2goJ3JlbmRlckRhdGEnLCB0aGlzLndhdGNoKTtcbiAgICB9LFxufVxuPC9zY3JpcHQ+XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNzLXNjb3JlLXJvdy52dWU/ZmJiODk4NWEiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Proxies_mdLayout__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ss_score_row_vue__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ss_score_row_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__ss_score_row_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_Directives_watch__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_Directives_watch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_Directives_watch__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__constants__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__types__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_vexflow__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_vexflow___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_vexflow__);\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\nvar _Vex$Flow = __WEBPACK_IMPORTED_MODULE_6_vexflow___default.a.Flow,\n    StaveNote = _Vex$Flow.StaveNote,\n    Beam = _Vex$Flow.Beam,\n    Voice = _Vex$Flow.Voice,\n    Accidental = _Vex$Flow.Accidental,\n    Stave = _Vex$Flow.Stave;\n\n\nfunction getPrev(measure, index) {\n    return measure && measure.bars[index];\n}\n\n/* harmony default export */ exports[\"default\"] = {\n    name: 'ss-score-rows',\n    props: ['ssMeasures', 'ssGroups', 'ssBarScale'],\n    data: function data() {\n        return { width: 0, maxWidth: 0 };\n    },\n\n    computed: {\n        rows: function rows() {\n            var _this = this;\n\n            if (!this.width || !this.maxWidth || !this.ssBarScale || !this.ssMeasures) {\n                return undefined;\n            }\n\n            var rows = [];\n            var prevMeasure = undefined;\n            this.ssMeasures.forEach(function (measure, mIndex) {\n                measure.reset();\n                measure.bars.forEach(function (bar, bIndex) {\n                    var prev = getPrev(prevMeasure, bIndex);\n\n                    // ** CREATE VOICE ** //\n\n                    var notes = bar.ticks.map(function (tick) {\n                        var keys = tick.notes.map(function (note) {\n                            return note.letter + note.accidental + '/' + note.octave;\n                        });\n                        var duration = tick.duration + '';\n                        if (tick.isRest()) {\n                            keys = ['r/4'];\n                            duration += 'r';\n                        }\n                        return new StaveNote({ clef: bar.clef, keys: keys, duration: duration, auto_stem: true });\n                    });\n                    // Connect notes\n                    Beam.generateBeams(notes).forEach(function (beam) {\n                        return measure.beams.push(beam);\n                    });\n                    var voice = new Voice({ beat_value: measure.timeSig.upper, num_beats: measure.timeSig.lower }).setStrict(false).addTickables(notes);\n                    // Display correct accidentals\n                    Accidental.applyAccidentals([voice], bar.keySig);\n                    measure.voices.push(voice);\n\n                    // ** CREATE STAVE ** //\n\n                    var stave = new Stave(0, 0, _this.maxWidth);\n                    // Set bar begin\n                    var modifier = measure.vexBegin();\n                    if (modifier) {\n                        stave.setBegBarType(modifier);\n                    }\n                    // Set bar end\n                    modifier = measure.vexEnd();\n                    if (modifier) {\n                        stave.setEndBarType(modifier);\n                    }\n                    // Add time signature if necessary\n                    if (!prevMeasure || prevMeasure.timeSig.vexFormat !== measure.timeSig.vexFormat) {\n                        stave.addTimeSignature(measure.timeSig.vexFormat);\n                    }\n                    // Add key signature if necessary\n                    if (!prev || prev.keySig !== bar.keySig) {\n                        stave.setKeySignature(bar.keySig, prev && prev.keySig);\n                    }\n                    // Add clef\n                    stave.clef = bar.clef;\n                    if (!prev || prev.clef !== bar.clef) {\n                        stave.setClef(bar.clef);\n                    }\n                    measure.addStave(stave);\n                });\n                measure.joinVoices(__WEBPACK_IMPORTED_MODULE_4__constants__[\"a\" /* default */].minWidth, _this.ssBarScale);\n                var row = rows.length && rows[rows.length - 1];\n\n                // New Row\n                if (!row || row.width + measure.width > _this.maxWidth) {\n                    row = new __WEBPACK_IMPORTED_MODULE_5__types__[\"a\" /* Row */]();\n                    rows.push(row);\n                    measure.bars.forEach(function (bar, bIndex) {\n                        var prev = getPrev(prevMeasure, bIndex);\n                        var cancelKey = prev && prev.keySig !== bar.keySig && prev.keySig;\n                        measure.staves[bIndex].setClef(bar.clef).setKeySignature(bar.keySig, cancelKey);\n                        measure.updatePadding(bIndex);\n                    });\n                }\n                row.addMeasure(measure);\n                prevMeasure = measure;\n            });\n            return rows;\n        }\n    },\n    methods: {\n        onWidthChanged: function onWidthChanged(data) {\n            this.width = data.newWidth;\n            this.maxWidth = this.width - 1 - __WEBPACK_IMPORTED_MODULE_4__constants__[\"a\" /* default */].xShift;\n        }\n    },\n    components: {\n        ssScoreRow: __WEBPACK_IMPORTED_MODULE_2__ss_score_row_vue___default.a\n    }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3Mtc2NvcmUtcm93cy52dWU/M2U5ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQUVBLGlDQUNBO21DQUNBOzs7QUFFQTtVQUVBO3NDQUNBOzBCQUNBO3FDQUNBO0FBQ0E7Ozs7QUFFQTs7dUZBQ0E7dUJBQ0E7QUFFQTs7dUJBQ0E7OEJBQ0E7K0RBQ0E7d0JBQ0E7NERBQ0E7b0RBRUE7O0FBRUE7OzhEQUNBOzs4RUFDQTs7dURBQ0E7MkNBQ0E7b0NBQ0E7d0NBQ0E7QUFDQTswR0FDQTtBQUNBO0FBQ0E7O2tEQUNBOztpSkFDQTtBQUNBOzZEQUNBO3dDQUVBOztBQUVBOztzREFDQTtBQUNBOzJDQUNBO2tDQUNBOzRDQUNBO0FBQ0E7QUFDQTt1Q0FDQTtrQ0FDQTs0Q0FDQTtBQUNBO0FBQ0E7cUdBQ0E7K0RBQ0E7QUFDQTtBQUNBOzZEQUNBO3VFQUNBO0FBQ0E7QUFDQTtxQ0FDQTt5REFDQTswQ0FDQTtBQUNBO3FDQUNBO0FBQ0E7K0dBQ0E7NERBRUE7O0FBQ0E7d0VBQ0E7OEJBQ0E7OEJBQ0E7Z0VBQ0E7d0RBQ0E7bUZBQ0E7NkZBQ0E7OENBQ0E7QUFDQTtBQUNBOytCQUNBOzhCQUNBO0FBQ0E7bUJBQ0E7QUFFQTtBQTlFQTs7c0RBZ0ZBOzhCQUNBO3lHQUNBO0FBRUE7QUFMQTs7QUFRQTtBQUZBO0FBM0ZBIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICAgIDxtZC1sYXlvdXQgbWQtY29sdW1uIG1kLWZsZXggdi13YXRjaC53aWR0aD1cIm9uV2lkdGhDaGFuZ2VkXCI+XG4gICAgICAgIDxzcy1zY29yZS1yb3cgdi1mb3I9XCIocm93LCBpbmRleCkgaW4gcm93c1wiIDpzcy1pbmRleD1cImluZGV4XCIgOnNzLXJvdz1cInJvd1wiIDpzcy1ncm91cHM9XCJzc0dyb3Vwc1wiIDpzcy13aWR0aD1cIndpZHRoXCIgOnNzLW1heC13aWR0aD1cIm1heFdpZHRoXCIgOnNzLWJhci1zY2FsZT1cInNzQmFyU2NhbGVcIj48L3NzLXNjb3JlLXJvdz5cbiAgICA8L21kLWxheW91dD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgJ1Byb3hpZXMvbWRMYXlvdXQnO1xuaW1wb3J0IHNzU2NvcmVSb3cgZnJvbSAnLi9zcy1zY29yZS1yb3cudnVlJztcbmltcG9ydCAnRGlyZWN0aXZlcy93YXRjaCc7XG5pbXBvcnQgY29uc3RhbnRzIGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IFJvdyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IFZleCBmcm9tICd2ZXhmbG93JztcbmNvbnN0IHsgU3RhdmVOb3RlLCBCZWFtLCBWb2ljZSwgQWNjaWRlbnRhbCwgU3RhdmUgfSA9IFZleC5GbG93O1xuXG5mdW5jdGlvbiBnZXRQcmV2KG1lYXN1cmUsIGluZGV4KSB7XG4gICAgcmV0dXJuIG1lYXN1cmUgJiYgbWVhc3VyZS5iYXJzW2luZGV4XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWUgOiAnc3Mtc2NvcmUtcm93cycsXG4gICAgcHJvcHMgOiBbICdzc01lYXN1cmVzJywgJ3NzR3JvdXBzJywgJ3NzQmFyU2NhbGUnIF0sXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHsgd2lkdGggOiAwLCBtYXhXaWR0aCA6IDAgfTtcbiAgICB9LFxuICAgIGNvbXB1dGVkIDoge1xuICAgICAgICByb3dzKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLndpZHRoIHx8ICF0aGlzLm1heFdpZHRoIHx8ICF0aGlzLnNzQmFyU2NhbGUgfHwgIXRoaXMuc3NNZWFzdXJlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJvd3MgPSBbXTtcbiAgICAgICAgICAgIGxldCBwcmV2TWVhc3VyZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuc3NNZWFzdXJlcy5mb3JFYWNoKChtZWFzdXJlLCBtSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgbWVhc3VyZS5iYXJzLmZvckVhY2goKGJhciwgYkluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBnZXRQcmV2KHByZXZNZWFzdXJlLCBiSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gKiogQ1JFQVRFIFZPSUNFICoqIC8vXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBub3RlcyA9IGJhci50aWNrcy5tYXAodGljayA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQga2V5cyA9IHRpY2subm90ZXMubWFwKG5vdGUgPT4gbm90ZS5sZXR0ZXIgKyBub3RlLmFjY2lkZW50YWwgKyAnLycgKyBub3RlLm9jdGF2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZHVyYXRpb24gPSB0aWNrLmR1cmF0aW9uICsgJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGljay5pc1Jlc3QoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXMgPSBbICdyLzQnIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gKz0gJ3InO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGF2ZU5vdGUoeyBjbGVmIDogYmFyLmNsZWYsIGtleXMgOiBrZXlzLCBkdXJhdGlvbiA6IGR1cmF0aW9uLCBhdXRvX3N0ZW06IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBDb25uZWN0IG5vdGVzXG4gICAgICAgICAgICAgICAgICAgIEJlYW0uZ2VuZXJhdGVCZWFtcyhub3RlcykuZm9yRWFjaChiZWFtID0+IG1lYXN1cmUuYmVhbXMucHVzaChiZWFtKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZvaWNlID0gbmV3IFZvaWNlKHsgYmVhdF92YWx1ZSA6IG1lYXN1cmUudGltZVNpZy51cHBlciwgbnVtX2JlYXRzIDogbWVhc3VyZS50aW1lU2lnLmxvd2VyIH0pLnNldFN0cmljdChmYWxzZSkuYWRkVGlja2FibGVzKG5vdGVzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGxheSBjb3JyZWN0IGFjY2lkZW50YWxzXG4gICAgICAgICAgICAgICAgICAgIEFjY2lkZW50YWwuYXBwbHlBY2NpZGVudGFscyhbIHZvaWNlIF0sIGJhci5rZXlTaWcpO1xuICAgICAgICAgICAgICAgICAgICBtZWFzdXJlLnZvaWNlcy5wdXNoKHZvaWNlKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vICoqIENSRUFURSBTVEFWRSAqKiAvL1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdmUgPSBuZXcgU3RhdmUoMCwgMCwgdGhpcy5tYXhXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBiYXIgYmVnaW5cbiAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGlmaWVyID0gbWVhc3VyZS52ZXhCZWdpbigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXZlLnNldEJlZ0JhclR5cGUobW9kaWZpZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBiYXIgZW5kXG4gICAgICAgICAgICAgICAgICAgIG1vZGlmaWVyID0gbWVhc3VyZS52ZXhFbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGlmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF2ZS5zZXRFbmRCYXJUeXBlKG1vZGlmaWVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGltZSBzaWduYXR1cmUgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJldk1lYXN1cmUgfHwgcHJldk1lYXN1cmUudGltZVNpZy52ZXhGb3JtYXQgIT09IG1lYXN1cmUudGltZVNpZy52ZXhGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXZlLmFkZFRpbWVTaWduYXR1cmUobWVhc3VyZS50aW1lU2lnLnZleEZvcm1hdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIGtleSBzaWduYXR1cmUgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJldiB8fCBwcmV2LmtleVNpZyAhPT0gYmFyLmtleVNpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdmUuc2V0S2V5U2lnbmF0dXJlKGJhci5rZXlTaWcsIHByZXYgJiYgcHJldi5rZXlTaWcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBjbGVmXG4gICAgICAgICAgICAgICAgICAgIHN0YXZlLmNsZWYgPSBiYXIuY2xlZjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmV2IHx8IHByZXYuY2xlZiAhPT0gYmFyLmNsZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXZlLnNldENsZWYoYmFyLmNsZWYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lYXN1cmUuYWRkU3RhdmUoc3RhdmUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1lYXN1cmUuam9pblZvaWNlcyhjb25zdGFudHMubWluV2lkdGgsIHRoaXMuc3NCYXJTY2FsZSk7XG4gICAgICAgICAgICAgICAgbGV0IHJvdyA9IHJvd3MubGVuZ3RoICYmIHJvd3Nbcm93cy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBOZXcgUm93XG4gICAgICAgICAgICAgICAgaWYgKCFyb3cgfHwgKHJvdy53aWR0aCArIG1lYXN1cmUud2lkdGgpID4gdGhpcy5tYXhXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICByb3cgPSBuZXcgUm93KCk7XG4gICAgICAgICAgICAgICAgICAgIHJvd3MucHVzaChyb3cpO1xuICAgICAgICAgICAgICAgICAgICBtZWFzdXJlLmJhcnMuZm9yRWFjaCgoYmFyLCBiSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcmV2ID0gZ2V0UHJldihwcmV2TWVhc3VyZSwgYkluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYW5jZWxLZXkgPSBwcmV2ICYmIHByZXYua2V5U2lnICE9PSBiYXIua2V5U2lnICYmIHByZXYua2V5U2lnO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZS5zdGF2ZXNbYkluZGV4XS5zZXRDbGVmKGJhci5jbGVmKS5zZXRLZXlTaWduYXR1cmUoYmFyLmtleVNpZywgY2FuY2VsS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lYXN1cmUudXBkYXRlUGFkZGluZyhiSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcm93LmFkZE1lYXN1cmUobWVhc3VyZSk7XG4gICAgICAgICAgICAgICAgcHJldk1lYXN1cmUgPSBtZWFzdXJlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcm93cztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kcyA6IHtcbiAgICAgICAgb25XaWR0aENoYW5nZWQoZGF0YSkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IGRhdGEubmV3V2lkdGg7XG4gICAgICAgICAgICB0aGlzLm1heFdpZHRoID0gdGhpcy53aWR0aCAtIDEgLSBjb25zdGFudHMueFNoaWZ0O1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjb21wb25lbnRzIDoge1xuICAgICAgICBzc1Njb3JlUm93XG4gICAgfVxufVxuPC9zY3JpcHQ+XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNzLXNjb3JlLXJvd3MudnVlPzc5OTY2NjBhIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_Proxies_mdToolbar__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_Proxies_mdLayout__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Components_ss_music_score__ = __webpack_require__(24);\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ exports[\"default\"] = {\n    name: 'home',\n    components: {\n        ssMusicScore: __WEBPACK_IMPORTED_MODULE_2_Components_ss_music_score__[\"a\" /* default */]\n    }\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vaG9tZS52dWU/OWI3MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkE7QUFDQTtBQUNBOztBQUVBO1VBRUE7O0FBR0E7QUFGQTtBQUZBIiwiZmlsZSI6IjIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICAgIDxkaXYgaWQ9XCJob21lXCI+XG4gICAgICAgIDxtZC10b29sYmFyPlxuICAgICAgICAgICAgPGgyIGNsYXNzPVwibWQtdGl0bGVcIj5Ib21lPC9oMj5cbiAgICAgICAgPC9tZC10b29sYmFyPlxuXG4gICAgICAgIDxtZC1sYXlvdXQgbWQtcm93PlxuICAgICAgICAgICAgPG1kLWxheW91dCBtZC1mbGV4PVwiMTVcIiBtZC1oaWRlLXNtYWxsIG1kLWhpZGUteHNtYWxsPjwvbWQtbGF5b3V0PlxuICAgICAgICAgICAgPG1kLWxheW91dCBtZC1mbGV4PVwiNzBcIiBtZC1mbGV4LXNtYWxsPVwiMTAwXCIgbWQtZmxleC14c21hbGw9XCIxMDBcIiBjbGFzcz1cIm1kLXBhZGRpbmdcIj5cbiAgICAgICAgICAgICAgICA8c3MtbXVzaWMtc2NvcmU+PC9zcy1tdXNpYy1zY29yZT5cbiAgICAgICAgICAgIDwvbWQtbGF5b3V0PlxuICAgICAgICAgICAgPG1kLWxheW91dCBtZC1mbGV4PVwiMTVcIiBtZC1oaWRlLXNtYWxsIG1kLWhpZGUteHNtYWxsPjwvbWQtbGF5b3V0PlxuICAgICAgICA8L21kLWxheW91dD5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgJ1Byb3hpZXMvbWRUb29sYmFyJztcbmltcG9ydCAnUHJveGllcy9tZExheW91dCc7XG5pbXBvcnQgc3NNdXNpY1Njb3JlIGZyb20gJ0NvbXBvbmVudHMvc3MtbXVzaWMtc2NvcmUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgbmFtZSA6ICdob21lJyxcbiAgICBjb21wb25lbnRzIDoge1xuICAgICAgICBzc011c2ljU2NvcmVcbiAgICB9XG59XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuYm9keSB7XG4gICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xufVxuPC9zdHlsZT5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gaG9tZS52dWU/ZjIwMzcxZTQiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ss_music_score_vue__ = __webpack_require__(32);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ss_music_score_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__ss_music_score_vue__);\n\n/* harmony default export */ exports[\"a\"] = __WEBPACK_IMPORTED_MODULE_0__ss_music_score_vue___default.a;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zcy1tdXNpYy1zY29yZS9pbmRleC5qcz84NDIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSw0Q0FBZSwyREFBZiIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzc011c2ljU2NvcmUgZnJvbSAnLi9zcy1tdXNpYy1zY29yZS52dWUnO1xuZXhwb3J0IGRlZmF1bHQgc3NNdXNpY1Njb3JlXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvc3MtbXVzaWMtc2NvcmUvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n\n\n__WEBPACK_IMPORTED_MODULE_0_vue___default.a.directive('watch', {\n    bind: function bind(el, binding) {\n        var checkWidth = binding.modifiers.width;\n        var checkHeight = binding.modifiers.height;\n        if (!checkWidth && !checkHeight) {\n            checkWidth = checkHeight = true;\n        }\n        var width = el.offsetWidth;\n        var height = el.offsetHeight;\n\n        function watch() {\n            if (el.dataset.watchCancel) {\n                return;\n            }\n\n            var newWidth = el.offsetWidth;\n            var newHeight = el.offsetHeight;\n            if (checkWidth && newWidth !== width || checkHeight && newHeight !== height) {\n                binding.value({ oldWidth: width, newWidth: newWidth, oldHeight: height, newHeight: newHeight });\n                width = newWidth;\n                height = newHeight;\n            }\n            requestAnimationFrame(watch);\n        }\n        requestAnimationFrame(watch);\n    },\n    unbind: function unbind(el) {\n        el.dataset.watchCancel = true;\n    }\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvZGlyZWN0aXZlcy93YXRjaC5qcz85NTE0Il0sIm5hbWVzIjpbIlZ1ZSIsImRpcmVjdGl2ZSIsImJpbmQiLCJlbCIsImJpbmRpbmciLCJjaGVja1dpZHRoIiwibW9kaWZpZXJzIiwid2lkdGgiLCJjaGVja0hlaWdodCIsImhlaWdodCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0Iiwid2F0Y2giLCJkYXRhc2V0Iiwid2F0Y2hDYW5jZWwiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsInZhbHVlIiwib2xkV2lkdGgiLCJvbGRIZWlnaHQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1bmJpbmQiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsMkNBQUFBLENBQUlDLFNBQUosQ0FBYyxPQUFkLEVBQXVCO0FBQ25CQyxRQURtQixnQkFDZEMsRUFEYyxFQUNWQyxPQURVLEVBQ0Q7QUFDZCxZQUFJQyxhQUFhRCxRQUFRRSxTQUFSLENBQWtCQyxLQUFuQztBQUNBLFlBQUlDLGNBQWNKLFFBQVFFLFNBQVIsQ0FBa0JHLE1BQXBDO0FBQ0EsWUFBSSxDQUFDSixVQUFELElBQWUsQ0FBQ0csV0FBcEIsRUFBaUM7QUFDN0JILHlCQUFhRyxjQUFjLElBQTNCO0FBQ0g7QUFDRCxZQUFJRCxRQUFRSixHQUFHTyxXQUFmO0FBQ0EsWUFBSUQsU0FBU04sR0FBR1EsWUFBaEI7O0FBRUEsaUJBQVNDLEtBQVQsR0FBaUI7QUFDYixnQkFBSVQsR0FBR1UsT0FBSCxDQUFXQyxXQUFmLEVBQTRCO0FBQ3hCO0FBQ0g7O0FBRUQsZ0JBQU1DLFdBQVdaLEdBQUdPLFdBQXBCO0FBQ0EsZ0JBQU1NLFlBQVliLEdBQUdRLFlBQXJCO0FBQ0EsZ0JBQUtOLGNBQWNVLGFBQWFSLEtBQTVCLElBQXVDQyxlQUFlUSxjQUFjUCxNQUF4RSxFQUFpRjtBQUM3RUwsd0JBQVFhLEtBQVIsQ0FBYyxFQUFFQyxVQUFXWCxLQUFiLEVBQW9CUSxrQkFBcEIsRUFBOEJJLFdBQVlWLE1BQTFDLEVBQWtETyxvQkFBbEQsRUFBZDtBQUNBVCx3QkFBUVEsUUFBUjtBQUNBTix5QkFBU08sU0FBVDtBQUNIO0FBQ0RJLGtDQUFzQlIsS0FBdEI7QUFDSDtBQUNEUSw4QkFBc0JSLEtBQXRCO0FBQ0gsS0F6QmtCO0FBMEJuQlMsVUExQm1CLGtCQTBCWmxCLEVBMUJZLEVBMEJSO0FBQ1BBLFdBQUdVLE9BQUgsQ0FBV0MsV0FBWCxHQUF5QixJQUF6QjtBQUNIO0FBNUJrQixDQUF2QiIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJztcblxuVnVlLmRpcmVjdGl2ZSgnd2F0Y2gnLCB7XG4gICAgYmluZChlbCwgYmluZGluZykge1xuICAgICAgICBsZXQgY2hlY2tXaWR0aCA9IGJpbmRpbmcubW9kaWZpZXJzLndpZHRoO1xuICAgICAgICBsZXQgY2hlY2tIZWlnaHQgPSBiaW5kaW5nLm1vZGlmaWVycy5oZWlnaHQ7XG4gICAgICAgIGlmICghY2hlY2tXaWR0aCAmJiAhY2hlY2tIZWlnaHQpIHtcbiAgICAgICAgICAgIGNoZWNrV2lkdGggPSBjaGVja0hlaWdodCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHdpZHRoID0gZWwub2Zmc2V0V2lkdGg7XG4gICAgICAgIGxldCBoZWlnaHQgPSBlbC5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgICAgZnVuY3Rpb24gd2F0Y2goKSB7XG4gICAgICAgICAgICBpZiAoZWwuZGF0YXNldC53YXRjaENhbmNlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgbmV3V2lkdGggPSBlbC5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IG5ld0hlaWdodCA9IGVsLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIGlmICgoY2hlY2tXaWR0aCAmJiBuZXdXaWR0aCAhPT0gd2lkdGgpIHx8IChjaGVja0hlaWdodCAmJiBuZXdIZWlnaHQgIT09IGhlaWdodCkpIHtcbiAgICAgICAgICAgICAgICBiaW5kaW5nLnZhbHVlKHsgb2xkV2lkdGggOiB3aWR0aCwgbmV3V2lkdGgsIG9sZEhlaWdodCA6IGhlaWdodCwgbmV3SGVpZ2h0IH0pO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gbmV3V2lkdGg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHdhdGNoKTtcbiAgICAgICAgfVxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUod2F0Y2gpO1xuICAgIH0sXG4gICAgdW5iaW5kKGVsKSB7XG4gICAgICAgIGVsLmRhdGFzZXQud2F0Y2hDYW5jZWwgPSB0cnVlO1xuICAgIH1cbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9kaXJlY3RpdmVzL3dhdGNoLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mdCore__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdToolbar__ = __webpack_require__(42);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdToolbar___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdToolbar__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_material_dist_components_mdToolbar_index_css__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_material_dist_components_mdToolbar_index_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_vue_material_dist_components_mdToolbar_index_css__);\n\n\n\n\n\nif (!__WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdToolbar___default.a.installed) {\n    __WEBPACK_IMPORTED_MODULE_0_vue___default.a.use(__WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdToolbar___default.a);\n}\n\n/* unused harmony default export */ var _unused_webpack_default_export = __WEBPACK_IMPORTED_MODULE_2_vue_material_dist_components_mdToolbar___default.a;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcHJveGllcy9tZFRvb2xiYXIuanM/MWM5NCJdLCJuYW1lcyI6WyJtZFRvb2xiYXIiLCJpbnN0YWxsZWQiLCJWdWUiLCJ1c2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLENBQUMsOEVBQUFBLENBQVVDLFNBQWYsRUFBMEI7QUFDdEJDLElBQUEsMkNBQUFBLENBQUlDLEdBQUosQ0FBUSw4RUFBUjtBQUNIOztBQUVELHlFQUFlLDhFQUFmIiwiZmlsZSI6IjI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuL21kQ29yZSc7XG5pbXBvcnQgbWRUb29sYmFyIGZyb20gJ3Z1ZS1tYXRlcmlhbC9kaXN0L2NvbXBvbmVudHMvbWRUb29sYmFyJztcbmltcG9ydCAndnVlLW1hdGVyaWFsL2Rpc3QvY29tcG9uZW50cy9tZFRvb2xiYXIvaW5kZXguY3NzJztcblxuaWYgKCFtZFRvb2xiYXIuaW5zdGFsbGVkKSB7XG4gICAgVnVlLnVzZShtZFRvb2xiYXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZFRvb2xiYXJcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcHJveGllcy9tZFRvb2xiYXIuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */
/***/ function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1tYXRlcmlhbC9kaXN0L2NvbXBvbmVudHMvbWRUb29sYmFyL2luZGV4LmNzcz81MzVmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLW1hdGVyaWFsL2Rpc3QvY29tcG9uZW50cy9tZFRvb2xiYXIvaW5kZXguY3NzXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 31 */
/***/ function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvaG9tZS9ob21lLnZ1ZT80ZDI0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vfi92dWUtc3R5bGUtbG9hZGVyIS4vfi9jc3MtbG9hZGVyIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1yZXdyaXRlci5qcz9pZD1kYXRhLXYtMWNmNmQ2MzMhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvcGFnZXMvaG9tZS9ob21lLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

eval("var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = __webpack_require__(20)\n\n/* template */\nvar __vue_template__ = __webpack_require__(37)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\nif (Object.keys(__vue_exports__).some(function (key) { return key !== \"default\" && key !== \"__esModule\" })) {console.error(\"named exports are not supported in *.vue files.\")}\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n__vue_options__.__file = \"/home/henri/ws-default/score-stage/score-stage-browser/src/components/ss-music-score/ss-music-score.vue\"\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-52548077\", __vue_options__)\n  } else {\n    hotAPI.reload(\"data-v-52548077\", __vue_options__)\n  }\n})()}\nif (__vue_options__.functional) {console.error(\"[vue-loader] ss-music-score.vue: functional components are not supported and should be defined in plain js files using render functions.\")}\n\nmodule.exports = __vue_exports__\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zcy1tdXNpYy1zY29yZS9zcy1tdXNpYy1zY29yZS52dWU/MTU2ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsbURBQW1ELElBQUk7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQztBQUNELGlDQUFpQzs7QUFFakMiLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX192dWVfZXhwb3J0c19fLCBfX3Z1ZV9vcHRpb25zX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5cbi8qIHNjcmlwdCAqL1xuX192dWVfZXhwb3J0c19fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIXZ1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9zcy1tdXNpYy1zY29yZS52dWVcIilcblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/aWQ9ZGF0YS12LTUyNTQ4MDc3IXZ1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NzLW11c2ljLXNjb3JlLnZ1ZVwiKVxuX192dWVfb3B0aW9uc19fID0gX192dWVfZXhwb3J0c19fID0gX192dWVfZXhwb3J0c19fIHx8IHt9XG5pZiAoXG4gIHR5cGVvZiBfX3Z1ZV9leHBvcnRzX18uZGVmYXVsdCA9PT0gXCJvYmplY3RcIiB8fFxuICB0eXBlb2YgX192dWVfZXhwb3J0c19fLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIlxuKSB7XG5pZiAoT2JqZWN0LmtleXMoX192dWVfZXhwb3J0c19fKS5zb21lKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIiB9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbl9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX2V4cG9ydHNfXyA9IF9fdnVlX2V4cG9ydHNfXy5kZWZhdWx0XG59XG5pZiAodHlwZW9mIF9fdnVlX29wdGlvbnNfXyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIF9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX29wdGlvbnNfXy5vcHRpb25zXG59XG5fX3Z1ZV9vcHRpb25zX18uX19maWxlID0gXCIvaG9tZS9oZW5yaS93cy1kZWZhdWx0L3Njb3JlLXN0YWdlL3Njb3JlLXN0YWdlLWJyb3dzZXIvc3JjL2NvbXBvbmVudHMvc3MtbXVzaWMtc2NvcmUvc3MtbXVzaWMtc2NvcmUudnVlXCJcbl9fdnVlX29wdGlvbnNfXy5yZW5kZXIgPSBfX3Z1ZV90ZW1wbGF0ZV9fLnJlbmRlclxuX192dWVfb3B0aW9uc19fLnN0YXRpY1JlbmRlckZucyA9IF9fdnVlX3RlbXBsYXRlX18uc3RhdGljUmVuZGVyRm5zXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi01MjU0ODA3N1wiLCBfX3Z1ZV9vcHRpb25zX18pXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi01MjU0ODA3N1wiLCBfX3Z1ZV9vcHRpb25zX18pXG4gIH1cbn0pKCl9XG5pZiAoX192dWVfb3B0aW9uc19fLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIHNzLW11c2ljLXNjb3JlLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIGFuZCBzaG91bGQgYmUgZGVmaW5lZCBpbiBwbGFpbiBqcyBmaWxlcyB1c2luZyByZW5kZXIgZnVuY3Rpb25zLlwiKX1cblxubW9kdWxlLmV4cG9ydHMgPSBfX3Z1ZV9leHBvcnRzX19cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvc3MtbXVzaWMtc2NvcmUvc3MtbXVzaWMtc2NvcmUudnVlXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

eval("var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = __webpack_require__(21)\n\n/* template */\nvar __vue_template__ = __webpack_require__(38)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\nif (Object.keys(__vue_exports__).some(function (key) { return key !== \"default\" && key !== \"__esModule\" })) {console.error(\"named exports are not supported in *.vue files.\")}\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n__vue_options__.__file = \"/home/henri/ws-default/score-stage/score-stage-browser/src/components/ss-music-score/ss-score-row.vue\"\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-76694b28\", __vue_options__)\n  } else {\n    hotAPI.reload(\"data-v-76694b28\", __vue_options__)\n  }\n})()}\nif (__vue_options__.functional) {console.error(\"[vue-loader] ss-score-row.vue: functional components are not supported and should be defined in plain js files using render functions.\")}\n\nmodule.exports = __vue_exports__\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zcy1tdXNpYy1zY29yZS9zcy1zY29yZS1yb3cudnVlPzFhNDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELG1EQUFtRCxJQUFJO0FBQzdHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLENBQUM7QUFDRCxpQ0FBaUM7O0FBRWpDIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fdnVlX2V4cG9ydHNfXywgX192dWVfb3B0aW9uc19fXG52YXIgX192dWVfc3R5bGVzX18gPSB7fVxuXG4vKiBzY3JpcHQgKi9cbl9fdnVlX2V4cG9ydHNfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciF2dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vc3Mtc2NvcmUtcm93LnZ1ZVwiKVxuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj9pZD1kYXRhLXYtNzY2OTRiMjghdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3Mtc2NvcmUtcm93LnZ1ZVwiKVxuX192dWVfb3B0aW9uc19fID0gX192dWVfZXhwb3J0c19fID0gX192dWVfZXhwb3J0c19fIHx8IHt9XG5pZiAoXG4gIHR5cGVvZiBfX3Z1ZV9leHBvcnRzX18uZGVmYXVsdCA9PT0gXCJvYmplY3RcIiB8fFxuICB0eXBlb2YgX192dWVfZXhwb3J0c19fLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIlxuKSB7XG5pZiAoT2JqZWN0LmtleXMoX192dWVfZXhwb3J0c19fKS5zb21lKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIiB9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbl9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX2V4cG9ydHNfXyA9IF9fdnVlX2V4cG9ydHNfXy5kZWZhdWx0XG59XG5pZiAodHlwZW9mIF9fdnVlX29wdGlvbnNfXyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIF9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX29wdGlvbnNfXy5vcHRpb25zXG59XG5fX3Z1ZV9vcHRpb25zX18uX19maWxlID0gXCIvaG9tZS9oZW5yaS93cy1kZWZhdWx0L3Njb3JlLXN0YWdlL3Njb3JlLXN0YWdlLWJyb3dzZXIvc3JjL2NvbXBvbmVudHMvc3MtbXVzaWMtc2NvcmUvc3Mtc2NvcmUtcm93LnZ1ZVwiXG5fX3Z1ZV9vcHRpb25zX18ucmVuZGVyID0gX192dWVfdGVtcGxhdGVfXy5yZW5kZXJcbl9fdnVlX29wdGlvbnNfXy5zdGF0aWNSZW5kZXJGbnMgPSBfX3Z1ZV90ZW1wbGF0ZV9fLnN0YXRpY1JlbmRlckZuc1xuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtNzY2OTRiMjhcIiwgX192dWVfb3B0aW9uc19fKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtNzY2OTRiMjhcIiwgX192dWVfb3B0aW9uc19fKVxuICB9XG59KSgpfVxuaWYgKF9fdnVlX29wdGlvbnNfXy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBzcy1zY29yZS1yb3cudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgYW5kIHNob3VsZCBiZSBkZWZpbmVkIGluIHBsYWluIGpzIGZpbGVzIHVzaW5nIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX2V4cG9ydHNfX1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9zcy1tdXNpYy1zY29yZS9zcy1zY29yZS1yb3cudnVlXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

eval("var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = __webpack_require__(22)\n\n/* template */\nvar __vue_template__ = __webpack_require__(36)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\nif (Object.keys(__vue_exports__).some(function (key) { return key !== \"default\" && key !== \"__esModule\" })) {console.error(\"named exports are not supported in *.vue files.\")}\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n__vue_options__.__file = \"/home/henri/ws-default/score-stage/score-stage-browser/src/components/ss-music-score/ss-score-rows.vue\"\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-4f68d792\", __vue_options__)\n  } else {\n    hotAPI.reload(\"data-v-4f68d792\", __vue_options__)\n  }\n})()}\nif (__vue_options__.functional) {console.error(\"[vue-loader] ss-score-rows.vue: functional components are not supported and should be defined in plain js files using render functions.\")}\n\nmodule.exports = __vue_exports__\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zcy1tdXNpYy1zY29yZS9zcy1zY29yZS1yb3dzLnZ1ZT9kYmY1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxtREFBbUQsSUFBSTtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsaUNBQWlDOztBQUVqQyIsImZpbGUiOiIzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Z1ZV9leHBvcnRzX18sIF9fdnVlX29wdGlvbnNfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cblxuLyogc2NyaXB0ICovXG5fX3Z1ZV9leHBvcnRzX18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXIhdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL3NzLXNjb3JlLXJvd3MudnVlXCIpXG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIXZ1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP2lkPWRhdGEtdi00ZjY4ZDc5MiF2dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcy1zY29yZS1yb3dzLnZ1ZVwiKVxuX192dWVfb3B0aW9uc19fID0gX192dWVfZXhwb3J0c19fID0gX192dWVfZXhwb3J0c19fIHx8IHt9XG5pZiAoXG4gIHR5cGVvZiBfX3Z1ZV9leHBvcnRzX18uZGVmYXVsdCA9PT0gXCJvYmplY3RcIiB8fFxuICB0eXBlb2YgX192dWVfZXhwb3J0c19fLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIlxuKSB7XG5pZiAoT2JqZWN0LmtleXMoX192dWVfZXhwb3J0c19fKS5zb21lKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIiB9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbl9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX2V4cG9ydHNfXyA9IF9fdnVlX2V4cG9ydHNfXy5kZWZhdWx0XG59XG5pZiAodHlwZW9mIF9fdnVlX29wdGlvbnNfXyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIF9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX29wdGlvbnNfXy5vcHRpb25zXG59XG5fX3Z1ZV9vcHRpb25zX18uX19maWxlID0gXCIvaG9tZS9oZW5yaS93cy1kZWZhdWx0L3Njb3JlLXN0YWdlL3Njb3JlLXN0YWdlLWJyb3dzZXIvc3JjL2NvbXBvbmVudHMvc3MtbXVzaWMtc2NvcmUvc3Mtc2NvcmUtcm93cy52dWVcIlxuX192dWVfb3B0aW9uc19fLnJlbmRlciA9IF9fdnVlX3RlbXBsYXRlX18ucmVuZGVyXG5fX3Z1ZV9vcHRpb25zX18uc3RhdGljUmVuZGVyRm5zID0gX192dWVfdGVtcGxhdGVfXy5zdGF0aWNSZW5kZXJGbnNcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTRmNjhkNzkyXCIsIF9fdnVlX29wdGlvbnNfXylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTRmNjhkNzkyXCIsIF9fdnVlX29wdGlvbnNfXylcbiAgfVxufSkoKX1cbmlmIChfX3Z1ZV9vcHRpb25zX18uZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gc3Mtc2NvcmUtcm93cy52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCBhbmQgc2hvdWxkIGJlIGRlZmluZWQgaW4gcGxhaW4ganMgZmlsZXMgdXNpbmcgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbm1vZHVsZS5leHBvcnRzID0gX192dWVfZXhwb3J0c19fXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL3NzLW11c2ljLXNjb3JlL3NzLXNjb3JlLXJvd3MudnVlXG4vLyBtb2R1bGUgaWQgPSAzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"home\"\n    }\n  }, [_c('md-toolbar', [_c('h2', {\n    staticClass: \"md-title\"\n  }, [_vm._v(\"Home\")])]), _vm._v(\" \"), _c('md-layout', {\n    attrs: {\n      \"md-row\": \"\"\n    }\n  }, [_c('md-layout', {\n    attrs: {\n      \"md-flex\": \"15\",\n      \"md-hide-small\": \"\",\n      \"md-hide-xsmall\": \"\"\n    }\n  }), _vm._v(\" \"), _c('md-layout', {\n    staticClass: \"md-padding\",\n    attrs: {\n      \"md-flex\": \"70\",\n      \"md-flex-small\": \"100\",\n      \"md-flex-xsmall\": \"100\"\n    }\n  }, [_c('ss-music-score')], 1), _vm._v(\" \"), _c('md-layout', {\n    attrs: {\n      \"md-flex\": \"15\",\n      \"md-hide-small\": \"\",\n      \"md-hide-xsmall\": \"\"\n    }\n  })], 1)], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-1cf6d633\", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvaG9tZS9ob21lLnZ1ZT9hOTcwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJob21lXCJcbiAgICB9XG4gIH0sIFtfYygnbWQtdG9vbGJhcicsIFtfYygnaDInLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwibWQtdGl0bGVcIlxuICB9LCBbX3ZtLl92KFwiSG9tZVwiKV0pXSksIF92bS5fdihcIiBcIiksIF9jKCdtZC1sYXlvdXQnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwibWQtcm93XCI6IFwiXCJcbiAgICB9XG4gIH0sIFtfYygnbWQtbGF5b3V0Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcIm1kLWZsZXhcIjogXCIxNVwiLFxuICAgICAgXCJtZC1oaWRlLXNtYWxsXCI6IFwiXCIsXG4gICAgICBcIm1kLWhpZGUteHNtYWxsXCI6IFwiXCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCIgXCIpLCBfYygnbWQtbGF5b3V0Jywge1xuICAgIHN0YXRpY0NsYXNzOiBcIm1kLXBhZGRpbmdcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJtZC1mbGV4XCI6IFwiNzBcIixcbiAgICAgIFwibWQtZmxleC1zbWFsbFwiOiBcIjEwMFwiLFxuICAgICAgXCJtZC1mbGV4LXhzbWFsbFwiOiBcIjEwMFwiXG4gICAgfVxuICB9LCBbX2MoJ3NzLW11c2ljLXNjb3JlJyldLCAxKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ21kLWxheW91dCcsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJtZC1mbGV4XCI6IFwiMTVcIixcbiAgICAgIFwibWQtaGlkZS1zbWFsbFwiOiBcIlwiLFxuICAgICAgXCJtZC1oaWRlLXhzbWFsbFwiOiBcIlwiXG4gICAgfVxuICB9KV0sIDEpXSwgMSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtMWNmNmQ2MzNcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIuanM/aWQ9ZGF0YS12LTFjZjZkNjMzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvcGFnZXMvaG9tZS9ob21lLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('md-layout', {\n    directives: [{\n      name: \"watch\",\n      rawName: \"v-watch.width\",\n      value: (_vm.onWidthChanged),\n      expression: \"onWidthChanged\",\n      modifiers: {\n        \"width\": true\n      }\n    }],\n    attrs: {\n      \"md-column\": \"\",\n      \"md-flex\": \"\"\n    }\n  }, _vm._l((_vm.rows), function(row, index) {\n    return _c('ss-score-row', {\n      attrs: {\n        \"ss-index\": index,\n        \"ss-row\": row,\n        \"ss-groups\": _vm.ssGroups,\n        \"ss-width\": _vm.width,\n        \"ss-max-width\": _vm.maxWidth,\n        \"ss-bar-scale\": _vm.ssBarScale\n      }\n    })\n  }))\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-4f68d792\", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zcy1tdXNpYy1zY29yZS9zcy1zY29yZS1yb3dzLnZ1ZT80OTVjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdtZC1sYXlvdXQnLCB7XG4gICAgZGlyZWN0aXZlczogW3tcbiAgICAgIG5hbWU6IFwid2F0Y2hcIixcbiAgICAgIHJhd05hbWU6IFwidi13YXRjaC53aWR0aFwiLFxuICAgICAgdmFsdWU6IChfdm0ub25XaWR0aENoYW5nZWQpLFxuICAgICAgZXhwcmVzc2lvbjogXCJvbldpZHRoQ2hhbmdlZFwiLFxuICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgIFwid2lkdGhcIjogdHJ1ZVxuICAgICAgfVxuICAgIH1dLFxuICAgIGF0dHJzOiB7XG4gICAgICBcIm1kLWNvbHVtblwiOiBcIlwiLFxuICAgICAgXCJtZC1mbGV4XCI6IFwiXCJcbiAgICB9XG4gIH0sIF92bS5fbCgoX3ZtLnJvd3MpLCBmdW5jdGlvbihyb3csIGluZGV4KSB7XG4gICAgcmV0dXJuIF9jKCdzcy1zY29yZS1yb3cnLCB7XG4gICAgICBhdHRyczoge1xuICAgICAgICBcInNzLWluZGV4XCI6IGluZGV4LFxuICAgICAgICBcInNzLXJvd1wiOiByb3csXG4gICAgICAgIFwic3MtZ3JvdXBzXCI6IF92bS5zc0dyb3VwcyxcbiAgICAgICAgXCJzcy13aWR0aFwiOiBfdm0ud2lkdGgsXG4gICAgICAgIFwic3MtbWF4LXdpZHRoXCI6IF92bS5tYXhXaWR0aCxcbiAgICAgICAgXCJzcy1iYXItc2NhbGVcIjogX3ZtLnNzQmFyU2NhbGVcbiAgICAgIH1cbiAgICB9KVxuICB9KSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtNGY2OGQ3OTJcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIuanM/aWQ9ZGF0YS12LTRmNjhkNzkyIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9zcy1tdXNpYy1zY29yZS9zcy1zY29yZS1yb3dzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('md-card', {\n    staticClass: \"md-flex\",\n    staticStyle: {\n      \"overflow\": \"visible\"\n    }\n  }, [_c('md-card-content', [_c('ss-score-rows', {\n    attrs: {\n      \"ss-measures\": _vm.measures,\n      \"ss-groups\": _vm.groups,\n      \"ss-bar-scale\": 2\n    }\n  })], 1)], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-52548077\", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zcy1tdXNpYy1zY29yZS9zcy1tdXNpYy1zY29yZS52dWU/YWUyNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQW1CLGFBQWEsMEJBQTBCO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ21kLWNhcmQnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwibWQtZmxleFwiLFxuICAgIHN0YXRpY1N0eWxlOiB7XG4gICAgICBcIm92ZXJmbG93XCI6IFwidmlzaWJsZVwiXG4gICAgfVxuICB9LCBbX2MoJ21kLWNhcmQtY29udGVudCcsIFtfYygnc3Mtc2NvcmUtcm93cycsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJzcy1tZWFzdXJlc1wiOiBfdm0ubWVhc3VyZXMsXG4gICAgICBcInNzLWdyb3Vwc1wiOiBfdm0uZ3JvdXBzLFxuICAgICAgXCJzcy1iYXItc2NhbGVcIjogMlxuICAgIH1cbiAgfSldLCAxKV0sIDEpXG59LHN0YXRpY1JlbmRlckZuczogW119XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LTUyNTQ4MDc3XCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyLmpzP2lkPWRhdGEtdi01MjU0ODA3NyEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvc3MtbXVzaWMtc2NvcmUvc3MtbXVzaWMtc2NvcmUudnVlXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div')\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-76694b28\", module.exports)\n  }\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9zcy1tdXNpYy1zY29yZS9zcy1zY29yZS1yb3cudnVlP2ZjOTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jylcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtNzY2OTRiMjhcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIuanM/aWQ9ZGF0YS12LTc2Njk0YjI4IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9zcy1tdXNpYy1zY29yZS9zcy1zY29yZS1yb3cudnVlXG4vLyBtb2R1bGUgaWQgPSAzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */
/***/ function(module, exports, __webpack_require__) {

eval("/*!\n * Vue Material v0.6.3\n * Made with love by Marcos Moura\n * Released under the MIT License.\n */\n!(function(e,t){ true?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.VueMaterial=t():e.VueMaterial=t()})(this,(function(){return (function(e){function t(o){if(r[o])return r[o].exports;var n=r[o]={exports:{},id:o,loaded:!1};return e[o].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var r={};return t.m=e,t.c=r,t.p=\"/\",t(0)})({0:function(e,t,r){e.exports=r(100)},1:function(e,t){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.default={props:{mdTheme:String},data:function(){return{closestThemedParent:!1}},methods:{getClosestThemedParent:function(e){return!(!e||!e.$el||0===e._uid)&&(e.mdTheme||e.mdName?e:this.getClosestThemedParent(e.$parent))}},computed:{themeClass:function(){if(this.mdTheme)return\"md-theme-\"+this.mdTheme;var e=this.closestThemedParent.mdTheme;return e||(e=this.closestThemedParent?this.closestThemedParent.mdName:this.$material.currentTheme),\"md-theme-\"+e}},mounted:function(){this.closestThemedParent=this.getClosestThemedParent(this.$parent),this.$material.currentTheme||this.$material.setCurrentTheme(\"default\")}},e.exports=t.default},100:function(e,t,r){\"use strict\";function o(e){return e&&e.__esModule?e:{default:e}}function n(e){e.component(\"md-toolbar\",e.extend(a.default)),e.material.styles.push(u.default)}Object.defineProperty(t,\"__esModule\",{value:!0}),t.default=n;var s=r(307),a=o(s),d=r(246),u=o(d);e.exports=t.default},161:function(e,t,r){\"use strict\";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,\"__esModule\",{value:!0});var n=r(1),s=o(n);t.default={mixins:[s.default]},e.exports=t.default},208:function(e,t){},246:function(e,t){e.exports=\".THEME_NAME.md-toolbar{background-color:PRIMARY-COLOR;color:PRIMARY-CONTRAST}.THEME_NAME.md-toolbar.md-accent{background-color:ACCENT-COLOR;color:ACCENT-CONTRAST}.THEME_NAME.md-toolbar.md-warn{background-color:WARN-COLOR;color:WARN-CONTRAST}.THEME_NAME.md-toolbar.md-transparent{background-color:transparent;color:BACKGROUND-CONTRAST}\\n\"},307:function(e,t,r){var o,n;r(208),o=r(161);var s=r(347);n=o=o||{},\"object\"!=typeof o.default&&\"function\"!=typeof o.default||(n=o=o.default),\"function\"==typeof n&&(n=n.options),n.render=s.render,n.staticRenderFns=s.staticRenderFns,e.exports=o},347:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,r=e._self._c||t;return r(\"div\",{staticClass:\"md-toolbar\",class:[e.themeClass]},[e._t(\"default\")],2)},staticRenderFns:[]}}})}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1tYXRlcmlhbC9kaXN0L2NvbXBvbmVudHMvbWRUb29sYmFyL2luZGV4LmpzP2RhOTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwrSUFBMkwsbUJBQW1CLG9CQUFvQixjQUFjLDRCQUE0QixZQUFZLFVBQVUsaUJBQWlCLGdFQUFnRSxTQUFTLGdDQUFnQyxHQUFHLGtCQUFrQixpQkFBaUIsaUJBQWlCLGFBQWEsc0NBQXNDLFNBQVMsYUFBYSxPQUFPLGVBQWUsaUJBQWlCLE9BQU8sd0JBQXdCLFVBQVUsbUNBQW1DLGlHQUFpRyxXQUFXLHNCQUFzQiwrQ0FBK0MsdUNBQXVDLGtIQUFrSCxvQkFBb0IsMklBQTJJLHFCQUFxQixxQkFBcUIsYUFBYSxjQUFjLDBCQUEwQixXQUFXLGNBQWMsZ0ZBQWdGLHNDQUFzQyxTQUFTLGNBQWMsb0NBQW9DLG9CQUFvQixxQkFBcUIsYUFBYSxjQUFjLDBCQUEwQixXQUFXLHNDQUFzQyxTQUFTLEVBQUUsa0JBQWtCLFdBQVcsbUJBQW1CLHFCQUFxQixvQkFBb0IsbUJBQW1CLGtDQUFrQywrQkFBK0IsdUJBQXVCLGlDQUFpQyw4QkFBOEIsc0JBQXNCLCtCQUErQiw0QkFBNEIsb0JBQW9CLHNDQUFzQyw2QkFBNkIsMEJBQTBCLElBQUkscUJBQXFCLFFBQVEsZ0JBQWdCLGFBQWEsU0FBUyxpTEFBaUwsbUJBQW1CLFdBQVcsa0JBQWtCLDhDQUE4QyxnQkFBZ0IsOENBQThDLHNCQUFzQixzQkFBc0IsRUFBRSIsImZpbGUiOiI0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogVnVlIE1hdGVyaWFsIHYwLjYuM1xuICogTWFkZSB3aXRoIGxvdmUgYnkgTWFyY29zIE1vdXJhXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbiEoZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLlZ1ZU1hdGVyaWFsPXQoKTplLlZ1ZU1hdGVyaWFsPXQoKX0pKHRoaXMsKGZ1bmN0aW9uKCl7cmV0dXJuIChmdW5jdGlvbihlKXtmdW5jdGlvbiB0KG8pe2lmKHJbb10pcmV0dXJuIHJbb10uZXhwb3J0czt2YXIgbj1yW29dPXtleHBvcnRzOnt9LGlkOm8sbG9hZGVkOiExfTtyZXR1cm4gZVtvXS5jYWxsKG4uZXhwb3J0cyxuLG4uZXhwb3J0cyx0KSxuLmxvYWRlZD0hMCxuLmV4cG9ydHN9dmFyIHI9e307cmV0dXJuIHQubT1lLHQuYz1yLHQucD1cIi9cIix0KDApfSkoezA6ZnVuY3Rpb24oZSx0LHIpe2UuZXhwb3J0cz1yKDEwMCl9LDE6ZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9e3Byb3BzOnttZFRoZW1lOlN0cmluZ30sZGF0YTpmdW5jdGlvbigpe3JldHVybntjbG9zZXN0VGhlbWVkUGFyZW50OiExfX0sbWV0aG9kczp7Z2V0Q2xvc2VzdFRoZW1lZFBhcmVudDpmdW5jdGlvbihlKXtyZXR1cm4hKCFlfHwhZS4kZWx8fDA9PT1lLl91aWQpJiYoZS5tZFRoZW1lfHxlLm1kTmFtZT9lOnRoaXMuZ2V0Q2xvc2VzdFRoZW1lZFBhcmVudChlLiRwYXJlbnQpKX19LGNvbXB1dGVkOnt0aGVtZUNsYXNzOmZ1bmN0aW9uKCl7aWYodGhpcy5tZFRoZW1lKXJldHVyblwibWQtdGhlbWUtXCIrdGhpcy5tZFRoZW1lO3ZhciBlPXRoaXMuY2xvc2VzdFRoZW1lZFBhcmVudC5tZFRoZW1lO3JldHVybiBlfHwoZT10aGlzLmNsb3Nlc3RUaGVtZWRQYXJlbnQ/dGhpcy5jbG9zZXN0VGhlbWVkUGFyZW50Lm1kTmFtZTp0aGlzLiRtYXRlcmlhbC5jdXJyZW50VGhlbWUpLFwibWQtdGhlbWUtXCIrZX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmNsb3Nlc3RUaGVtZWRQYXJlbnQ9dGhpcy5nZXRDbG9zZXN0VGhlbWVkUGFyZW50KHRoaXMuJHBhcmVudCksdGhpcy4kbWF0ZXJpYWwuY3VycmVudFRoZW1lfHx0aGlzLiRtYXRlcmlhbC5zZXRDdXJyZW50VGhlbWUoXCJkZWZhdWx0XCIpfX0sZS5leHBvcnRzPXQuZGVmYXVsdH0sMTAwOmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBvKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBuKGUpe2UuY29tcG9uZW50KFwibWQtdG9vbGJhclwiLGUuZXh0ZW5kKGEuZGVmYXVsdCkpLGUubWF0ZXJpYWwuc3R5bGVzLnB1c2godS5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9bjt2YXIgcz1yKDMwNyksYT1vKHMpLGQ9cigyNDYpLHU9byhkKTtlLmV4cG9ydHM9dC5kZWZhdWx0fSwxNjE6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG8oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMSkscz1vKG4pO3QuZGVmYXVsdD17bWl4aW5zOltzLmRlZmF1bHRdfSxlLmV4cG9ydHM9dC5kZWZhdWx0fSwyMDg6ZnVuY3Rpb24oZSx0KXt9LDI0NjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1cIi5USEVNRV9OQU1FLm1kLXRvb2xiYXJ7YmFja2dyb3VuZC1jb2xvcjpQUklNQVJZLUNPTE9SO2NvbG9yOlBSSU1BUlktQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC1hY2NlbnR7YmFja2dyb3VuZC1jb2xvcjpBQ0NFTlQtQ09MT1I7Y29sb3I6QUNDRU5ULUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLXRvb2xiYXIubWQtd2FybntiYWNrZ3JvdW5kLWNvbG9yOldBUk4tQ09MT1I7Y29sb3I6V0FSTi1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLXRyYW5zcGFyZW50e2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVH1cXG5cIn0sMzA3OmZ1bmN0aW9uKGUsdCxyKXt2YXIgbyxuO3IoMjA4KSxvPXIoMTYxKTt2YXIgcz1yKDM0Nyk7bj1vPW98fHt9LFwib2JqZWN0XCIhPXR5cGVvZiBvLmRlZmF1bHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIG8uZGVmYXVsdHx8KG49bz1vLmRlZmF1bHQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJihuPW4ub3B0aW9ucyksbi5yZW5kZXI9cy5yZW5kZXIsbi5zdGF0aWNSZW5kZXJGbnM9cy5zdGF0aWNSZW5kZXJGbnMsZS5leHBvcnRzPW99LDM0NzpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuJGNyZWF0ZUVsZW1lbnQscj1lLl9zZWxmLl9jfHx0O3JldHVybiByKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtdG9vbGJhclwiLGNsYXNzOltlLnRoZW1lQ2xhc3NdfSxbZS5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fX0pfSkpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbWF0ZXJpYWwvZGlzdC9jb21wb25lbnRzL21kVG9vbGJhci9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__home_vue__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__home_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__home_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Src_common_css__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_Src_common_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_Src_common_css__);\n\n\n\n\nwindow.addEventListener('load', function () {\n    new __WEBPACK_IMPORTED_MODULE_0_vue___default.a({ el: '#home', render: function render(h) {\n            return h(__WEBPACK_IMPORTED_MODULE_1__home_vue___default.a);\n        } });\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvaG9tZS9pbmRleC5qcz9hNmEzIl0sIm5hbWVzIjpbIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbCIsInJlbmRlciIsImgiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFQUEsT0FBT0MsZ0JBQVAsQ0FBd0IsTUFBeEIsRUFBZ0MsWUFBVztBQUN2QyxRQUFJLDJDQUFKLENBQVEsRUFBRUMsSUFBSyxPQUFQLEVBQWdCQyxRQUFTO0FBQUEsbUJBQUtDLEVBQUUsaURBQUYsQ0FBTDtBQUFBLFNBQXpCLEVBQVI7QUFDSCxDQUZEIiwiZmlsZSI6IjQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IGhvbWUgZnJvbSAnLi9ob21lLnZ1ZSc7XG5pbXBvcnQgJ1NyYy9jb21tb24uY3NzJztcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICBuZXcgVnVlKHsgZWwgOiAnI2hvbWUnLCByZW5kZXIgOiBoID0+IGgoaG9tZSkgfSk7XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcGFnZXMvaG9tZS9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }
/******/ ]);